 Resolving package versions...
 Installed VersionParsing ────────────── v1.1.3
 Installed Requires ──────────────────── v0.5.2
 Installed StatsKit ──────────────────── v0.3.0
 Installed NaNMath ───────────────────── v0.3.3
 Installed InvertedIndices ───────────── v1.0.0
 Installed CommonSubexpressions ──────── v0.2.0
 Installed Arpack ────────────────────── v0.3.1
 Installed BinaryProvider ────────────── v0.5.8
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed ArrayInterface ────────────── v1.2.1
 Installed RecipesBase ───────────────── v0.7.0
 Installed DiffRules ─────────────────── v0.1.0
 Installed DiffEqDiffTools ───────────── v1.4.0
 Installed FFTW ──────────────────────── v1.1.0
 Installed GLM ───────────────────────── v1.3.4
 Installed PositiveFactorizations ────── v0.2.3
 Installed Parsers ───────────────────── v0.3.10
 Installed FilePathsBase ─────────────── v0.7.0
 Installed MacroTools ────────────────── v0.5.2
 Installed KernelDensity ─────────────── v0.5.1
 Installed DataStructures ────────────── v0.17.6
 Installed Reexport ──────────────────── v0.2.0
 Installed WoodburyMatrices ──────────── v0.4.1
 Installed Conda ─────────────────────── v1.3.0
 Installed Polynomials ───────────────── v0.6.0
 Installed BinDeps ───────────────────── v0.8.10
 Installed DataValueInterfaces ───────── v1.0.0
 Installed SpecialFunctions ──────────── v0.8.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed JSON ──────────────────────── v0.21.0
 Installed AxisAlgorithms ────────────── v1.0.0
 Installed Roots ─────────────────────── v0.8.3
 Installed Distributions ─────────────── v0.21.8
 Installed OffsetArrays ──────────────── v0.11.1
 Installed PDMats ────────────────────── v0.9.10
 Installed AbstractFFTs ──────────────── v0.5.0
 Installed Distances ─────────────────── v0.8.2
 Installed LazyArrays ────────────────── v0.13.1
 Installed URIParser ─────────────────── v0.4.0
 Installed Loess ─────────────────────── v0.5.0
 Installed Ratios ────────────────────── v0.3.1
 Installed StaticArrays ──────────────── v0.12.1
 Installed DiffResults ───────────────── v0.0.4
 Installed DataFrames ────────────────── v0.19.4
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed LineSearches ──────────────── v7.0.1
 Installed Interpolations ────────────── v0.12.5
 Installed StatsBase ─────────────────── v0.32.0
 Installed StatsModels ───────────────── v0.6.7
 Installed FillArrays ────────────────── v0.7.4
 Installed WeakRefStrings ────────────── v0.6.1
 Installed PooledArrays ──────────────── v0.5.2
 Installed Missings ──────────────────── v0.4.3
 Installed NLSolversBase ─────────────── v7.5.0
 Installed OrderedCollections ────────── v1.1.0
 Installed CategoricalArrays ─────────── v0.7.3
 Installed MultivariateStats ─────────── v0.7.0
 Installed TableTraits ───────────────── v1.0.0
 Installed Rmath ─────────────────────── v0.5.1
 Installed Optim ─────────────────────── v0.19.4
 Installed NearestNeighbors ──────────── v0.4.3
 Installed Combinatorics ─────────────── v0.7.0
 Installed Clustering ────────────────── v0.13.3
 Installed ShiftedArrays ─────────────── v1.0.0
 Installed QuadGK ────────────────────── v2.1.1
 Installed Calculus ──────────────────── v0.5.1
 Installed Parameters ────────────────── v0.12.0
 Installed HypothesisTests ───────────── v0.8.0
 Installed ForwardDiff ───────────────── v0.10.6
 Installed Tables ────────────────────── v0.2.11
 Installed StatsFuns ─────────────────── v0.9.0
 Installed TimeSeries ────────────────── v0.16.1
 Installed Compat ────────────────────── v2.2.0
 Installed Bootstrap ─────────────────── v2.2.0
 Installed CSV ───────────────────────── v0.5.18
  Updating `~/.julia/environments/v1.0/Project.toml`
  [2cb19f9e] + StatsKit v0.3.0
  Updating `~/.julia/environments/v1.0/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [7d9fca2a] + Arpack v0.3.1
  [4fba245c] + ArrayInterface v1.2.1
  [13072b0f] + AxisAlgorithms v1.0.0
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [e28b5b4c] + Bootstrap v2.2.0
  [336ed68f] + CSV v0.5.18
  [49dc2e85] + Calculus v0.5.1
  [324d7699] + CategoricalArrays v0.7.3
  [aaaa29a8] + Clustering v0.13.3
  [861a8166] + Combinatorics v0.7.0
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [8f4d0f93] + Conda v1.3.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.19.4
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [01453d9d] + DiffEqDiffTools v1.4.0
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [b4f34e82] + Distances v0.8.2
  [31c24e10] + Distributions v0.21.8
  [7a1cc6ca] + FFTW v1.1.0
  [48062228] + FilePathsBase v0.7.0
  [1a297f60] + FillArrays v0.7.4
  [f6369f11] + ForwardDiff v0.10.6
  [38e38edf] + GLM v1.3.4
  [09f84164] + HypothesisTests v0.8.0
  [a98d9a8b] + Interpolations v0.12.5
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5ab0869b] + KernelDensity v0.5.1
  [5078a376] + LazyArrays v0.13.1
  [d3d80556] + LineSearches v7.0.1
  [4345ca2d] + Loess v0.5.0
  [1914dd2f] + MacroTools v0.5.2
  [e1d29d7a] + Missings v0.4.3
  [6f286f6a] + MultivariateStats v0.7.0
  [d41bc354] + NLSolversBase v7.5.0
  [77ba4419] + NaNMath v0.3.3
  [b8a86587] + NearestNeighbors v0.4.3
  [6fe1bfb0] + OffsetArrays v0.11.1
  [429524aa] + Optim v0.19.4
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.10
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [f27b6e38] + Polynomials v0.6.0
  [2dfb63ee] + PooledArrays v0.5.2
  [85a6dd25] + PositiveFactorizations v0.2.3
  [1fd47b50] + QuadGK v2.1.1
  [c84ed2f1] + Ratios v0.3.1
  [3cdcf5f2] + RecipesBase v0.7.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [79098fc4] + Rmath v0.5.1
  [f2b01f46] + Roots v0.8.3
  [1277b4bf] + ShiftedArrays v1.0.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.8.0
  [90137ffa] + StaticArrays v0.12.1
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.0
  [2cb19f9e] + StatsKit v0.3.0
  [3eaba693] + StatsModels v0.6.7
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [9e3dc215] + TimeSeries v0.16.1
  [30578b45] + URIParser v0.4.0
  [81def892] + VersionParsing v1.1.3
  [ea10d353] + WeakRefStrings v0.6.1
  [efce3f68] + WoodburyMatrices v0.4.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Arpack ──────────→ `~/.julia/packages/Arpack/cu5By/deps/build.log`
  Building Conda ───────────→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Building FFTW ────────────→ `~/.julia/packages/FFTW/loJ3F/deps/build.log`
  Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
  Building Rmath ───────────→ `~/.julia/packages/Rmath/4wt82/deps/build.log`
   Testing StatsKit
    Status `/tmp/tmpqftYKs/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [7d9fca2a] Arpack v0.3.1
  [4fba245c] ArrayInterface v1.2.1
  [13072b0f] AxisAlgorithms v1.0.0
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [e28b5b4c] Bootstrap v2.2.0
  [336ed68f] CSV v0.5.18
  [49dc2e85] Calculus v0.5.1
  [324d7699] CategoricalArrays v0.7.3
  [aaaa29a8] Clustering v0.13.3
  [861a8166] Combinatorics v0.7.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [8f4d0f93] Conda v1.3.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.19.4
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [01453d9d] DiffEqDiffTools v1.4.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.21.8
  [7a1cc6ca] FFTW v1.1.0
  [48062228] FilePathsBase v0.7.0
  [1a297f60] FillArrays v0.7.4
  [f6369f11] ForwardDiff v0.10.6
  [38e38edf] GLM v1.3.4
  [09f84164] HypothesisTests v0.8.0
  [a98d9a8b] Interpolations v0.12.5
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5ab0869b] KernelDensity v0.5.1
  [5078a376] LazyArrays v0.13.1
  [d3d80556] LineSearches v7.0.1
  [4345ca2d] Loess v0.5.0
  [1914dd2f] MacroTools v0.5.2
  [e1d29d7a] Missings v0.4.3
  [6f286f6a] MultivariateStats v0.7.0
  [d41bc354] NLSolversBase v7.5.0
  [77ba4419] NaNMath v0.3.3
  [b8a86587] NearestNeighbors v0.4.3
  [6fe1bfb0] OffsetArrays v0.11.1
  [429524aa] Optim v0.19.4
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.10
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.10
  [f27b6e38] Polynomials v0.6.0
  [2dfb63ee] PooledArrays v0.5.2
  [85a6dd25] PositiveFactorizations v0.2.3
  [1fd47b50] QuadGK v2.1.1
  [c84ed2f1] Ratios v0.3.1
  [3cdcf5f2] RecipesBase v0.7.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [79098fc4] Rmath v0.5.1
  [f2b01f46] Roots v0.8.3
  [1277b4bf] ShiftedArrays v1.0.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.0
  [2cb19f9e] StatsKit v0.3.0
  [3eaba693] StatsModels v0.6.7
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [9e3dc215] TimeSeries v0.16.1
  [30578b45] URIParser v0.4.0
  [81def892] VersionParsing v1.1.3
  [ea10d353] WeakRefStrings v0.6.1
  [efce3f68] WoodburyMatrices v0.4.1
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
   Testing Bootstrap
 Resolving package versions...
 Installed ArrayLayouts ─────── v0.1.5
 Installed Mocking ──────────── v0.7.0
 Installed FillArrays ───────── v0.8.2
 Installed CodecZlib ────────── v0.6.0
 Installed FileIO ───────────── v1.0.7
 Installed LazyArrays ───────── v0.14.8
 Installed RData ────────────── v0.6.3
 Installed EzXML ────────────── v0.9.4
 Installed TimeZones ────────── v0.10.3
 Installed TranscodingStreams ─ v0.9.5
 Installed RDatasets ────────── v0.6.5
  Building CodecZlib → `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
  Building EzXML ────→ `~/.julia/packages/EzXML/G0JeY/deps/build.log`
  Building TimeZones → `~/.julia/packages/TimeZones/pjvlM/deps/build.log`
    Status `/tmp/tmpv0lkRz/Manifest.toml`
  [7d9fca2a] Arpack v0.3.1
  [4c555306] ArrayLayouts v0.1.5
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [e28b5b4c] Bootstrap v2.2.0
  [336ed68f] CSV v0.5.18
  [324d7699] CategoricalArrays v0.7.3
  [944b1d66] CodecZlib v0.6.0
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.19.4
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [31c24e10] Distributions v0.21.8
  [8f5d6c58] EzXML v0.9.4
  [5789e2e9] FileIO v1.0.7
  [48062228] FilePathsBase v0.7.0
  [1a297f60] FillArrays v0.8.2
  [38e38edf] GLM v1.3.4
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5078a376] LazyArrays v0.14.8
  [1914dd2f] MacroTools v0.5.2
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.0
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.10
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.2
  [1fd47b50] QuadGK v2.1.1
  [df47a6cb] RData v0.6.3
  [ce6b1742] RDatasets v0.6.5
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [79098fc4] Rmath v0.5.1
  [1277b4bf] ShiftedArrays v1.0.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.0
  [3eaba693] StatsModels v0.6.7
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [f269a46b] TimeZones v0.10.3
  [3bb67fe8] TranscodingStreams v0.9.5
  [30578b45] URIParser v0.4.0
  [ea10d353] WeakRefStrings v0.6.1
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary:             | Pass  Total
Non-parametric bootstraps |  448    448
Test Summary:         | Pass  Total
Parametric bootstraps |  315    315
Test Summary:       | Pass  Total
Statistic functions | 1008   1008
Test Summary:     | Pass  Total
Utility functions |   10     10
Test Summary: | Pass  Total
Distributions |    5      5
   Testing Bootstrap tests passed 
   Testing CategoricalArrays
 Resolving package versions...
    Status `/tmp/tmpJBWIoG/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.3
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [682c06a0] JSON v0.21.0
  [e1d29d7a] Missings v0.4.3
  [69de0a69] Parsers v0.3.10
  [189a3867] Reexport v0.2.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 01_typedef.jl:56 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/01_typedef.jl:56
Test Summary: | Pass  Total
01_typedef.jl |   99     99
Test Summary:    | Pass  Total
02_buildorder.jl |    6      6
Test Summary:     | Pass  Total
03_buildfields.jl |    6      6
Test Summary:      | Pass  Total
04_constructors.jl |  121    121
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 05_convert.jl:76 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/05_convert.jl:76
Test Summary: | Pass  Total
05_convert.jl |  124    124
Test Summary: | Pass  Total
05_copy.jl    |   14     14
Test Summary: | Pass  Total
06_show.jl    |   52     52
Test Summary: | Pass  Total
06_length.jl  |    2      2
Test Summary: | Pass  Total
07_levels.jl  |  362    362
Test Summary:  | Pass  Total
08_equality.jl |  110    110
┌ Warning: `isempty(x::CategoricalString)` is deprecated, use `isempty(String(x))` instead.
│   caller = macro expansion at 08_string.jl:32 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:32
┌ Warning: `isempty(x::CategoricalString)` is deprecated, use `isempty(String(x))` instead.
│   caller = macro expansion at 08_string.jl:33 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:33
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 08_string.jl:35 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:35
┌ Warning: `eltype(x::CategoricalString)` is deprecated, use `eltype(String(x))` instead.
│   caller = macro expansion at 08_string.jl:36 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:36
┌ Warning: `length(x::CategoricalString)` is deprecated, use `length(String(x))` instead.
│   caller = macro expansion at 08_string.jl:38 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:38
┌ Warning: `length(x::CategoricalString)` is deprecated, use `length(String(x))` instead.
│   caller = macro expansion at 08_string.jl:39 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:39
┌ Warning: `sizeof(x::CategoricalString)` is deprecated, use `sizeof(String(x))` instead.
│   caller = macro expansion at 08_string.jl:41 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:41
┌ Warning: `sizeof(x::CategoricalString)` is deprecated, use `sizeof(String(x))` instead.
│   caller = macro expansion at 08_string.jl:42 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:42
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:44 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:44
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:45 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:45
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:47 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:47
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:48 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:48
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = macro expansion at 08_string.jl:50 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:50
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = macro expansion at 08_string.jl:51 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:51
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = macro expansion at 08_string.jl:53 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:53
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = macro expansion at 08_string.jl:54 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:54
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = macro expansion at 08_string.jl:56 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:56
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = macro expansion at 08_string.jl:57 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:57
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:59 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:59
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:60 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:60
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:61 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:61
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:62 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:62
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:64 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:64
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:65 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:65
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:66 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:66
┌ Warning: `codeunit(x::CategoricalString, i::Integer)` is deprecated, use `codeunit(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:67 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:67
┌ Warning: `ascii(x::CategoricalString)` is deprecated, use `ascii(String(x))` instead.
│   caller = macro expansion at 08_string.jl:69 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:69
┌ Warning: `ascii(x::CategoricalString)` is deprecated, use `ascii(String(x))` instead.
│   caller = macro expansion at 08_string.jl:70 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:70
┌ Warning: `normalize(x::CategoricalString, s::Symbol)` is deprecated, use `normalize(String(x), s)` instead.
│   caller = macro expansion at 08_string.jl:74 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:74
┌ Warning: `graphemes(x::CategoricalString)` is deprecated, use `graphemes(String(x))` instead.
│   caller = macro expansion at 08_string.jl:76 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:76
┌ Warning: `graphemes(x::CategoricalString)` is deprecated, use `graphemes(String(x))` instead.
│   caller = macro expansion at 08_string.jl:77 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:77
┌ Warning: `isvalid(x::CategoricalString)` is deprecated, use `isvalid(String(x))` instead.
│   caller = macro expansion at 08_string.jl:79 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:79
┌ Warning: `isvalid(x::CategoricalString)` is deprecated, use `isvalid(String(x))` instead.
│   caller = macro expansion at 08_string.jl:80 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:80
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:81 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:81
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:82 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:82
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:83 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:83
┌ Warning: `length(x::CategoricalString, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = macro expansion at 08_string.jl:85 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:85
┌ Warning: `length(x::CategoricalString, i::Int, j::Int)` is deprecated, use `length(String(x), i, j)` instead.
│   caller = macro expansion at 08_string.jl:86 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:86
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = nextind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at basic.jl:519
└ @ Base ./strings/basic.jl:519
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = nextind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at basic.jl:523
└ @ Base ./strings/basic.jl:523
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = ^ at basic.jl:674 [inlined]
└ @ Core ./strings/basic.jl:674
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = ^ at basic.jl:674 [inlined]
└ @ Core ./strings/basic.jl:674
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:112 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:112
┌ Warning: `repeat(x::CategoricalString, i::Integer)` is deprecated, use `repeat(String(x), i)` instead.
│   caller = macro expansion at 08_string.jl:113 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:113
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap=false)` is deprecated, use `eachmatch(r, String(x), overlap=overlap)` instead.
│   caller = macro expansion at 08_string.jl:115 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:115
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap=false)` is deprecated, use `eachmatch(r, String(x), overlap=overlap)` instead.
│   caller = macro expansion at 08_string.jl:116 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:116
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalString{UInt32}) at deprecated.jl:54
└ @ CategoricalArrays ./deprecated.jl:54
┌ Warning: `match(r::Regex, s::CategoricalString, idx::Integer=firstindex(s), add_opts::UInt32=UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = match(::Regex, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:54
└ @ CategoricalArrays ./deprecated.jl:54
┌ Warning: `match(r::Regex, s::CategoricalString, idx::Integer=firstindex(s), add_opts::UInt32=UInt32(0); kwargs...)` is deprecated, use `match(r, String(s), idx, add_opts; kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:121 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:121
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap=false)` is deprecated, use `eachmatch(r, String(x), overlap=overlap)` instead.
│   caller = macro expansion at 08_string.jl:123 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:123
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap=false)` is deprecated, use `eachmatch(r, String(x), overlap=overlap)` instead.
│   caller = macro expansion at 08_string.jl:124 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:124
┌ Warning: `eachmatch(r::Regex, x::CategoricalString; overlap=false)` is deprecated, use `eachmatch(r, String(x), overlap=overlap)` instead.
│   caller = ip:0x0
└ @ Core :-1
┌ Warning: `lpad(x::CategoricalString, n::Integer, c::Union{AbstractChar, AbstractString}=' ')` is deprecated, use `lpad(String(x), n)` instead.
│   caller = lpad(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:54
└ @ CategoricalArrays ./deprecated.jl:54
┌ Warning: `rpad(x::CategoricalString, n::Integer, c::Union{AbstractChar, AbstractString}=' ')` is deprecated, use `rpad(String(x), n)` instead.
│   caller = rpad(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at deprecated.jl:54
└ @ CategoricalArrays ./deprecated.jl:54
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = findfirst(::String, ::CategoricalArrays.CategoricalString{UInt32}) at search.jl:104
└ @ Base ./strings/search.jl:104
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:126
└ @ Base ./strings/search.jl:126
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:126
└ @ Base ./strings/search.jl:126
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:109
└ @ Base ./strings/search.jl:109
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:111
└ @ Base ./strings/search.jl:111
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = Type at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = checkbounds at basic.jl:187 [inlined]
└ @ Core ./strings/basic.jl:187
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:31
└ @ Base ./strings/substring.jl:31
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:32
└ @ Base ./strings/substring.jl:32
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = SubString{CategoricalArrays.CategoricalString{UInt32}}(::CategoricalArrays.CategoricalString{UInt32}, ::Int64, ::Int64) at substring.jl:34
└ @ Base ./strings/substring.jl:34
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:82 [inlined]
└ @ Core ./strings/substring.jl:82
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(isequal),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at substring.jl:68
└ @ Base ./strings/substring.jl:68
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:68 [inlined]
└ @ Core ./strings/substring.jl:68
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _searchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:133
└ @ Base ./strings/search.jl:133
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = Type at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:109
└ @ Base ./strings/search.jl:109
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:111
└ @ Base ./strings/search.jl:111
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = Type at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = findnext(::Base.Fix2{typeof(==),Char}, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at substring.jl:68
└ @ Base ./strings/substring.jl:68
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:68 [inlined]
└ @ Core ./strings/substring.jl:68
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = findlast(::String, ::CategoricalArrays.CategoricalString{UInt32}) at search.jl:273
└ @ Base ./strings/search.jl:273
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = findprev(::Function, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:281
└ @ Base ./strings/search.jl:281
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = findprev(::Function, ::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at search.jl:287
└ @ Base ./strings/search.jl:287
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = reverseind at basic.jl:644 [inlined]
└ @ Core ./strings/basic.jl:644
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = thisind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at basic.jl:399
└ @ Base ./strings/basic.jl:399
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = thisind(::CategoricalArrays.CategoricalString{UInt32}, ::Int64) at basic.jl:402
└ @ Base ./strings/basic.jl:402
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _rsearchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:303
└ @ Base ./strings/search.jl:303
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = getindex at substring.jl:76 [inlined]
└ @ Core ./strings/substring.jl:76
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _rsearchindex(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64) at search.jl:310
└ @ Base ./strings/search.jl:310
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = last at basic.jl:537 [inlined]
└ @ Core ./strings/basic.jl:537
┌ Warning: `occursin(x::AbstractString, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = macro expansion at 08_string.jl:145 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:145
┌ Warning: `occursin(x::AbstractString, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = macro expansion at 08_string.jl:146 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:146
┌ Warning: `occursin(x::AbstractString, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = macro expansion at 08_string.jl:147 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:147
┌ Warning: `occursin(x::Regex, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = macro expansion at 08_string.jl:149 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:149
┌ Warning: `occursin(x::Regex, y::CategoricalString)` is deprecated, use `occursin(x, String(y))` instead.
│   caller = macro expansion at 08_string.jl:150 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:150
┌ Warning: `startswith(x::CategoricalString, y::AbstractString)` is deprecated, use `startswith(String(x), y)` instead.
│   caller = macro expansion at 08_string.jl:152 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:152
┌ Warning: `startswith(x::CategoricalString, y::AbstractString)` is deprecated, use `startswith(String(x), y)` instead.
│   caller = macro expansion at 08_string.jl:153 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:153
┌ Warning: `startswith(x::CategoricalString, y::AbstractString)` is deprecated, use `startswith(String(x), y)` instead.
│   caller = macro expansion at 08_string.jl:154 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:154
┌ Warning: `endswith(x::CategoricalString, y::AbstractString)` is deprecated, use `endswith(String(x), y)` instead.
│   caller = macro expansion at 08_string.jl:156 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:156
┌ Warning: `endswith(x::CategoricalString, y::AbstractString)` is deprecated, use `endswith(String(x), y)` instead.
│   caller = macro expansion at 08_string.jl:157 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:157
┌ Warning: `endswith(x::CategoricalString, y::AbstractString)` is deprecated, use `endswith(String(x), y)` instead.
│   caller = macro expansion at 08_string.jl:158 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:158
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = macro expansion at 08_string.jl:160 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:160
┌ Warning: `reverse(x::CategoricalString)` is deprecated, use `reverse(String(x))` instead.
│   caller = macro expansion at 08_string.jl:161 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:161
┌ Warning: `split(x::CategoricalString; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:167 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:167
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:322
└ @ Base ./strings/util.jl:322
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = findfirst at search.jl:104 [inlined]
└ @ Core ./strings/search.jl:104
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:325
└ @ Base ./strings/util.jl:325
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = Type at substring.jl:39 [inlined]
└ @ Core ./strings/substring.jl:39
┌ Warning: `split(x::CategoricalString; kwargs...)` is deprecated, use `split(String(x); kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:169 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:169
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:329
└ @ Base ./strings/util.jl:329
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _split(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:336
└ @ Base ./strings/util.jl:336
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = cmp(::SubString{CategoricalArrays.CategoricalString{UInt32}}, ::String) at substring.jl:68
└ @ Base ./strings/substring.jl:68
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = iterate at substring.jl:68 [inlined]
└ @ Core ./strings/substring.jl:68
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:395
└ @ Base ./strings/util.jl:395
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = findlast at search.jl:273 [inlined]
└ @ Core ./strings/search.jl:273
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:82 [inlined]
└ @ Core ./strings/substring.jl:82
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:82 [inlined]
└ @ Core ./strings/substring.jl:82
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:82 [inlined]
└ @ Core ./strings/substring.jl:82
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = getindex at substring.jl:76 [inlined]
└ @ Core ./strings/substring.jl:76
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:399
└ @ Base ./strings/util.jl:399
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = _rsplit(::CategoricalArrays.CategoricalString{UInt32}, ::String, ::Int64, ::Bool, ::Array{SubString{CategoricalArrays.CategoricalString{UInt32}},1}) at util.jl:400
└ @ Base ./strings/util.jl:400
┌ Warning: `strip(x::CategoricalString)` is deprecated, use `strip(String(x))` instead.
│   caller = macro expansion at 08_string.jl:175 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:175
┌ Warning: `strip(x::CategoricalString)` is deprecated, use `strip(String(x))` instead.
│   caller = macro expansion at 08_string.jl:176 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:176
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = iterate at basic.jl:678 [inlined]
└ @ Core ./strings/basic.jl:678
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:678 [inlined]
└ @ Core ./strings/basic.jl:678
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = zip_iterate(::Base.Iterators.Reverse{Base.EachStringIndex{CategoricalArrays.CategoricalString{UInt32}}}, ::Base.Iterators.Reverse{CategoricalArrays.CategoricalString{UInt32}}, ::Tuple{}, ::Tuple{}) at basic.jl:678
└ @ Base.Iterators ./strings/basic.jl:678
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = iterate at basic.jl:677 [inlined]
└ @ Core ./strings/basic.jl:677
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:677 [inlined]
└ @ Core ./strings/basic.jl:677
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = iterate at basic.jl:677 [inlined]
└ @ Core ./strings/basic.jl:677
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = zip_iterate(::Base.Iterators.Reverse{Base.EachStringIndex{CategoricalArrays.CategoricalString{UInt32}}}, ::Base.Iterators.Reverse{CategoricalArrays.CategoricalString{UInt32}}, ::Tuple{}, ::Tuple{}) at basic.jl:677
└ @ Base.Iterators ./strings/basic.jl:677
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:678 [inlined]
└ @ Core ./strings/basic.jl:678
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = zip_iterate(::Base.Iterators.Reverse{Base.EachStringIndex{CategoricalArrays.CategoricalString{UInt32}}}, ::Base.Iterators.Reverse{CategoricalArrays.CategoricalString{UInt32}}, ::Tuple{Int64}, ::Tuple{Int64}) at basic.jl:678
└ @ Base.Iterators ./strings/basic.jl:678
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:677 [inlined]
└ @ Core ./strings/basic.jl:677
┌ Warning: `getindex(x::CategoricalString, i::Int)` is deprecated, use `getindex(String(x), i)` instead.
│   caller = iterate at basic.jl:677 [inlined]
└ @ Core ./strings/basic.jl:677
┌ Warning: `prevind(x::CategoricalString, i::Int)` is deprecated, use `prevind(String(x), i)` instead.
│   caller = zip_iterate(::Base.Iterators.Reverse{Base.EachStringIndex{CategoricalArrays.CategoricalString{UInt32}}}, ::Base.Iterators.Reverse{CategoricalArrays.CategoricalString{UInt32}}, ::Tuple{Int64}, ::Tuple{Int64}) at basic.jl:677
└ @ Base.Iterators ./strings/basic.jl:677
┌ Warning: `isvalid(x::CategoricalString, i::Integer)` is deprecated, use `isvalid(String(x), i)` instead.
│   caller = isvalid at substring.jl:82 [inlined]
└ @ Core ./strings/substring.jl:82
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = lstrip(::Base.Fix2{typeof(in),Char}, ::SubString{CategoricalArrays.CategoricalString{UInt32}}) at substring.jl:68
└ @ Base ./strings/substring.jl:68
┌ Warning: `iterate(x::CategoricalString, i::Int)` is deprecated, use `iterate(String(x), i)` instead.
│   caller = zip_iterate(::Base.Iterators.Stateful{SubString{CategoricalArrays.CategoricalString{UInt32}},Union{Nothing, Tuple{Char,Int64}}}, ::Base.Iterators.Stateful{String,Union{Nothing, Tuple{Char,Int64}}}, ::Tuple{Nothing}, ::Tuple{Nothing}) at substring.jl:68
└ @ Base.Iterators ./strings/substring.jl:68
┌ Warning: `lstrip(x::CategoricalString)` is deprecated, use `lstrip(String(x))` instead.
│   caller = macro expansion at 08_string.jl:179 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:179
┌ Warning: `lstrip(x::CategoricalString)` is deprecated, use `lstrip(String(x))` instead.
│   caller = macro expansion at 08_string.jl:180 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:180
┌ Warning: `lastindex(x::CategoricalString)` is deprecated, use `lastindex(String(x))` instead.
│   caller = lstrip(::Base.Fix2{typeof(in),Char}, ::CategoricalArrays.CategoricalString{UInt32}) at util.jl:160
└ @ Base ./strings/util.jl:160
┌ Warning: `firstindex(x::CategoricalString)` is deprecated, use `firstindex(String(x))` instead.
│   caller = iterate at basic.jl:538 [inlined]
└ @ Core ./strings/basic.jl:538
┌ Warning: `ncodeunits(x::CategoricalString)` is deprecated, use `ncodeunits(String(x))` instead.
│   caller = iterate at basic.jl:538 [inlined]
└ @ Core ./strings/basic.jl:538
┌ Warning: `nextind(x::CategoricalString, i::Int)` is deprecated, use `nextind(String(x), i)` instead.
│   caller = iterate at basic.jl:538 [inlined]
└ @ Core ./strings/basic.jl:538
┌ Warning: `iterate(x::CategoricalString)` is deprecated, use `iterate(String(x))` instead.
│   caller = zip_iterate at iterators.jl:304 [inlined]
└ @ Core ./iterators.jl:304
┌ Warning: `rstrip(x::CategoricalString)` is deprecated, use `rstrip(String(x))` instead.
│   caller = macro expansion at 08_string.jl:183 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:183
┌ Warning: `rstrip(x::CategoricalString)` is deprecated, use `rstrip(String(x))` instead.
│   caller = macro expansion at 08_string.jl:184 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:184
┌ Warning: `uppercase(x::CategoricalString)` is deprecated, use `uppercase(String(x))` instead.
│   caller = macro expansion at 08_string.jl:187 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:187
┌ Warning: `uppercase(x::CategoricalString)` is deprecated, use `uppercase(String(x))` instead.
│   caller = macro expansion at 08_string.jl:188 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:188
┌ Warning: `lowercase(x::CategoricalString)` is deprecated, use `lowercase(String(x))` instead.
│   caller = macro expansion at 08_string.jl:190 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:190
┌ Warning: `lowercase(x::CategoricalString)` is deprecated, use `lowercase(String(x))` instead.
│   caller = macro expansion at 08_string.jl:191 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:191
┌ Warning: `titlecase(x::CategoricalString)` is deprecated, use `titlecase(String(x))` instead.
│   caller = macro expansion at 08_string.jl:193 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:193
┌ Warning: `titlecase(x::CategoricalString)` is deprecated, use `titlecase(String(x))` instead.
│   caller = macro expansion at 08_string.jl:194 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:194
┌ Warning: `uppercasefirst(x::CategoricalString)` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = macro expansion at 08_string.jl:196 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:196
┌ Warning: `uppercasefirst(x::CategoricalString)` is deprecated, use `uppercasefirst(String(x))` instead.
│   caller = macro expansion at 08_string.jl:197 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:197
┌ Warning: `lowercasefirst(x::CategoricalString)` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = macro expansion at 08_string.jl:199 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:199
┌ Warning: `lowercasefirst(x::CategoricalString)` is deprecated, use `lowercasefirst(String(x))` instead.
│   caller = macro expansion at 08_string.jl:200 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:200
┌ Warning: `chop(x::CategoricalString; kwargs...)` is deprecated, use `chop(String(x); kwargs...)` instead.
│   caller = macro expansion at 08_string.jl:208 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:208
┌ Warning: `chomp(x::CategoricalString)` is deprecated, use `chomp(String(x))` instead.
│   caller = macro expansion at 08_string.jl:210 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:210
┌ Warning: `chomp(x::CategoricalString)` is deprecated, use `chomp(String(x))` instead.
│   caller = macro expansion at 08_string.jl:211 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:211
┌ Warning: `textwidth(x::CategoricalString)` is deprecated, use `textwidth(String(x))` instead.
│   caller = macro expansion at 08_string.jl:213 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:213
┌ Warning: `textwidth(x::CategoricalString)` is deprecated, use `textwidth(String(x))` instead.
│   caller = macro expansion at 08_string.jl:214 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:214
┌ Warning: `isascii(x::CategoricalString)` is deprecated, use `isascii(String(x))` instead.
│   caller = macro expansion at 08_string.jl:216 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:216
┌ Warning: `isascii(x::CategoricalString)` is deprecated, use `isascii(String(x))` instead.
│   caller = macro expansion at 08_string.jl:217 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:217
┌ Warning: `escape_string(x::CategoricalString)` is deprecated, use `escape_string(String(x))` instead.
│   caller = macro expansion at 08_string.jl:219 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:219
┌ Warning: `escape_string(x::CategoricalString)` is deprecated, use `escape_string(String(x))` instead.
│   caller = macro expansion at 08_string.jl:220 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:220
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = macro expansion at 08_string.jl:222 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:222
┌ Warning: `collect(x::CategoricalString)` is deprecated, use `collect(String(x))` instead.
│   caller = macro expansion at 08_string.jl:223 [inlined]
└ @ Core ~/.julia/packages/CategoricalArrays/U3LvJ/test/08_string.jl:223
Test Summary: | Pass  Total
08_string.jl  |  150    150
Test Summary: | Pass  Total
09_hash.jl    |   54     54
Test Summary: | Pass  Total
10_isless.jl  |  429    429
Test Summary: | Pass  Total
11_array.jl   | 9054   9054
Test Summary:      |  Pass  Total
12_missingarray.jl | 12672  12672
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:426
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/U3LvJ/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/U3LvJ/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Int64, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}, ::Int64) at abstractarray.jl:754
└ @ Base ./abstractarray.jl:754
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy!(::SubArray{CategoricalArrays.CategoricalString{UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}},Tuple{UnitRange{Int64}},true}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:426
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/U3LvJ/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::SubArray{CategoricalArrays.CategoricalString{UInt32},1,CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}},Tuple{UnitRange{Int64}},true}, ::CategoricalArrays.CategoricalArray{String,1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Union{}}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/U3LvJ/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copy!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}) at array.jl:426
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/U3LvJ/src/array.jl:426
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}) at array.jl:415
└ @ CategoricalArrays ~/.julia/packages/CategoricalArrays/U3LvJ/src/array.jl:415
┌ Warning: adding new levels to ordered CategoricalArray destination will throw an error in the future
│   caller = copyto!(::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Int64, ::CategoricalArrays.CategoricalArray{Union{Missing, String},1,UInt32,String,CategoricalArrays.CategoricalString{UInt32},Missing}, ::Int64) at abstractarray.jl:754
└ @ Base ./abstractarray.jl:754
Test Summary:     |  Pass  Total
13_arraycommon.jl | 22817  22817
Test Summary: | Pass  Total
14_view.jl    |  158    158
Test Summary: | Pass  Total
15_extras.jl  |   99     99
Test Summary: | Pass  Total
16_recode.jl  |  808    808
   Testing CategoricalArrays tests passed 
   Testing Clustering
 Resolving package versions...
    Status `/tmp/tmpr084O5/Manifest.toml`
  [b99e7846] BinaryProvider v0.5.8
  [aaaa29a8] Clustering v0.13.3
  [944b1d66] CodecZlib v0.6.0
  [9a962f9c] DataAPI v1.1.0
  [864edb3b] DataStructures v0.17.6
  [b4f34e82] Distances v0.8.2
  [e1d29d7a] Missings v0.4.3
  [b8a86587] NearestNeighbors v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.0
  [3bb67fe8] TranscodingStreams v0.9.5
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Runing tests:
* seeding.jl ...
Test Summary: | Pass  Total
seeding       |   64     64
* kmeans.jl ...
  Iters               objv        objv-change | affected 
-------------------------------------------------------------
      0       1.470563e+00
      1       7.352817e-01      -7.352817e-01 |        0
      2       7.352817e-01       0.000000e+00 |        0
K-means converged with 2 iterations (objv = 0.7352816593329847)
K-means converged with 2 iterations (objv = 0.09164881001248792)
┌ Warning: The clustering cost increased at iteration #1
└ @ Clustering ~/.julia/packages/Clustering/Dlx92/src/kmeans.jl:179
Test Summary:      | Pass  Total
kmeans() (k-means) |   87     87
* kmedoids.jl ...
  Iters               objv        objv-change
-----------------------------------------------------
      0       1.589132e+00
      1       1.623600e+00       3.446832e-02
      2       1.623600e+00       0.000000e+00
K-medoids converged with 2 iterations (objv = 1.6236002870003423)
K-medoids converged with 2 iterations (objv = 1.6236002870003423)
Test Summary:          | Pass  Total
kmedoids() (k-medoids) |   26     26
* affprop.jl ...
  Iters  objv-change | exemplars 
-----------------------------------------------------
      1   1.7243e+00 |        1
      2   1.1599e+00 |        1
      3   1.0111e+00 |        1
      4   8.2884e-01 |        1
      5   6.2996e-01 |        1
      6   4.4970e-01 |        1
      7   3.0568e-01 |        1
      8   1.9999e-01 |        1
      9   1.2694e-01 |        1
     10   7.8624e-02 |        1
Affinity propagation converged with 10 iterations: 1 exemplars.
Affinity propagation converged with 9 iterations: 1 exemplars.
Test Summary:                         | Pass  Total
affinityprop() (affinity propagation) |   78     78
* dbscan.jl ...
Test Summary:                | Pass  Total
dbscan() (DBSCAN clustering) |   19     19
* fuzzycmeans.jl ...
  Iters      center-change
----------------------------
      1       5.244585e-01
      2       1.013155e-01
      3       2.621402e-01
      4       2.313798e-01
      5       3.691017e-02
Fuzzy C-means converged with 5 iterations (δ = 0.03691017048331948)
Fuzzy C-means converged with 6 iterations (δ = 0.052544440650040276)
Test Summary:  | Pass  Total
fuzzy_cmeans() |   36     36
* counts.jl ...
Test Summary:                 | Pass  Total
counts() (contingency matrix) |   22     22
* silhouette.jl ...
Test Summary: | Pass  Broken  Total
silhouettes() |   11       1     12
* varinfo.jl ...
Test Summary:                       | Pass  Total
varinfo() (variational information) |    7      7
* randindex.jl ...
Test Summary:            | Pass  Total
randindex() (Rand index) |   13     13
* hclust.jl ...
Test Summary:                      | Pass  Total
hclust() (hierarchical clustering) | 6665   6665
* mcl.jl ...
[ Info: Starting MCL iterations...
┌ Info: MCL iter. #0: rel.Δ=
└   rel_delta = 0.0
[ Info: MCL converged after 0 iteration(s)
[ Info: Generating MCL clusters...
[ Info: Starting MCL iterations...
[ Info: MCL converged after 0 iteration(s)
[ Info: Generating MCL clusters...
Test Summary: | Pass  Broken  Total
MCL           |   33       1     34
* vmeasure.jl ...
Test Summary: | Pass  Broken  Total
V-measure     |    8       1      9
* mutualinfo.jl ...
Test Summary:                     | Pass  Total
mutualinfo() (mutual information) |    4      4
   Testing Clustering tests passed 
   Testing CSV
 Resolving package versions...
    Status `/tmp/tmp5jnPVq/Manifest.toml`
  [b99e7846] BinaryProvider v0.5.8
  [336ed68f] CSV v0.5.18
  [324d7699] CategoricalArrays v0.7.3
  [944b1d66] CodecZlib v0.6.0
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.19.4
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [48062228] FilePathsBase v0.7.0
  [1a297f60] FillArrays v0.7.4
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5078a376] LazyArrays v0.13.1
  [1914dd2f] MacroTools v0.5.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.2
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [3bb67fe8] TranscodingStreams v0.9.5
  [ea10d353] WeakRefStrings v0.6.1
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: error parsing Int64 on row = 1, col = 1: "abc
", error=INVALID: SENTINEL | NEWLINE | EOF | INVALID_DELIMITER 
┌ Warning: incompatible julia version for `threaded=true`: 1.0.5, requires >= v"1.3", setting `threaded=false`
└ @ CSV ~/.julia/packages/CSV/GCUID/src/CSV.jl:395
testing test_utf8_with_BOM.csv
testing test_utf8.csv
testing test_windows.csv
testing test_single_column.csv
testing test_empty_file.csv
testing test_empty_file_newlines.csv
testing test_simple_quoted.csv
testing test_quoted_delim_and_newline.csv
testing test_quoted_numbers.csv
testing test_crlf_line_endings.csv
testing test_newline_line_endings.csv
testing test_mac_line_endings.csv
testing test_no_header.csv
testing test_2_footer_rows.csv
testing test_footer_missing.csv
testing test_footer_missing.csv
testing test_dates.csv
testing test_excel_date_formats.csv
testing test_datetimes.csv
testing test_missing_value_NULL.csv
testing test_missing_value_NULL.csv
testing test_missing_value.csv
testing test_header_range.csv
testing test_header_int_list.csv
testing test_basic.csv
testing test_basic_pipe.csv
testing test_tab_null_empty.txt
testing test_tab_null_string.txt
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=5, maxsize=Inf, ptr=1, mark=-1)
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=0, maxsize=Inf, ptr=1, mark=-1)
testing dash_as_null.csv
testing plus_as_null.csv
testing comma_decimal.csv
testing double_quote_quotechar_and_escapechar.csv
testing census.txt
testing bools.csv
testing attenu.csv
testing test_null_only_column.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing categorical.csv
testing categorical.csv
testing categorical.csv
testing categorical.csv
testing baseball.csv
testing FL_insurance_sample.csv
testing FL_insurance_sample.csv
testing SacramentocrimeJanuary2006.csv
testing Sacramentorealestatetransactions.csv
testing SalesJan2009.csv
testing stocks.csv
testing TechCrunchcontinentalUSA.csv
testing Fielding.csv
testing latest (1).csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
testing issue_198.csv
testing issue_198_part2.csv
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
testing issue_207.csv
thread = 1 warning: only found 5 / 6 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 5 / 6 columns on data row: 2. Filling remaining columns with `missing`
testing issue_120.csv
testing pandas_zeros.csv
testing transposed.csv
testing transposed_1row.csv
testing transposed_emtpy.csv
testing transposed_extra_newline.csv
testing transposed_noheader.csv
testing transposed_noheader.csv
testing test_utf8.csv
testing test_utf8.csv
testing test_multiple_missing.csv
testing test_openclosequotes.csv
testing test_truestrings.csv
testing test_truestrings.csv
testing test_string_delimiters.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=20, maxsize=Inf, ptr=1, mark=-1)
testing test_basic.csv
testing test_basic.csv
testing test_truestrings.csv
testing test_repeated_delimiters.csv
testing test_comments1.csv
testing test_comments_multiple.csv
testing test_comments_multichar.csv
testing test_not_enough_columns.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
testing test_not_enough_columns2.csv
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
testing test_correct_trailing_missings.csv
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
testing norwegian_data.csv
testing test_duplicate_columnnames.csv
testing test_bad_datetime.csv
testing test_types.csv
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 7 / 8 columns on data row: 1. Filling remaining columns with `missing`
testing test_issue_326.wsv
testing test_missing_last_field.csv
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing test_delim.tsv
testing test_delim.wsv
testing test_comment_first_row.csv
testing test_comment_first_row.csv
testing test_repeated_delim_371.csv
testing test_file_issue_154.csv
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=16, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=19, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 1 / 3 columns on data row: 2. Filling remaining columns with `missing`
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=43, maxsize=Inf, ptr=1, mark=-1)
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 1. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
thread = 1 warning: parsed expected 5 columns, but didn't reach end of line on data row: 3. Ignoring any extra columns on this row
testing IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=17, maxsize=Inf, ptr=1, mark=-1)
testing heat_flux.dat
testing log001_vehicle_status_flags_0.txt
testing fecal_samples.csv
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: Symbol[:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
thread = 1 warning: only found 38 / 39 columns on data row: 1079. Filling remaining columns with `missing`
header is: 1, datarow computed as: 2
headerpos = 4, datapos = 481
estimated rows: 756
detected delimiter: ","
column names detected: Symbol[:SampleID, :Mother_Child, :SubjectID, :MaternalID, :TimePoint, :Fecal_EtOH, :CollectionRep, :DOC, :RAInitials_DOC, :DOF, :RAInitials_DOF, :Date_Brought_In, :RAInitials_Brought, :Date_Shipped, :RAInitials_Shipped, :Date_Aliquoted, :Number_Replicates, :RAInitials_Aliquot, :StorageBox, :DOE, :Extract_number, :AliquotRep, :DNABox, :KitUsed, :RAInitials_Extract, :DNAConc, :DOM, :Mgx_processed, :Mgx_batch, :DO16S, :_16S_processed, :_16S_batch, :_16S_plate, :Notes, :Discrepancies, :Batch_1_Mapping, :Mgx_batch_Mapping, :_16S_batch_Mapping, :Mother_Child_Dyads]
byte position of data computed at: 481
computed typecodes are: Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
thread = 1 warning: didn't pre-allocate enough tape while parsing on row 756, re-allocating from 756 to 1023...
thread = 1 warning: didn't pre-allocate enough tape while parsing on row 1023, re-allocating from 1023 to 1083...
thread = 1 warning: only found 38 / 39 columns on data row: 1079. Filling remaining columns with `missing`
time for initial parsing to tape: 0.009184122085571289
types after parsing: Type[String, PooledString, Int64, String, Int64, PooledString, Int64, Date, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Float64}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Date}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, String}, Union{Missing, PooledString}, Union{Missing, PooledString}, Union{Missing, Int64}], pool = 0.1
testing time.csv
testing escaped_pooled.csv
testing error_comment.txt
testing test_508.csv
testing test_basic.csv
thread = 1 warning: only found 3 / 5 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 3 / 5 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: only found 4 / 5 columns on data row: 2. Filling remaining columns with `missing`
CSV.Rows("<Base.GenericIOBuffer{Array{UInt8,1}}>"):
Size: 1
Tables.Schema:
 :X  Union{Missing, String}thread = 1 warning: only found 1 / 3 columns on data row: 1. Filling remaining columns with `missing`
thread = 1 warning: only found 2 / 3 columns on data row: 2. Filling remaining columns with `missing`
thread = 1 warning: parsed expected 3 columns, but didn't reach end of line on data row: 2. Ignoring any extra columns on this row
Test Summary: | Pass  Total
CSV           | 1197   1197
   Testing CSV tests passed 
   Testing DataFrames
 Resolving package versions...
 Installed LaTeXStrings ─ v1.0.3
 Installed DataValues ─── v0.4.12
    Status `/tmp/tmp3Txogn/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.3
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.19.4
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [e7dc6d0d] DataValues v0.4.12
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [b964fa9f] LaTeXStrings v1.0.3
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.2
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Running tests:
Test Summary: | Pass  Total
make_unique   |    3      3
Test Summary: | Pass  Total
count         |    2      2
Test Summary: | Pass  Total
inner_outer   |    2      2
	[1m[32mPASSED[0m: utils.jl
Test Summary: | Pass  Total
hcat          |   10     10
Test Summary: | Pass  Total
hcat: copying |   26     26
Test Summary:            | Pass  Total
hcat ::AbstractDataFrame |    2      2
Test Summary:            | Pass  Total
hcat ::AbstractDataFrame |    2      2
Test Summary:          | Pass  Total
hcat ::AbstractVectors |   11     11
Test Summary:  | Pass  Total
hcat: copycols |   76     76
Test Summary: | Pass  Total
vcat          |   21     21
Test Summary: | Pass  Total
vcat copy     |    2      2
Test Summary: | Pass  Total
vcat >2 args  |    4      4
Test Summary:       | Pass  Total
vcat mixed coltypes |   18     18
Test Summary:     | Pass  Total
vcat out of order |   20     20
Test Summary:         | Pass  Total
vcat with cols=:union |    6      6
Test Summary:             | Pass  Total
vcat with cols=:intersect |    6      6
Test Summary:          | Pass  Total
vcat with cols::Vector |   15     15
Test Summary: | Pass  Total
vcat errors   |   32     32
Test Summary:  | Pass  Total
vcat with view |    1      1
	[1m[32mPASSED[0m: cat.jl
Test Summary: | Pass  Total
constructors  |   57     57
Test Summary:                 | Pass  Total
completecases and dropmissing |  209    209
