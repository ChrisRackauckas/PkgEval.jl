 Resolving package versions...
 Installed Requires ──────────────────── v0.5.2
 Installed NaNMath ───────────────────── v0.3.3
 Installed ColorTypes ────────────────── v0.8.0
 Installed CommonSubexpressions ──────── v0.2.0
 Installed BinaryProvider ────────────── v0.5.8
 Installed DocStringExtensions ───────── v0.8.1
 Installed Catlab ────────────────────── v0.3.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed Inflate ───────────────────── v0.1.1
 Installed DiffEqDiffTools ───────────── v1.4.0
 Installed Arpack ────────────────────── v0.3.1
 Installed RecursiveArrayTools ───────── v1.0.2
 Installed GLM ───────────────────────── v1.3.4
 Installed DiffRules ─────────────────── v0.1.0
 Installed ArrayInterface ────────────── v1.2.1
 Installed RecipesBase ───────────────── v0.7.0
 Installed Parsers ───────────────────── v0.3.10
 Installed DiffEqNoiseProcess ────────── v3.3.1
 Installed BandedMatrices ────────────── v0.13.0
 Installed AutoHashEquals ────────────── v0.2.0
 Installed LightXML ──────────────────── v0.8.1
 Installed ModelingToolkit ───────────── v0.6.4
 Installed FixedPointNumbers ─────────── v0.6.1
 Installed Petri ─────────────────────── v0.1.2
 Installed DataStructures ────────────── v0.17.6
 Installed FilePathsBase ─────────────── v0.7.0
 Installed Contour ───────────────────── v0.5.1
 Installed FunctionWrappers ──────────── v1.0.0
 Installed NameResolution ────────────── v0.1.3
 Installed Adapt ─────────────────────── v1.0.0
 Installed MacroTools ────────────────── v0.5.2
 Installed NLsolve ───────────────────── v4.2.0
 Installed Cassette ──────────────────── v0.2.6
 Installed Reexport ──────────────────── v0.2.0
 Installed JuliaVariables ────────────── v0.2.0
 Installed VertexSafeGraphs ──────────── v0.1.0
 Installed BinDeps ───────────────────── v0.8.10
 Installed SpecialFunctions ──────────── v0.8.0
 Installed Showoff ───────────────────── v0.3.1
 Installed Unitful ───────────────────── v0.17.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed JSON ──────────────────────── v0.21.0
 Installed TreeViews ─────────────────── v0.3.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed DataFramesMeta ────────────── v0.5.0
 Installed UnionFind ─────────────────── v0.1.0
 Installed Distributions ─────────────── v0.21.8
 Installed MetaGraphs ────────────────── v0.6.4
 Installed PDMats ────────────────────── v0.9.10
 Installed StochasticDiffEq ──────────── v6.13.0
 Installed Roots ─────────────────────── v0.8.3
 Installed GeometryTypes ─────────────── v0.7.6
 Installed Latexify ──────────────────── v0.12.2
 Installed GraphDataFrameBridge ──────── v0.2.1
 Installed Distances ─────────────────── v0.8.2
 Installed GeneralizedGenerated ──────── v0.2.0
 Installed PlotUtils ─────────────────── v0.6.1
 Installed LazyArrays ────────────────── v0.12.3
 Installed DiffEqBase ────────────────── v6.6.0
 Installed ResettableStacks ──────────── v0.6.0
 Installed StaticArrays ──────────────── v0.11.1
 Installed URIParser ─────────────────── v0.4.0
 Installed FFMPEG ────────────────────── v0.2.3
 Installed IterativeSolvers ──────────── v0.8.1
 Installed DataFrames ────────────────── v0.19.4
 Installed ArnoldiMethod ─────────────── v0.0.4
 Installed DiffResults ───────────────── v0.0.4
 Installed Colors ────────────────────── v0.9.6
 Installed PrettyPrint ───────────────── v0.1.0
 Installed LineSearches ──────────────── v7.0.1
 Installed CanonicalTraits ───────────── v0.1.0
 Installed MatrixFactorizations ──────── v0.2.0
 Installed GR ────────────────────────── v0.42.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed FileIO ────────────────────── v1.0.7
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed FillArrays ────────────────── v0.7.4
 Installed SimpleTraits ──────────────── v0.9.1
 Installed PlotThemes ────────────────── v0.4.0
 Installed StatsModels ───────────────── v0.6.7
 Installed Match ─────────────────────── v1.0.2
 Installed RandomNumbers ─────────────── v1.3.0
 Installed WeakRefStrings ────────────── v0.6.1
 Installed PooledArrays ──────────────── v0.5.2
 Installed Missings ──────────────────── v0.4.3
 Installed NLSolversBase ─────────────── v7.5.0
 Installed TableTraits ───────────────── v1.0.0
 Installed LaTeXStrings ──────────────── v1.0.3
 Installed CodecZlib ─────────────────── v0.6.0
 Installed CategoricalArrays ─────────── v0.7.3
 Installed OrderedCollections ────────── v1.1.0
 Installed JLD2 ──────────────────────── v0.1.8
 Installed Rmath ─────────────────────── v0.5.1
 Installed ShiftedArrays ─────────────── v1.0.0
 Installed Plots ─────────────────────── v0.27.0
 Installed SparseDiffTools ───────────── v0.10.3
 Installed QuadGK ────────────────────── v2.1.1
 Installed Parameters ────────────────── v0.12.0
 Installed MuladdMacro ───────────────── v0.2.1
 Installed ForwardDiff ───────────────── v0.10.6
 Installed LightGraphs ───────────────── v1.3.0
 Installed BoundaryValueDiffEq ───────── v2.3.0
 Installed Calculus ──────────────────── v0.5.1
 Installed Tables ────────────────────── v0.2.11
 Installed MLStyle ───────────────────── v0.3.1
 Installed IterTools ─────────────────── v1.3.0
 Installed Measures ──────────────────── v0.3.0
 Installed StatsFuns ─────────────────── v0.9.0
 Installed RecursiveFactorization ────── v0.1.0
 Installed Compat ────────────────────── v2.2.0
 Installed Documenter ────────────────── v0.24.0
 Installed TranscodingStreams ────────── v0.9.5
 Installed CSV ───────────────────────── v0.5.18
 Installed SemanticModels ────────────── v0.3.0
  Updating `~/.julia/environments/v1.0/Project.toml`
  [f5ac2a72] + SemanticModels v0.3.0
  Updating `~/.julia/environments/v1.0/Manifest.toml`
  [79e6a3ab] + Adapt v1.0.0
  [ec485272] + ArnoldiMethod v0.0.4
  [7d9fca2a] + Arpack v0.3.1
  [4fba245c] + ArrayInterface v1.2.1
  [15f4f7f2] + AutoHashEquals v0.2.0
  [aae01518] + BandedMatrices v0.13.0
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [764a87c0] + BoundaryValueDiffEq v2.3.0
  [336ed68f] + CSV v0.5.18
  [49dc2e85] + Calculus v0.5.1
  [a603d957] + CanonicalTraits v0.1.0
  [7057c7e9] + Cassette v0.2.6
  [324d7699] + CategoricalArrays v0.7.3
  [134e5e36] + Catlab v0.3.0
  [944b1d66] + CodecZlib v0.6.0
  [3da002f7] + ColorTypes v0.8.0
  [5ae59095] + Colors v0.9.6
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [d38c429a] + Contour v0.5.1
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.19.4
  [1313f7d8] + DataFramesMeta v0.5.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [2b5f629d] + DiffEqBase v6.6.0
  [01453d9d] + DiffEqDiffTools v1.4.0
  [77a26b50] + DiffEqNoiseProcess v3.3.1
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [b4f34e82] + Distances v0.8.2
  [31c24e10] + Distributions v0.21.8
  [ffbed154] + DocStringExtensions v0.8.1
  [e30172f5] + Documenter v0.24.0
  [c87230d0] + FFMPEG v0.2.3
  [5789e2e9] + FileIO v1.0.7
  [48062228] + FilePathsBase v0.7.0
  [1a297f60] + FillArrays v0.7.4
  [53c48c17] + FixedPointNumbers v0.6.1
  [f6369f11] + ForwardDiff v0.10.6
  [069b7b12] + FunctionWrappers v1.0.0
  [38e38edf] + GLM v1.3.4
  [28b8d3ca] + GR v0.42.0
  [6b9d7cbe] + GeneralizedGenerated v0.2.0
  [4d00f742] + GeometryTypes v0.7.6
  [3c71623a] + GraphDataFrameBridge v0.2.1
  [d25df0c9] + Inflate v0.1.1
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [42fd0dbc] + IterativeSolvers v0.8.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [033835bb] + JLD2 v0.1.8
  [682c06a0] + JSON v0.21.0
  [b14d175d] + JuliaVariables v0.2.0
  [b964fa9f] + LaTeXStrings v1.0.3
  [23fbe1c1] + Latexify v0.12.2
  [5078a376] + LazyArrays v0.12.3
  [093fc24a] + LightGraphs v1.3.0
  [9c8b4983] + LightXML v0.8.1
  [d3d80556] + LineSearches v7.0.1
  [d8e11817] + MLStyle v0.3.1
  [1914dd2f] + MacroTools v0.5.2
  [7eb4fadd] + Match v1.0.2
  [a3b82374] + MatrixFactorizations v0.2.0
  [442fdcdd] + Measures v0.3.0
  [626554b9] + MetaGraphs v0.6.4
  [e1d29d7a] + Missings v0.4.3
  [961ee093] + ModelingToolkit v0.6.4
  [46d2c3a1] + MuladdMacro v0.2.1
  [d41bc354] + NLSolversBase v7.5.0
  [2774e3e8] + NLsolve v4.2.0
  [77ba4419] + NaNMath v0.3.3
  [71a1bf82] + NameResolution v0.1.3
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.10
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [4259d249] + Petri v0.1.2
  [ccf2f8ad] + PlotThemes v0.4.0
  [995b91a9] + PlotUtils v0.6.1
  [91a5bcdd] + Plots v0.27.0
  [2dfb63ee] + PooledArrays v0.5.2
  [8162dcfd] + PrettyPrint v0.1.0
  [1fd47b50] + QuadGK v2.1.1
  [e6cf234a] + RandomNumbers v1.3.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.0.2
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [ae5879a3] + ResettableStacks v0.6.0
  [79098fc4] + Rmath v0.5.1
  [f2b01f46] + Roots v0.8.3
  [f5ac2a72] + SemanticModels v0.3.0
  [1277b4bf] + ShiftedArrays v1.0.0
  [992d4aef] + Showoff v0.3.1
  [699a6c99] + SimpleTraits v0.9.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [47a9eef4] + SparseDiffTools v0.10.3
  [276daf66] + SpecialFunctions v0.8.0
  [90137ffa] + StaticArrays v0.11.1
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.0
  [3eaba693] + StatsModels v0.6.7
  [789caeaf] + StochasticDiffEq v6.13.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [3bb67fe8] + TranscodingStreams v0.9.5
  [a2a6695c] + TreeViews v0.3.0
  [30578b45] + URIParser v0.4.0
  [99c6138d] + UnionFind v0.1.0
  [1986cc42] + Unitful v0.17.0
  [19fa3120] + VertexSafeGraphs v0.1.0
  [ea10d353] + WeakRefStrings v0.6.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Arpack ──────────→ `~/.julia/packages/Arpack/cu5By/deps/build.log`
  Building LightXML ────────→ `~/.julia/packages/LightXML/W8FVT/deps/build.log`
  Building GR ──────────────→ `~/.julia/packages/GR/f1Iqi/deps/build.log`
  Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
  Building FFMPEG ──────────→ `~/.julia/packages/FFMPEG/bkWgb/deps/build.log`
  Building CodecZlib ───────→ `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
  Building Rmath ───────────→ `~/.julia/packages/Rmath/4wt82/deps/build.log`
  Building Plots ───────────→ `~/.julia/packages/Plots/Iuc9S/deps/build.log`
   Testing SemanticModels
 Resolving package versions...
 Installed DimensionalPlotRecipes ─ v1.0.0
 Installed OptimBase ────────────── v2.0.0
 Installed DiffEqFinancial ──────── v2.2.1
 Installed LsqFit ───────────────── v0.8.1
 Installed DiffEqCallbacks ──────── v2.9.0
 Installed Polynomials ──────────── v0.6.0
 Installed Sundials ─────────────── v3.8.0
 Installed PoissonRandom ────────── v0.4.0
 Installed GenericSVD ───────────── v0.2.2
 Installed DifferentialEquations ── v6.8.0
 Installed DelayDiffEq ──────────── v5.18.0
 Installed SteadyStateDiffEq ────── v1.5.0
 Installed DiffEqJump ───────────── v6.3.0
 Installed MultiScaleArrays ─────── v1.5.0
 Installed DiffEqPhysics ────────── v3.2.0
 Installed ExponentialUtilities ─── v1.5.1
 Installed OrdinaryDiffEq ───────── v5.23.0
  Building Sundials → `~/.julia/packages/Sundials/fVIue/deps/build.log`
    Status `/tmp/tmp5dcous/Manifest.toml`
  [79e6a3ab] Adapt v1.0.0
  [ec485272] ArnoldiMethod v0.0.4
  [7d9fca2a] Arpack v0.3.1
  [4fba245c] ArrayInterface v1.2.1
  [15f4f7f2] AutoHashEquals v0.2.0
  [aae01518] BandedMatrices v0.13.0
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [764a87c0] BoundaryValueDiffEq v2.3.0
  [336ed68f] CSV v0.5.18
  [49dc2e85] Calculus v0.5.1
  [a603d957] CanonicalTraits v0.1.0
  [7057c7e9] Cassette v0.2.6
  [324d7699] CategoricalArrays v0.7.3
  [134e5e36] Catlab v0.3.0
  [944b1d66] CodecZlib v0.6.0
  [3da002f7] ColorTypes v0.8.0
  [5ae59095] Colors v0.9.6
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [d38c429a] Contour v0.5.1
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.19.4
  [1313f7d8] DataFramesMeta v0.5.0
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [bcd4f6db] DelayDiffEq v5.18.0
  [2b5f629d] DiffEqBase v6.6.0
  [459566f4] DiffEqCallbacks v2.9.0
  [01453d9d] DiffEqDiffTools v1.4.0
  [5a0ffddc] DiffEqFinancial v2.2.1
  [c894b116] DiffEqJump v6.3.0
  [77a26b50] DiffEqNoiseProcess v3.3.1
  [055956cb] DiffEqPhysics v3.2.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [0c46a032] DifferentialEquations v6.8.0
  [c619ae07] DimensionalPlotRecipes v1.0.0
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.21.8
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.0
  [d4d017d3] ExponentialUtilities v1.5.1
  [c87230d0] FFMPEG v0.2.3
  [5789e2e9] FileIO v1.0.7
  [48062228] FilePathsBase v0.7.0
  [1a297f60] FillArrays v0.7.4
  [53c48c17] FixedPointNumbers v0.6.1
  [f6369f11] ForwardDiff v0.10.6
  [069b7b12] FunctionWrappers v1.0.0
  [38e38edf] GLM v1.3.4
  [28b8d3ca] GR v0.42.0
  [6b9d7cbe] GeneralizedGenerated v0.2.0
  [01680d73] GenericSVD v0.2.2
  [4d00f742] GeometryTypes v0.7.6
  [3c71623a] GraphDataFrameBridge v0.2.1
  [d25df0c9] Inflate v0.1.1
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [42fd0dbc] IterativeSolvers v0.8.1
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.1.8
  [682c06a0] JSON v0.21.0
  [b14d175d] JuliaVariables v0.2.0
  [b964fa9f] LaTeXStrings v1.0.3
  [23fbe1c1] Latexify v0.12.2
  [5078a376] LazyArrays v0.12.3
  [093fc24a] LightGraphs v1.3.0
  [9c8b4983] LightXML v0.8.1
  [d3d80556] LineSearches v7.0.1
  [2fda8390] LsqFit v0.8.1
  [d8e11817] MLStyle v0.3.1
  [1914dd2f] MacroTools v0.5.2
  [7eb4fadd] Match v1.0.2
  [a3b82374] MatrixFactorizations v0.2.0
  [442fdcdd] Measures v0.3.0
  [626554b9] MetaGraphs v0.6.4
  [e1d29d7a] Missings v0.4.3
  [961ee093] ModelingToolkit v0.6.4
  [46d2c3a1] MuladdMacro v0.2.1
  [f9640e96] MultiScaleArrays v1.5.0
  [d41bc354] NLSolversBase v7.5.0
  [2774e3e8] NLsolve v4.2.0
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [87e2bd06] OptimBase v2.0.0
  [bac558e1] OrderedCollections v1.1.0
  [1dea7af3] OrdinaryDiffEq v5.23.0
  [90014a1f] PDMats v0.9.10
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.10
  [4259d249] Petri v0.1.2
  [ccf2f8ad] PlotThemes v0.4.0
  [995b91a9] PlotUtils v0.6.1
  [91a5bcdd] Plots v0.27.0
  [e409e4f3] PoissonRandom v0.4.0
  [f27b6e38] Polynomials v0.6.0
  [2dfb63ee] PooledArrays v0.5.2
  [8162dcfd] PrettyPrint v0.1.0
  [1fd47b50] QuadGK v2.1.1
  [e6cf234a] RandomNumbers v1.3.0
  [3cdcf5f2] RecipesBase v0.7.0
  [731186ca] RecursiveArrayTools v1.0.2
  [f2c3362d] RecursiveFactorization v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [ae5879a3] ResettableStacks v0.6.0
  [79098fc4] Rmath v0.5.1
  [f2b01f46] Roots v0.8.3
  [f5ac2a72] SemanticModels v0.3.0
  [1277b4bf] ShiftedArrays v1.0.0
  [992d4aef] Showoff v0.3.1
  [699a6c99] SimpleTraits v0.9.1
  [a2af1166] SortingAlgorithms v0.3.1
  [47a9eef4] SparseDiffTools v0.10.3
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.11.1
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.0
  [3eaba693] StatsModels v0.6.7
  [9672c7b4] SteadyStateDiffEq v1.5.0
  [789caeaf] StochasticDiffEq v6.13.0
  [c3572dad] Sundials v3.8.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [3bb67fe8] TranscodingStreams v0.9.5
  [a2a6695c] TreeViews v0.3.0
  [30578b45] URIParser v0.4.0
  [99c6138d] UnionFind v0.1.0
  [1986cc42] Unitful v0.17.0
  [19fa3120] VertexSafeGraphs v0.1.0
  [ea10d353] WeakRefStrings v0.6.1
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
WARNING: Method definition solve(DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase at /root/.julia/packages/DiffEqBase/IDJcQ/src/solve.jl:76 overwritten in module DiffEqNoiseProcess at /root/.julia/packages/DiffEqNoiseProcess/SCC7m/src/solve.jl:4.
WARNING: Method definition #solve(Any, typeof(DiffEqBase.solve), DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase overwritten in module DiffEqNoiseProcess.
WARNING: Method definition solve(DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase at /root/.julia/packages/DiffEqBase/IDJcQ/src/solve.jl:76 overwritten in module DiffEqNoiseProcess at /root/.julia/packages/DiffEqNoiseProcess/SCC7m/src/solve.jl:4.
WARNING: Method definition #solve(Any, typeof(DiffEqBase.solve), DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase overwritten in module DiffEqNoiseProcess.
WARNING: Method definition solve(DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase at /root/.julia/packages/DiffEqBase/IDJcQ/src/solve.jl:76 overwritten in module DiffEqNoiseProcess at /root/.julia/packages/DiffEqNoiseProcess/SCC7m/src/solve.jl:4.
WARNING: Method definition #solve(Any, typeof(DiffEqBase.solve), DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase overwritten in module DiffEqNoiseProcess.
WARNING: Method definition solve(DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase at /root/.julia/packages/DiffEqBase/IDJcQ/src/solve.jl:76 overwritten in module DiffEqNoiseProcess at /root/.julia/packages/DiffEqNoiseProcess/SCC7m/src/solve.jl:4.
WARNING: Method definition #solve(Any, typeof(DiffEqBase.solve), DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase overwritten in module DiffEqNoiseProcess.
WARNING: Method definition solve(DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase at /root/.julia/packages/DiffEqBase/IDJcQ/src/solve.jl:76 overwritten in module DiffEqNoiseProcess at /root/.julia/packages/DiffEqNoiseProcess/SCC7m/src/solve.jl:4.
WARNING: Method definition #solve(Any, typeof(DiffEqBase.solve), DiffEqBase.AbstractNoiseProblem, Any...) in module DiffEqBase overwritten in module DiffEqNoiseProcess.
expr = Parsers.parsefile("../examples/epicookbook/notebooks/SimpleDeterministicModels/SIRModel.jl") = :(module SIRModel
  #= none:15 =#
  #= none:16 =#
  using DifferentialEquations
  #= none:18 =#
  function sir_ode(du, u, p, t)
      #= none:20 =#
      β = p[1]
      #= none:22 =#
      γ = p[2]
      #= none:25 =#
      S = u[1]
      #= none:27 =#
      I = u[2]
      #= none:29 =#
      du[1] = -β * S * I
      #= none:30 =#
      du[2] = β * S * I - γ * I
      #= none:31 =#
      du[3] = γ * I
  end
  #= none:35 =#
  pram = [0.1, 0.05]
  #= none:37 =#
  init = [0.99, 0.01, 0.0]
  #= none:38 =#
  tspan = (0.0, 200.0)
  #= none:40 =#
  sir_prob = ODEProblem(sir_ode, init, tspan, pram)
  #= none:42 =#
  sir_sol = solve(sir_prob, saveat=0.1)
  #= none:45 =#
  using Plots
  #= none:46 =#
  plot(sir_sol, xlabel="Time", ylabel="Number")
  #= none:48 =#
  function sir_ode2(du, u, p, t)
      #= none:49 =#
      (S, I, R) = u
      #= none:50 =#
      (b, g) = p
      #= none:51 =#
      du[1] = -b * S * I
      #= none:52 =#
      du[2] = b * S * I - g * I
      #= none:53 =#
      du[3] = g * I
  end
  #= none:55 =#
  parms = [0.1, 0.05]
  #= none:56 =#
  init = [0.99, 0.01, 0.0]
  #= none:57 =#
  tspan = (0.0, 200.0)
  #= none:58 =#
  sir_prob2 = ODEProblem(sir_ode2, init, tspan, parms)
  #= none:59 =#
  sir_sol = solve(sir_prob2, saveat=0.1)
  end)
[ Info: unknown expr type for metacollector
expr = :(function sir_ode(du, u, p, t)
      #= none:20 =#
      β = p[1]
      #= none:22 =#
      γ = p[2]
      #= none:25 =#
      S = u[1]
      #= none:27 =#
      I = u[2]
      #= none:29 =#
      du[1] = -β * S * I
      #= none:30 =#
      du[2] = β * S * I - γ * I
      #= none:31 =#
      du[3] = γ * I
  end)
[ Info: unknown expr type for metacollector
[ Info: unknown expr type for metacollector
expr = :(plot(sir_sol, xlabel="Time", ylabel="Number"))
expr = :(function sir_ode2(du, u, p, t)
      #= none:49 =#
      (S, I, R) = u
      #= none:50 =#
      (b, g) = p
      #= none:51 =#
      du[1] = -b * S * I
      #= none:52 =#
      du[2] = b * S * I - g * I
      #= none:53 =#
      du[3] = g * I
  end)
expr = Parsers.parsefile("../examples/epicookbook/notebooks/SimpleDeterministicModels/SEIRmodel.jl") = :(module Modeling
  #= none:1 =#
  #= none:17 =#
  using DifferentialEquations
  #= none:20 =#
  function seir_ode(dY, Y, p, t)
      #= none:22 =#
      β = p[1]
      #= none:24 =#
      σ = p[2]
      #= none:26 =#
      γ = p[3]
      #= none:28 =#
      μ = p[4]
      #= none:31 =#
      S = Y[1]
      #= none:33 =#
      E = Y[2]
      #= none:35 =#
      I = Y[3]
      #= none:39 =#
      dY[1] = (μ - β * S * I) - μ * S
      #= none:40 =#
      dY[2] = β * S * I - (σ + μ) * E
      #= none:41 =#
      dY[3] = σ * E - (γ + μ) * I
  end
  #= none:45 =#
  pram = [520 / 365, 1 / 60, 1 / 30, 774835 / (65640000 * 365)]
  #= none:47 =#
  init = [0.8, 0.1, 0.1]
  #= none:48 =#
  tspan = (0.0, 365.0)
  #= none:50 =#
  seir_prob = ODEProblem(seir_ode, init, tspan, pram)
  #= none:52 =#
  sol = solve(seir_prob)
  #= none:54 =#
  using Plots
  #= none:56 =#
  va = VectorOfArray(sol.u)
  #= none:57 =#
  y = convert(Array, va)
  #= none:58 =#
  R = (ones(size(sol.t)))' - sum(y, dims=1)
  #= none:60 =#
  plot(sol.t, [y', R'], xlabel="Time", ylabel="Proportion")
  end)
[ Info: unknown expr type for metacollector
expr = :(function seir_ode(dY, Y, p, t)
      #= none:22 =#
      β = p[1]
      #= none:24 =#
      σ = p[2]
      #= none:26 =#
      γ = p[3]
      #= none:28 =#
      μ = p[4]
      #= none:31 =#
      S = Y[1]
      #= none:33 =#
      E = Y[2]
      #= none:35 =#
      I = Y[3]
      #= none:39 =#
      dY[1] = (μ - β * S * I) - μ * S
      #= none:40 =#
      dY[2] = β * S * I - (σ + μ) * E
      #= none:41 =#
      dY[3] = σ * E - (γ + μ) * I
  end)
[ Info: unknown expr type for metacollector
expr = :(plot(sol.t, [y', R'], xlabel="Time", ylabel="Proportion"))
(((seirc.fc).defs[1])[1]).args[1] == :seir_ode = true
(((seirc.fc).defs[1])[1]).args == [:seir_ode, :dY, :Y, :p, :t] = true
Test Summary:    | Pass  Total
Running parse.jl |    3      3
[ Info: Tracing implementation with construct call
[ Info: constructing a vector
[ Info: constructing a vector
[ Info: constructing with type SemanticModels.Dubstep.construct
[ Info: constructing a model Main.TraceTest.ODEProblem
[ Info: constructed model: Main.TraceTest.ODEProblem{typeof(Main.TraceTest.sir_ode2),Array{Float64,1},Tuple{Float64,Float64},Array{Float64,1}}(Main.TraceTest.sir_ode2, [0.99, 0.01, 0.0], (0.0, 200.0), [0.1, 0.05])
[ Info: Tracing implementation without construct call
[ Info: constructing a vector
[ Info: constructing a vector
[ Info: Trace step for construct call
trace1.trace[4] = (SemanticModels.Dubstep.construct, (Main.TraceTest.ODEProblem, Main.TraceTest.sir_ode2, [0.99, 0.01, 0.0], (0.0, 200.0), [0.1, 0.05]))
[ Info: Trace step for direct apply type
trace2.trace[4] = (ODEProblem, sir_ode2, [0.99, 0.01, 0.0], (0.0, 200.0), [0.1, 0.05]) => Any[(apply_type, (ODEProblem, typeof(sir_ode2), Array{Float64,1}, Tuple{Float64,Float64}, Array{Float64,1})), (ODEProblem{typeof(sir_ode2),Array{Float64,1},Tuple{Float64,Float64},Array{Float64,1}}, sir_ode2, [0.99, 0.01, 0.0], (0.0, 200.0), [0.1, 0.05])=>Any[(apply_type, (ODEProblem, typeof(sir_ode2), Array{Float64,1}, Tuple{Float64,Float64}, Array{Float64,1})), (convert, typeof(sir_ode2), sir_ode2)=>Any[], (convert, Array{Float64,1}, [0.99, 0.01, 0.0])=>Any[(isa, [0.99, 0.01, 0.0], Array{Float64,1})=>Any[]], (convert, Array{Float64,1}, [0.1, 0.05])=>Any[(isa, [0.1, 0.05], Array{Float64,1})=>Any[]]]]
Test Summary:       | Pass  Total
Running cassette.jl |    9      9
[ Info: constructing a model ODEProblem
 58.533806 seconds (43.69 M allocations: 2.205 GiB, 6.23% gc time)
[ Info: constructing a model ODEProblem
  0.000976 seconds (562 allocations: 50.047 KiB)
[ Info: constructing a vector length 2
[ Info: constructing a vector length 3
[ Info: constructing a model ODEProblem
[ Info: constructing a vector length 1
[ Info: constructing a vector length 2
[ Info: constructing a vector length 3
[ Info: constructing a model ODEProblem
[ Info: constructing a vector length 1
[ Info: constructing a vector length 2
[ Info: constructing a vector length 3
[ Info: constructing a model ODEProblem
[ Info: constructing a vector length 1
[ Info: constructing a vector length 2
[ Info: constructing a vector length 3
[ Info: constructing a model ODEProblem
[ Info: constructing a vector length 1
s(100) = [0.412187, 0.149699, 0.438114]
(traces[i]).factor = 0.0
(traces[i]).extras[5] = -0.0
sum((traces[i]).extras) / length((traces[i]).extras) = -0.0
s(100) = [0.400539, 0.149208, 0.450253]
(traces[i]).factor = 0.01
(traces[i]).extras[5] = -9.912173929800464e-6
sum((traces[i]).extras) / length((traces[i]).extras) = -3.232801586216005e-5
s(100) = [0.34943, 0.15355, 0.49702]
(traces[i]).factor = 0.05
(traces[i]).extras[5] = -4.956573806788313e-5
sum((traces[i]).extras) / length((traces[i]).extras) = -0.00016287679049702017
s(100) = [0.292187, 0.153334, 0.554479]
(traces[i]).factor = 0.1
(traces[i]).extras[5] = -9.914364440400845e-5
sum((traces[i]).extras) / length((traces[i]).extras) = -0.00035060604625442975
Test Summary:            | Pass  Total
Running transform/ode.jl |    4      4
┌ Info: Running example: 
└   file = "agentbased.jl"
┌ Info: Running example: 
└   file = "agentgraft.jl"
Running Agent Based Simulation Augmentation Demo
================================================
demo parameters:
	samples=7
	nsteps=10

Running basic model
WARNING: replacing module AgentModels.
newsam.agents = Symbol[:S, :S, :I, :S, :S, :I, :S, :S, :I, :S, :S, :S, :I, :S, :S, :S, :S, :I, :S, :I]
newsam.agents = Symbol[:R, :S, :S, :R, :R, :R, :S, :S, :S, :S, :S, :S, :S, :S, :S, :S, :S, :S, :S, :R]
newsam.agents = Symbol[:S, :R, :S, :S, :S, :S, :S, :S, :R, :S, :S, :S, :S, :S, :S, :R, :S, :S, :I, :R]
newsam.agents = Symbol[:S, :S, :S, :S, :I, :S, :S, :S, :R, :S, :R, :S, :R, :S, :S, :S, :R, :S, :S, :S]
newsam.agents = Symbol[:I, :R, :S, :R, :I, :S, :S, :S, :I, :S, :I, :I, :S, :R, :I, :I, :S, :S, :R, :I]
newsam.agents = Symbol[:S, :S, :S, :S, :R, :S, :S, :S, :S, :S, :R, :S, :S, :S, :S, :S, :S, :S, :S, :S]
newsam.agents = Symbol[:R, :S, :R, :R, :S, :R, :I, :R, :S, :I, :I, :S, :S, :I, :R, :S, :R, :S, :I, :R]

The system states are Any[:(:S), :(:I), :(:R)]

Adding un estado de los muertos

The system states are Any[:(:S), :(:I), :(:R), :(:D)]

There is no resurrection in this model

Infected individuals recover or die in one step
m[:I] = :(x...->begin
          #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:74 =#
          #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:75 =#
          roll = mod(rand(Int), 3)
          #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:76 =#
          if roll == 1
              #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:77 =#
              return :R
          elseif #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:78 =# roll == 2
              #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:79 =#
              return :D
          else
              #= /root/.julia/packages/SemanticModels/2GkPI/test/agentgraft.jl:81 =#
              return :I
          end
      end)

Running SIRD model
WARNING: replacing module AgentModels.
newsam.agents = Symbol[:D, :I, :S, :S, :S, :S, :R, :S, :D, :I, :S, :I, :I, :D, :S, :D, :S, :S, :D, :S]
newsam.agents = Symbol[:S, :D, :D, :D, :S, :S, :D, :D, :D, :D, :D, :S, :D, :D, :S, :S, :S, :D, :D, :S]
newsam.agents = Symbol[:S, :S, :D, :D, :D, :S, :D, :D, :D, :S, :S, :D, :S, :D, :S, :S, :D, :D, :S, :D]
newsam.agents = Symbol[:S, :S, :D, :S, :I, :S, :D, :S, :S, :D, :I, :D, :D, :S, :S, :R, :S, :D, :D, :D]
newsam.agents = Symbol[:D, :S, :D, :S, :S, :S, :I, :S, :D, :D, :I, :R, :S, :D, :S, :R, :D, :I, :D, :S]
newsam.agents = Symbol[:S, :D, :S, :I, :S, :S, :R, :R, :S, :S, :S, :D, :S, :D, :D, :R, :S, :S, :S, :R]
newsam.agents = Symbol[:I, :S, :D, :D, :D, :S, :D, :D, :D, :S, :S, :D, :I, :D, :S, :D, :D, :R, :I, :D]

Adding population growth to this model
stepr = :(function tick!(sm::StateModel)
      #= none:57 =#
      sm.loads = map((s->begin
                      #= none:57 =#
                      stateload(sm, s)
                  end), sm.states)
  end)
------------------------
stepr = :(function tick!(sm::StateModel)
      #= none:57 =#
      sm.loads = map((s->begin
                      #= none:57 =#
                      stateload(sm, s)
                  end), sm.states)
      push!(sm.agents, :S)
  end)

Running growth model
WARNING: replacing module AgentModels.
newsam.agents = Symbol[:S, :D, :D, :S, :D, :D, :D, :D, :S, :D, :D, :D, :D, :S, :D, :R, :D, :S, :D, :S, :S, :D, :D, :D, :S, :S, :D, :S, :S, :S]
newsam.agents = Symbol[:D, :D, :S, :S, :S, :S, :D, :S, :R, :D, :D, :S, :S, :S, :S, :D, :S, :S, :D, :S, :S, :S, :S, :S, :D, :S, :S, :S, :S, :S]
newsam.agents = Symbol[:D, :D, :D, :S, :D, :D, :D, :D, :I, :S, :D, :D, :S, :D, :S, :S, :D, :D, :D, :D, :S, :D, :S, :S, :S, :D, :S, :S, :I, :S]
newsam.agents = Symbol[:S, :D, :D, :D, :S, :S, :R, :D, :D, :S, :D, :D, :D, :S, :S, :D, :S, :D, :D, :S, :I, :D, :S, :D, :S, :S, :S, :S, :S, :S]
newsam.agents = Symbol[:D, :I, :D, :D, :D, :D, :D, :R, :D, :D, :S, :D, :S, :S, :S, :S, :S, :D, :D, :D, :D, :D, :S, :S, :S, :D, :S, :S, :S, :S]
newsam.agents = Symbol[:S, :D, :S, :D, :D, :S, :R, :D, :S, :D, :D, :D, :R, :S, :S, :D, :S, :R, :R, :D, :D, :S, :D, :S, :S, :I, :S, :I, :S, :S]
newsam.agents = Symbol[:D, :S, :S, :S, :S, :S, :D, :S, :S, :S, :D, :S, :S, :I, :S, :D, :D, :S, :D, :D, :S, :S, :S, :I, :D, :S, :S, :S, :S, :I]

Model	 Counts
-----	 ------
basic	Pair{Symbol,Int64}[:S=>14, :I=>6, :R=>0]
basic	Pair{Symbol,Int64}[:S=>15, :I=>0, :R=>5]
basic	Pair{Symbol,Int64}[:S=>15, :I=>1, :R=>4]
basic	Pair{Symbol,Int64}[:S=>15, :I=>1, :R=>4]
basic	Pair{Symbol,Int64}[:S=>8, :I=>8, :R=>4]
basic	Pair{Symbol,Int64}[:S=>18, :I=>0, :R=>2]
basic	Pair{Symbol,Int64}[:S=>7, :I=>5, :R=>8]
sird	Pair{Symbol,Int64}[:S=>10, :I=>4, :R=>1, :D=>5]
sird	Pair{Symbol,Int64}[:S=>8, :I=>0, :R=>0, :D=>12]
sird	Pair{Symbol,Int64}[:S=>9, :I=>0, :R=>0, :D=>11]
sird	Pair{Symbol,Int64}[:S=>9, :I=>2, :R=>1, :D=>8]
sird	Pair{Symbol,Int64}[:S=>8, :I=>3, :R=>2, :D=>7]
sird	Pair{Symbol,Int64}[:S=>11, :I=>1, :R=>4, :D=>4]
sird	Pair{Symbol,Int64}[:S=>5, :I=>3, :R=>1, :D=>11]
growth	Pair{Symbol,Int64}[:S=>12, :I=>0, :R=>1, :D=>17]
growth	Pair{Symbol,Int64}[:S=>21, :I=>0, :R=>1, :D=>8]
growth	Pair{Symbol,Int64}[:S=>12, :I=>2, :R=>0, :D=>16]
growth	Pair{Symbol,Int64}[:S=>15, :I=>1, :R=>1, :D=>13]
growth	Pair{Symbol,Int64}[:S=>13, :I=>1, :R=>1, :D=>15]
growth	Pair{Symbol,Int64}[:S=>13, :I=>2, :R=>4, :D=>11]
growth	Pair{Symbol,Int64}[:S=>19, :I=>3, :R=>0, :D=>8]

Model	 Count 	 Num Unhealthy 	 Mean Healthy %
-----	 ------	 --------------	  --------------
growth	   7	  13.857	   50.0
sird	   7	  10.143	   42.857
basic	   7	  3.0   	   65.714
┌ Info: Running example: 
└   file = "modelmacro.jl"
WARNING: replacing module StatsMod.
┌ Info: Running example: 
└   file = "monomial_regression.jl"
(m.f).args[2] = quote
    #= /root/.julia/packages/SemanticModels/2GkPI/test/monomial_regression.jl:31 =#
    return a * x ^ 4
end
MonomialRegressionModel(
  f=:(function f(a, x)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/monomial_regression.jl:31 =#
      return a * x ^ 4
  end),
  objective=:loss,
  coefficient=:a,
  interval=:(a₀ = [-1, 1]))
sol.ahat = (0.07675560563802719, 0.07675561308860779)
sol.loss(sol.ahat[1]) = 1.272917193612105
((m.f).args[2]).args[2] = :(return a * x ^ 3)
WARNING: replacing module Regression.
sol.ahat[1] = -0.15113633126020432
sol.loss(sol.ahat[1]) = 7.3042780214633485
((m.f).args[2]).args[2] = :(return a * x ^ 2)
WARNING: replacing module Regression.
sol.ahat[1] = 0.5053171217441559
sol.loss(sol.ahat[1]) = 0.13138597231804847
((m.f).args[2]).args[2] = :(return a * x ^ 1)
WARNING: replacing module Regression.
sol.ahat[1] = WARNING: replacing module Regression.
-0.5334461033344269
sol.loss(sol.ahat[1]) = 12.085208207912629
((m.f).args[2]).args[2] = :(return a * x ^ 0)
WARNING: replacing module Regression.
sol.ahat[1] = 0.6825762614607811
sol.loss(sol.ahat[1]) = 11.210639037376852
((m.f).args[2]).args[2] = :(return a * x ^ -1)
sol.ahat[1] = -0.0009050816297531128
sol.loss(sol.ahat[1]) = 15.868576720307619

Results:


i	p	â		l⋆
-----------------------------
0	4	0.0767556	1.2729172
1	3	-0.1511363	7.304278
2	2	0.5053171	0.131386
3	1	-0.5334461	12.0852082
4	0	0.6825763	11.210639
5	-1	-0.0009051	15.8685767
Model order 2 is the best with a=0.5053171217441559 and loss 0.13138597231804847
┌ Info: Running example: 
└   file = "multivariate_regression.jl"
WARNING: could not import ModelTools.AbstractProblem into Main
m = MultivariateLsq(
  f=:f,
  coefficient=:β,
  p₀=:a₀
)
poly((one(Pow) ^ 4)(deepcopy(m), 1)) = :(a .* x .^ 4 .+ b .* y .^ 0)
poly((one(Pow) ^ 4)(deepcopy(m), 2)) = :(a .* x .^ 0 .+ b .* y .^ 4)
T₁ = Product((one(Pow), zero(Pow))) = (Pow(1), Pow(0))
T₂ = Product((zero(Pow), one(Pow))) = (Pow(0), Pow(1))
(T₁ ^ 2 ∘ T₂ ^ 3)(deepcopy(m)) = MultivariateLsq(
  f=:f,
  coefficient=:β,
  p₀=:a₀
)
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
┌ Info: Running example: 
└   file = "polynomial_regression.jl"
WARNING: replacing module Regression.
m = Lsq(
  f=:f,
  coefficient=:β,
  p₀=:a₀
)
Tₓ = Pow(1) = Pow(1)
T₁ = AddConst() = AddConst()
poly(Tₓ(m)) = :((.+)(β[1] .* x .^ 1))
p = :((.+)(β[1] .* x .^ 1))
assigns = Expr[:(a₀ = [1.5])]
poly(T₁(m)) = :(β[1] .* x .^ 1 .+ β[2] .* x .^ 0)
poly(Tₓ(m)) = :(β[1] .* x .^ 2 .+ β[2] .* x .^ 1)
poly(Tₓ(m)) = :(β[1] .* x .^ 3 .+ β[2] .* x .^ 2)
p = :(β[1] .* x .^ 3 .+ β[2] .* x .^ 2)
assigns = Expr[:(a₀ = [1.5, 1])]
poly(T₁(m)) = :(.+(β[1] .* x .^ 3, β[2] .* x .^ 2, β[3] .* x .^ 0))
WARNING: replacing module Regression.
p = :((.+)(β[1] .* x .^ 1))
assigns = Expr[:(a₀ = [1.5])]
WARNING: replacing module Regression.
p = :(β[1] .* x .^ 2 .+ β[2] .* x .^ 1)
WARNING: replacing module Regression.
assigns = Expr[:(a₀ = [1.5, 1])]
p = :(.+(β[1] .* x .^ 3, β[2] .* x .^ 2, β[3] .* x .^ 1))
assigns = Expr[:(a₀ = [1.5, 1, 1])]
WARNING: replacing module Regression.
p = :(.+(β[1] .* x .^ 4, β[2] .* x .^ 3, β[3] .* x .^ 2, β[4] .* x .^ 1))
assigns = Expr[:(a₀ = [1.5, 1, 1, 1])]
WARNING: replacing module Regression.
p = :(.+(β[1] .* x .^ 5, β[2] .* x .^ 4, β[3] .* x .^ 3, β[4] .* x .^ 2, β[5] .* x .^ 1))
assigns = Expr[:(a₀ = [1.5, 1, 1, 1, 1])]
DoF: 1	Poly: x^{0}
Residual: 70.6389	β̂: [0.5516])
ℓ₁ norm of β̂: 0.5516
--------------------------------------------------------


DoF: 2	Poly: x^{1, 0}
Residual: 39.7563	β̂: [1.4151, 0.4805])
ℓ₁ norm of β̂: 1.8956
--------------------------------------------------------


DoF: 3	Poly: x^{2, 1, 0}
Residual: 47.3024	β̂: [0.3991, 1.6823, 0.082])
ℓ₁ norm of β̂: 2.1633999999999998
--------------------------------------------------------


DoF: 4	Poly: x^{3, 2, 1, 0}
Residual: 0.0195	β̂: [0.5, 0.5, 0.0, 0.0])
ℓ₁ norm of β̂: 1.0
--------------------------------------------------------


DoF: 5	Poly: x^{4, 3, 2, 1, 0}
Residual: 0.0196	β̂: [-0.0, 0.5, 0.5001, -0.0, -0.0001])
ℓ₁ norm of β̂: 1.0002
--------------------------------------------------------


WARNING: replacing module Regression.
p = :((.+)(β[1] .* x .^ 2))
assigns = Expr[:(a₀ = [1.5])]
WARNING: replacing module Regression.
p = :(β[1] .* x .^ 4 .+ β[2] .* x .^ 2)
assigns = Expr[:(a₀ = [1.5, 1])]
WARNING: replacing module Regression.
p = :(.+(β[1] .* x .^ 6, β[2] .* x .^ 4, β[3] .* x .^ 2))
assigns = Expr[:(a₀ = [1.5, 1, 1])]
WARNING: replacing module Regression.
p = :(.+(β[1] .* x .^ 8, β[2] .* x .^ 6, β[3] .* x .^ 4, β[4] .* x .^ 2))
assigns = Expr[:(a₀ = [1.5, 1, 1, 1])]
WARNING: replacing module Regression.
p = :(.+(β[1] .* x .^ 10, β[2] .* x .^ 8, β[3] .* x .^ 6, β[4] .* x .^ 4, β[5] .* x .^ 2))
assigns = Expr[:(a₀ = [1.5, 1, 1, 1, 1])]
DoF: 1	Poly: x^{0}
Residual: 68.433	β̂: [0.5964])
ℓ₁ norm of β̂: 0.5964
--------------------------------------------------------


DoF: 2	Poly: x^{2, 0}
Residual: 66.4205	β̂: [0.5975, -0.0508])
ℓ₁ norm of β̂: 0.6483
--------------------------------------------------------


DoF: 3	Poly: x^{4, 2, 0}
Residual: 60.4888	β̂: [0.0992, 0.0846, 0.17])
ℓ₁ norm of β̂: 0.3538
--------------------------------------------------------


DoF: 4	Poly: x^{6, 4, 2, 0}
Residual: 44.0915	β̂: [-0.0197, 0.1513, 0.1151, 0.1055])
ℓ₁ norm of β̂: 0.39159999999999995
--------------------------------------------------------


DoF: 5	Poly: x^{8, 6, 4, 2, 0}
Residual: 53.7972	β̂: [-0.0008, -0.0281, 0.3092, -0.1019, 0.1172])
ℓ₁ norm of β̂: 0.5571999999999999
--------------------------------------------------------


┌ Info: Running example: 
└   file = "workflow.jl"
Running Agent Based Simulation Augmentation Demo
================================================
demo parameters:
	samples=100
	nsteps=25

Running basic model
WARNING: replacing module AgentModels.
AgentModels = Main.AgentModels
======= . Simulation 1  ========
======= . Simulation 2  ========
======= . Simulation 3  ========
======= . Simulation 4  ========
======= . Simulation 5  ========
======= . Simulation 6  ========
======= . Simulation 7  ========
======= . Simulation 8  ========
======= . Simulation 9  ========
======= . Simulation 10  ========
======= . Simulation 11  ========
======= . Simulation 12  ========
======= . Simulation 13  ========
======= . Simulation 14  ========
======= . Simulation 15  ========
======= . Simulation 16  ========
======= . Simulation 17  ========
======= . Simulation 18  ========
======= . Simulation 19  ========
======= . Simulation 20  ========
======= . Simulation 21  ========
======= . Simulation 22  ========
======= . Simulation 23  ========
======= . Simulation 24  ========
======= . Simulation 25  ========
======= . Simulation 26  ========
======= . Simulation 27  ========
======= . Simulation 28  ========
======= . Simulation 29  ========
======= . Simulation 30  ========
======= . Simulation 31  ========
======= . Simulation 32  ========
======= . Simulation 33  ========
======= . Simulation 34  ========
======= . Simulation 35  ========
======= . Simulation 36  ========
======= . Simulation 37  ========
======= . Simulation 38  ========
======= . Simulation 39  ========
======= . Simulation 40  ========
======= . Simulation 41  ========
======= . Simulation 42  ========
======= . Simulation 43  ========
======= . Simulation 44  ========
======= . Simulation 45  ========
======= . Simulation 46  ========
======= . Simulation 47  ========
======= . Simulation 48  ========
======= . Simulation 49  ========
======= . Simulation 50  ========
======= . Simulation 51  ========
======= . Simulation 52  ========
======= . Simulation 53  ========
======= . Simulation 54  ========
======= . Simulation 55  ========
======= . Simulation 56  ========
======= . Simulation 57  ========
======= . Simulation 58  ========
======= . Simulation 59  ========
======= . Simulation 60  ========
======= . Simulation 61  ========
======= . Simulation 62  ========
======= . Simulation 63  ========
======= . Simulation 64  ========
======= . Simulation 65  ========
======= . Simulation 66  ========
======= . Simulation 67  ========
======= . Simulation 68  ========
======= . Simulation 69  ========
======= . Simulation 70  ========
======= . Simulation 71  ========
======= . Simulation 72  ========
======= . Simulation 73  ========
======= . Simulation 74  ========
======= . Simulation 75  ========
======= . Simulation 76  ========
======= . Simulation 77  ========
======= . Simulation 78  ========
======= . Simulation 79  ========
======= . Simulation 80  ========
======= . Simulation 81  ========
======= . Simulation 82  ========
======= . Simulation 83  ========
======= . Simulation 84  ========
======= . Simulation 85  ========
======= . Simulation 86  ========
======= . Simulation 87  ========
======= . Simulation 88  ========
======= . Simulation 89  ========
======= . Simulation 90  ========
======= . Simulation 91  ========
======= . Simulation 92  ========
======= . Simulation 93  ========
======= . Simulation 94  ========
======= . Simulation 95  ========
======= . Simulation 96  ========
======= . Simulation 97  ========
======= . Simulation 98  ========
======= . Simulation 99  ========
======= . Simulation 100  ========
length(finalcounts) = 100
WARNING: replacing module Regression.
size(Data) = (100, 3)
size(Data) = (100, 3)
m = Lsq(
  f=:f,
  coefficient=:β,
  p₀=:a₀
)
Tₓ = Pow(1) = Pow(1)
T₁ = AddConst() = AddConst()
p = :((.+)(β[1] .* x .^ 1))
assigns = Expr[:(a₀ = [1.0])]
poly(m) = :((.+)(β[1] .* x .^ 0))
WARNING: replacing module Regression.
m′.expr = :(module Regression
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:71 =#
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:72 =#
  using Random
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:73 =#
  using LsqFit
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:74 =#
  using LinearAlgebra
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:76 =#
  function f(x, β)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:79 =#
      return β[1] .* x .^ 1 .+ β[2] .* x .^ 0
  end
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:82 =#
  function sample(g::Function, n)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:83 =#
      x = randn(Float64, n)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:84 =#
      target = g(x) .+ randn(Float64, n[1]) ./ 1600
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:85 =#
      return (x, target)
  end
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:88 =#
  function describe(fit)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:89 =#
      if !(fit.converged)
          #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:90 =#
          error("Did not converge")
      end
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:92 =#
      return (β = fit.param, r = norm(fit.resid, 2), n = length(fit.resid))
  end
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:95 =#
  a₀ = [1.0, 1]
  #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:96 =#
  function main(X, target)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:98 =#
      fit = curve_fit(f, X, target, a₀)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:99 =#
      result = describe(fit)
      #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:100 =#
      return (fit, result)
  end
  end)
size(Data) = (100, 3)
WARNING: replacing module AgentModels.
size(Data) = (100, 3)
WARNING: replacing module Regression.
LsqFit.LsqFitResult{Array{Float64,1},Array{Float64,1},Array{Float64,2},Array{Float64,1}}([6.56], [4.56, 5.56, -6.44, 4.56, 4.56, 2.56, -7.44, 6.56, 0.56, 5.56, -3.44, -10.44, 3.56, 0.56, 0.56, 0.56, 1.56, 0.56, -0.44, 6.56, -0.44, -8.44, 4.56, 4.56, 6.56, 1.56, 3.56, -5.44, 3.56, -3.44, -7.44, 2.56, 1.56, -8.44, -7.44, -4.44, -4.44, 6.56, 3.56, -7.44, 4.56, 2.56, 6.56, -8.44, 0.56, -13.44, 4.56, -1.44, 3.56, 1.56, 4.56, -3.44, 1.56, 4.56, 3.56, -4.44, -2.44, 3.56, 0.56, 4.56, -4.44, 2.56, -4.44, 5.56, 4.56, -3.44, 4.56, -9.44, -13.44, -12.44, 4.56, 2.56, 5.56, 6.56, -6.44, 3.56, -13.44, 5.56, 0.56, 2.56, 0.56, 0.56, 5.56, -10.44, 0.56, 4.56, 1.56, -2.44, 4.56, -5.44, -4.44, -2.44, 6.56, -1.44, 4.56, 6.56, -13.44, 5.56, 0.56, 2.56], [1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0], true, Float64[])
==========
(β = [6.56], r = 54.851071092550235, n = 100)
==========
p = :((.+)(β[1] .* x .^ 1))
assigns = Expr[:(a₀ = [1.0])]
p = :(β[1] .* x .^ 2 .+ β[2] .* x .^ 1)
assigns = Expr[:(a₀ = [1.0, 1])]
WARNING: replacing module AgentModels.
WARNING: replacing module Regression.
size(Data) = (100, 3)

Initial Pipeline
----------------
(P.steps[1]).states = :([:S, :I, :R])
poly(P.steps[2]) = :((.+)(β[1] .* x .^ 0))


Applying the first pair of transformations
------------------------------------------

The system states are Any[:(:S), :(:I), :(:R)]

Adding un estado de los muertos

The system states are Any[:(:S), :(:I), :(:R), :(:D)]

There is no resurrection in this model

Infected individuals recover or die in one step
m[:I] = :(x...->begin
          #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:385 =#
          #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:386 =#
          roll = rand()
          #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:387 =#
          if roll < ρ
              #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:388 =#
              return :R
          elseif #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:389 =# rand(Bool)
              #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:390 =#
              return :D
          else
              #= /root/.julia/packages/SemanticModels/2GkPI/test/workflow.jl:392 =#
              return :I
          end
      end)
(P.steps[1]).states = :([:S, :I, :R, :D])
poly(P.steps[2]) = :((.+)(β[1] .* x .^ 1))


Applying the second pair of transformations
-------------------------------------------
p = :((.+)(β[1] .* x .^ 1))
assigns = Expr[:(a₀ = [1.0])]

Adding population growth to this model
stepr = :(function tick!(sm::StateModel)
      #= none:59 =#
      sm.loads = map((s->begin
                      #= none:59 =#
                      stateload(sm, s)
                  end), sm.states)
      #= none:60 =#
      return sm.loads
  end)
------------------------
stepr = :(function tick!(sm::StateModel)
      #= none:59 =#
      sm.loads = map((s->begin
                      #= none:59 =#
                      stateload(sm, s)
                  end), sm.states)
      #= none:60 =#
      return sm.loads
      push!(sm.agents, :S)
  end)
p = :(β[1] .* x .^ 2 .+ β[2] .* x .^ 1)
assigns = Expr[:(a₀ = [1.0, 1])]
p = :(.+(β[1] .* x .^ 3, β[2] .* x .^ 2, β[3] .* x .^ 1))
assigns = Expr[:(a₀ = [1.0, 1, 1])]


The final model state
---------------------
function tick!(sm::StateModel)
    #= none:59 =#
    sm.loads = map((s->begin
                    #= none:59 =#
                    stateload(sm, s)
                end), sm.states)
    #= none:60 =#
    return sm.loads
    push!(sm.agents, :S)
end
poly(P.steps[2]) = :(.+(β[1] .* x .^ 3, β[2] .* x .^ 2, β[3] .* x .^ 1, β[4] .* x .^ 0))
WARNING: replacing module AgentModels.
Mod = Main.AgentModels
size(Data) = (100, 4)
WARNING: replacing module Regression.
ρ	f(ρ,β)
==============
0.0	15.189
0.05	14.247
0.1	13.278
0.15	12.289
0.2	11.29
0.25	10.287
0.3	9.29
0.35	8.306
0.4	7.344
0.45	6.412
0.5	5.518
0.55	4.671
0.6	3.878
0.65	3.149
0.7	2.49
0.75	1.91
0.8	1.418
0.85	1.022
0.9	0.729
0.95	0.549
1.0	0.489
[ Info: Loading Plots, this may take a while
[ Info: Making plots, this may take a while
β: [10.9506, -7.1431, -18.5078, 15.1893]
.+(β[1] .* x .^ 3, β[2] .* x .^ 2, β[3] .* x .^ 1, β[4] .* x .^ 0)
┌ Info: Running example: 
└   file = "pseudo_polynomial_regression.jl"
WARNING: using Polynomials.poly in module Main conflicts with an existing identifier.
bodyblock(m.f) = Any[:(#= /root/.julia/packages/SemanticModels/2GkPI/test/pseudo_polynomial_regression.jl:32 =#), :(y = first(a) * x ^ 0), :(#= /root/.julia/packages/SemanticModels/2GkPI/test/pseudo_polynomial_regression.jl:33 =#), :(return y)]
WARNING: replacing module Regression.
WARNING: replacing module Regression.
WARNING: replacing module Regression.
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(0), x))
sol.ahat[1] = -1
sol.loss(sol.ahat[1]) = 20.13038665673438
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.5020807608962059
sol.loss(sol.ahat[1]) = 4.592980186575482
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(2*x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.25104037672281265
sol.loss(sol.ahat[1]) = 4.592980186575492
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(x), x))
WARNING: replacing module Regression.
sol.ahat[1] = -0.13085374981164932
sol.loss(sol.ahat[1]) = 19.902665298586488
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(x + x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.6143628656864166
sol.loss(sol.ahat[1]) = 2.187454550179506
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(x + 2*x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.29335421323776245
sol.loss(sol.ahat[1]) = 2.484606630021387
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(1), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.9999999925494194
sol.loss(sol.ahat[1]) = 9.069784234818242
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(1 + x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.42221833020448685
sol.loss(sol.ahat[1]) = 2.618319243042377
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(1 + 2*x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.23381679505109787
sol.loss(sol.ahat[1]) = 3.1968217851927285
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(1 + x), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.48516687750816345
sol.loss(sol.ahat[1]) = 15.865756420964225
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(1 + x + x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.5032734870910645
sol.loss(sol.ahat[1]) = 0.13228245782573908
((m.f).args[2]).args[2] = :(y = first(a) * polyval(Poly(1 + x + 2*x^2), x))
WARNING: replacing module Regression.
sol.ahat[1] = 0.26868781447410583
sol.loss(sol.ahat[1]) = 1.1389708980451678

Results:


i	â         ℓ⋆ 		poly
----------------------------------------------
0     -1      20.1300     Poly(0)
0      0.5021      4.5930     Poly(x^2)
0      0.2510      4.5930     Poly(2*x^2)
0     -0.1308      19.9030     Poly(x)
0      0.6144      2.1875     Poly(x + x^2)
0      0.2933      2.4846     Poly(x + 2*x^2)
1      1.0000      9.0698     Poly(1)
1      0.4222      2.6183     Poly(1 + x^2)
1      0.2338      3.1968     Poly(1 + 2*x^2)
1      0.4852      15.8660     Poly(1 + x)
1      0.5033      0.1323     Poly(1 + x + x^2)
1      0.2687      1.1390     Poly(1 + x + 2*x^2)
Model order Poly(1 + x + x^2) is the best with a= 0.5033 and loss  0.1323
┌ Info: Running example: 
└   file = "odegraft.jl"
matches = Expr[:(ODEProblem(seir_ode, init, tspan, pram))]
matches = Expr[:(ODEProblem(micro_1, init, tspan, parms))]
model1.expr = :(module SEIRmodel
  #= none:16 =#
  #= none:17 =#
  using DifferentialEquations
  #= none:20 =#
  function ##seir_ode#363(dY, Y, p, t, r)
      N = sum(Y)
      #= none:22 =#
      β = p[1]
      #= none:24 =#
      σ = p[2]
      #= none:26 =#
      γ = p[3]
      #= none:28 =#
      μ = p[4]
      #= none:31 =#
      S = Y[1]
      #= none:33 =#
      E = Y[2]
      #= none:35 =#
      I = Y[3]
      #= none:39 =#
      dY[1] = r * (1 - S / N) * S + ((μ - β * S * I) - μ * S)
      #= none:40 =#
      dY[2] = β * S * I - (σ + μ) * E
      #= none:41 =#
      dY[3] = σ * E - (γ + μ) * I
  end
  #= none:44 =#
  function main(λ)
      #= none:46 =#
      pram = [520 / 365, 1 / 60, 1 / 30, 774835 / (65640000 * 365)]
      #= none:48 =#
      init = [0.8, 0.1, 0.1]
      #= none:49 =#
      tspan = (0.0, 365.0)
      #= none:51 =#
      seir_prob = ODEProblem(((du, u, p, t)->begin
                      #= /root/.julia/packages/SemanticModels/2GkPI/test/odegraft.jl:85 =#
                      ##seir_ode#363(du, u, p, t, λ)
                  end), init, tspan, pram)
      #= none:53 =#
      sol = solve(seir_prob)
      #= none:54 =#
      return sol
  end
  end)
WARNING: replacing module SEIRmodel.
S	I	R
4.139683392896426e-5	1.5129405629268908	1.2314283588368844
3.319438884977651e-5	1.7926580206321392	1.4394889794025725
2.7307362253643167e-5	2.0962335390646056	1.6601779143502022
2.2813032162574436e-5	2.424996354300892	1.8937234305225221
1.9442874450246088e-5	2.7783549521313495	2.1389523977186435
1.695225405141501e-5	3.1545278811757145	2.3937933239645743
Test Summary:     | Pass  Total
Test all examples |    9      9
   Testing SemanticModels tests passed 
