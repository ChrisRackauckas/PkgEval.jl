 Resolving package versions...
 Installed URIParser ──────────── v0.4.0
 Installed NaNMath ────────────── v0.3.3
 Installed BinDeps ────────────── v0.8.10
 Installed CommonSubexpressions ─ v0.2.0
 Installed BinaryProvider ─────── v0.5.8
 Installed StaticArrays ───────── v0.12.1
 Installed SpecialFunctions ───── v0.8.0
 Installed ReverseDiff ────────── v0.3.1
 Installed DiffRules ──────────── v0.1.0
 Installed DiffResults ────────── v0.0.4
 Installed ForwardDiff ────────── v0.10.6
 Installed Compat ─────────────── v2.2.0
 Installed FunctionWrappers ───── v1.0.0
  Updating `~/.julia/environments/v1.0/Project.toml`
  [37e2e3b7] + ReverseDiff v0.3.1
  Updating `~/.julia/environments/v1.0/Manifest.toml`
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [f6369f11] + ForwardDiff v0.10.6
  [069b7b12] + FunctionWrappers v1.0.0
  [77ba4419] + NaNMath v0.3.3
  [37e2e3b7] + ReverseDiff v0.3.1
  [276daf66] + SpecialFunctions v0.8.0
  [90137ffa] + StaticArrays v0.12.1
  [30578b45] + URIParser v0.4.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
   Testing ReverseDiff
 Resolving package versions...
 Installed DiffTests ─ v0.1.0
    Status `/tmp/tmpV7BbIW/Manifest.toml`
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [de460e47] DiffTests v0.1.0
  [f6369f11] ForwardDiff v0.10.6
  [069b7b12] FunctionWrappers v1.0.0
  [77ba4419] NaNMath v0.3.3
  [37e2e3b7] ReverseDiff v0.3.1
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.12.1
  [30578b45] URIParser v0.4.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
running TapeTests...
done (took 94.257829587 seconds).
running TrackedTests...
done (took 8.376517667 seconds).
running MacrosTests...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{typeof(Main.MacrosTests.f0)}(Main.MacrosTests.f0)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{getfield(Main.MacrosTests, Symbol("##hidden_f1"))}(Main.MacrosTests.#hidden_f1)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{getfield(Main.MacrosTests, Symbol("##hidden_f2"))}(Main.MacrosTests.#hidden_f2)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{getfield(Main.MacrosTests, Symbol("##hidden_f3"))}(Main.MacrosTests.#hidden_f3)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{getfield(Main.MacrosTests, Symbol("##hidden_f4"))}(Main.MacrosTests.#hidden_f4)`...
  testing @forward named functions: `ReverseDiff.ForwardOptimize{typeof(-)}(-)`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{getfield(Main.MacrosTests, Symbol("##1#2"))}(getfield(Main.MacrosTests, Symbol("##1#2"))())`...
  testing @forward anonymous functions: `ReverseDiff.ForwardOptimize{getfield(Main.MacrosTests, Symbol("##3#4"))}(getfield(Main.MacrosTests, Symbol("##3#4"))())`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{typeof(Main.MacrosTests.f0)}(Main.MacrosTests.f0)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{getfield(Main.MacrosTests, Symbol("##hidden_g1"))}(Main.MacrosTests.#hidden_g1)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{getfield(Main.MacrosTests, Symbol("##hidden_g2"))}(Main.MacrosTests.#hidden_g2)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{getfield(Main.MacrosTests, Symbol("##hidden_g3"))}(Main.MacrosTests.#hidden_g3)`...
  testing @skip named functions: `ReverseDiff.SkipOptimize{getfield(Main.MacrosTests, Symbol("##hidden_g4"))}(Main.MacrosTests.#hidden_g4)`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{getfield(Main.MacrosTests, Symbol("##5#6"))}(getfield(Main.MacrosTests, Symbol("##5#6"))())`...
  testing @skip anonymous functions: `ReverseDiff.SkipOptimize{getfield(Main.MacrosTests, Symbol("##7#8"))}(getfield(Main.MacrosTests, Symbol("##7#8"))())`...
done (took 11.534192052 seconds).
running ScalarTests...
  testing forward-mode unary scalar functions: `Base.asind`...
  testing forward-mode unary scalar functions: `Base.log1p`...
  testing forward-mode unary scalar functions: `Base.acsch`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfc`...
  testing forward-mode unary scalar functions: `SpecialFunctions.digamma`...
  testing forward-mode unary scalar functions: `NaNMath.acos`...
  testing forward-mode unary scalar functions: `Base.asec`...
  testing forward-mode unary scalar functions: `Base.acosh`...
  testing forward-mode binary scalar functions: `\`...
  testing forward-mode unary scalar functions: `NaNMath.log10`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airybiprime`...
  testing forward-mode unary scalar functions: `Base.acsc`...
  testing forward-mode unary scalar functions: `Base.cscd`...
  testing forward-mode binary scalar functions: `logbeta`...
  testing forward-mode binary scalar functions: `hypot`...
  testing forward-mode unary scalar functions: `NaNMath.log`...
  testing forward-mode unary scalar functions: `Base.tand`...
  testing forward-mode unary scalar functions: `NaNMath.atanh`...
  testing forward-mode unary scalar functions: `Base.deg2rad`...
  testing forward-mode unary scalar functions: `Base.log10`...
  testing forward-mode unary scalar functions: `Base.csch`...
  testing forward-mode unary scalar functions: `Base.asinh`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airyai`...
  testing forward-mode unary scalar functions: `Base.abs2`...
  testing forward-mode unary scalar functions: `SpecialFunctions.gamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfcx`...
  testing forward-mode unary scalar functions: `NaNMath.log1p`...
  testing forward-mode binary scalar functions: `/`...
  testing forward-mode unary scalar functions: `SpecialFunctions.bessely0`...
  testing forward-mode unary scalar functions: `Base.cosh`...
  testing forward-mode unary scalar functions: `NaNMath.sin`...
  testing forward-mode unary scalar functions: `Base.cos`...
  testing forward-mode binary scalar functions: `atan`...
  testing forward-mode unary scalar functions: `Base.cospi`...
  testing forward-mode unary scalar functions: `Base.cbrt`...
  testing forward-mode unary scalar functions: `Base.acosd`...
  testing forward-mode unary scalar functions: `SpecialFunctions.bessely1`...
  testing forward-mode unary scalar functions: `Base.acoth`...
  testing forward-mode unary scalar functions: `NaNMath.cos`...
  testing forward-mode binary scalar functions: `max`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfcinv`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erf`...
  testing forward-mode unary scalar functions: `Base.sin`...
  testing forward-mode binary scalar functions: `+`...
  testing forward-mode unary scalar functions: `SpecialFunctions.dawson`...
  testing forward-mode unary scalar functions: `Base.inv`...
  testing forward-mode unary scalar functions: `Base.acotd`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airyaiprime`...
  testing forward-mode binary scalar functions: `min`...
  testing forward-mode unary scalar functions: `Base.+`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfinv`...
  testing forward-mode unary scalar functions: `SpecialFunctions.trigamma`...
  testing forward-mode unary scalar functions: `Base.asecd`...
  testing forward-mode unary scalar functions: `Base.log`...
  testing forward-mode unary scalar functions: `NaNMath.acosh`...
  testing forward-mode unary scalar functions: `Base.rad2deg`...
  testing forward-mode binary scalar functions: `mod`...
  testing forward-mode unary scalar functions: `SpecialFunctions.besselj1`...
  testing forward-mode unary scalar functions: `Base.exp`...
  testing forward-mode unary scalar functions: `Base.acot`...
  testing forward-mode unary scalar functions: `NaNMath.sqrt`...
  testing forward-mode binary scalar functions: `*`...
  testing forward-mode unary scalar functions: `Base.sind`...
  testing forward-mode unary scalar functions: `Base.sinpi`...
  testing forward-mode binary scalar functions: `max`...
  testing forward-mode unary scalar functions: `Base.asech`...
  testing forward-mode unary scalar functions: `NaNMath.log2`...
  testing forward-mode unary scalar functions: `NaNMath.tan`...
  testing forward-mode unary scalar functions: `NaNMath.lgamma`...
  testing forward-mode unary scalar functions: `Base.sqrt`...
  testing forward-mode binary scalar functions: `^`...
  testing forward-mode unary scalar functions: `SpecialFunctions.invdigamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airybi`...
  testing forward-mode unary scalar functions: `Base.exp10`...
  testing forward-mode binary scalar functions: `rem`...
  testing forward-mode unary scalar functions: `Base.sech`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfi`...
  testing forward-mode unary scalar functions: `Base.coth`...
  testing forward-mode unary scalar functions: `Base.asin`...
  testing forward-mode unary scalar functions: `Base.cotd`...
  testing forward-mode unary scalar functions: `Base.cosd`...
  testing forward-mode unary scalar functions: `Base.sinh`...
  testing forward-mode unary scalar functions: `Base.abs`...
  testing forward-mode unary scalar functions: `SpecialFunctions.loggamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.besselj0`...
  testing forward-mode unary scalar functions: `Base.transpose`...
  testing forward-mode binary scalar functions: `min`...
  testing forward-mode unary scalar functions: `Base.csc`...
  testing forward-mode unary scalar functions: `Base.tanh`...
  testing forward-mode unary scalar functions: `Base.log2`...
  testing forward-mode unary scalar functions: `Base.atan`...
  testing forward-mode unary scalar functions: `Base.secd`...
  testing forward-mode unary scalar functions: `Base.atand`...
  testing forward-mode unary scalar functions: `NaNMath.asin`...
  testing forward-mode unary scalar functions: `Base.sec`...
  testing forward-mode unary scalar functions: `Base.acscd`...
  testing forward-mode unary scalar functions: `Base.tan`...
  testing forward-mode unary scalar functions: `Base.-`...
  testing forward-mode unary scalar functions: `Base.cot`...
  testing forward-mode binary scalar functions: `-`...
  testing forward-mode unary scalar functions: `Base.exp2`...
  testing forward-mode unary scalar functions: `Base.expm1`...
  testing forward-mode unary scalar functions: `Base.acos`...
  testing forward-mode unary scalar functions: `Base.atanh`...
  testing forward-mode binary scalar functions: `beta`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinf`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isnan`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isfinite`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `iseven`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isodd`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isreal`...
  testing SKIPPED_UNARY_SCALAR_FUNCS: `isinteger`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isequal`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `isless`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `==`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `!=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `<=`...
  testing SKIPPED_BINARY_SCALAR_FUNCS: `>=`...
done (took 42.507858225 seconds).
running LinAlgTests...
  testing Array -> Number functions: `sum`...
  testing Array -> Number functions: `LinearAlgebra.det`...
  testing Array -> Number functions: `getfield(Main.LinAlgTests, Symbol("##17#18"))()`...
  testing Array -> Number functions: `Statistics.mean`...
  testing Array -> Array functions: `-`...
  testing Array -> Array functions: `inv`...
  testing (Array, Array) -> Array functions: `+`...
  testing (Array, Array) -> Array functions: `-`...
  testing *(A, B) functions: `*(a, b)`...
  testing *(A, B) functions: `*(transpose(a), b)`...
  testing *(A, B) functions: `*(a, transpose(b))`...
  testing *(A, B) functions: `*(transpose(a), transpose(b))`...
  testing *(A, B) functions: `*(adjoint(a), b)`...
  testing *(A, B) functions: `*(a, adjoint(b))`...
  testing *(A, B) functions: `*(adjoint(a), adjoint(b))`...
  testing *(A, B) functions: `*(adjoint(a), transpose(b))`...
  testing *(A, B) functions: `*(transpose(a), adjoint(b))`...
done (took 70.079226994 seconds).
running ElementwiseTests...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_1`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_2`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_3`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_4`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `DiffTests.num2num_5`...
  testing DiffTests.NUMBER_TO_NUMBER_FUNCS: `identity`...
  testing forward-mode unary scalar functions: `asind`...
  testing forward-mode unary scalar functions: `log1p`...
  testing forward-mode unary scalar functions: `acsch`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfc`...
  testing forward-mode unary scalar functions: `SpecialFunctions.digamma`...
  testing forward-mode unary scalar functions: `NaNMath.acos`...
  testing forward-mode unary scalar functions: `asec`...
  testing forward-mode unary scalar functions: `acosh`...
  testing forward-mode binary scalar functions: `\`...
  testing forward-mode unary scalar functions: `NaNMath.log10`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airybiprime`...
  testing forward-mode unary scalar functions: `acsc`...
  testing forward-mode unary scalar functions: `cscd`...
  testing forward-mode binary scalar functions: `SpecialFunctions.logbeta`...
  testing forward-mode binary scalar functions: `hypot`...
  testing forward-mode unary scalar functions: `NaNMath.log`...
  testing forward-mode unary scalar functions: `tand`...
  testing forward-mode unary scalar functions: `NaNMath.atanh`...
  testing forward-mode unary scalar functions: `deg2rad`...
  testing forward-mode unary scalar functions: `log10`...
  testing forward-mode unary scalar functions: `csch`...
  testing forward-mode unary scalar functions: `asinh`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airyai`...
  testing forward-mode unary scalar functions: `abs2`...
  testing forward-mode unary scalar functions: `SpecialFunctions.gamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfcx`...
  testing forward-mode unary scalar functions: `NaNMath.log1p`...
  testing forward-mode binary scalar functions: `/`...
  testing forward-mode unary scalar functions: `SpecialFunctions.bessely0`...
  testing forward-mode unary scalar functions: `cosh`...
  testing forward-mode unary scalar functions: `NaNMath.sin`...
  testing forward-mode unary scalar functions: `cos`...
  testing forward-mode binary scalar functions: `atan`...
  testing forward-mode unary scalar functions: `cospi`...
  testing forward-mode unary scalar functions: `cbrt`...
  testing forward-mode unary scalar functions: `acosd`...
  testing forward-mode unary scalar functions: `SpecialFunctions.bessely1`...
  testing forward-mode unary scalar functions: `acoth`...
  testing forward-mode unary scalar functions: `NaNMath.cos`...
  testing forward-mode binary scalar functions: `NaNMath.max`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfcinv`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erf`...
  testing forward-mode unary scalar functions: `sin`...
  testing forward-mode binary scalar functions: `+`...
  testing forward-mode unary scalar functions: `SpecialFunctions.dawson`...
  testing forward-mode unary scalar functions: `inv`...
  testing forward-mode unary scalar functions: `acotd`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airyaiprime`...
  testing forward-mode binary scalar functions: `min`...
  testing forward-mode unary scalar functions: `+`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfinv`...
  testing forward-mode unary scalar functions: `SpecialFunctions.trigamma`...
  testing forward-mode unary scalar functions: `asecd`...
  testing forward-mode unary scalar functions: `log`...
  testing forward-mode unary scalar functions: `NaNMath.acosh`...
  testing forward-mode unary scalar functions: `rad2deg`...
  testing forward-mode binary scalar functions: `mod`...
  testing forward-mode unary scalar functions: `SpecialFunctions.besselj1`...
  testing forward-mode unary scalar functions: `exp`...
  testing forward-mode unary scalar functions: `acot`...
  testing forward-mode unary scalar functions: `NaNMath.sqrt`...
  testing forward-mode binary scalar functions: `*`...
  testing forward-mode unary scalar functions: `sind`...
  testing forward-mode unary scalar functions: `sinpi`...
  testing forward-mode binary scalar functions: `max`...
  testing forward-mode unary scalar functions: `asech`...
  testing forward-mode unary scalar functions: `NaNMath.log2`...
  testing forward-mode unary scalar functions: `NaNMath.tan`...
  testing forward-mode unary scalar functions: `NaNMath.lgamma`...
  testing forward-mode unary scalar functions: `sqrt`...
  testing forward-mode binary scalar functions: `^`...
  testing forward-mode unary scalar functions: `SpecialFunctions.invdigamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.airybi`...
  testing forward-mode unary scalar functions: `exp10`...
  testing forward-mode binary scalar functions: `rem`...
  testing forward-mode unary scalar functions: `sech`...
  testing forward-mode unary scalar functions: `SpecialFunctions.erfi`...
  testing forward-mode unary scalar functions: `coth`...
  testing forward-mode unary scalar functions: `asin`...
  testing forward-mode unary scalar functions: `cotd`...
  testing forward-mode unary scalar functions: `cosd`...
  testing forward-mode unary scalar functions: `sinh`...
  testing forward-mode unary scalar functions: `abs`...
  testing forward-mode unary scalar functions: `SpecialFunctions.loggamma`...
  testing forward-mode unary scalar functions: `SpecialFunctions.besselj0`...
  testing forward-mode unary scalar functions: `transpose`...
  testing forward-mode binary scalar functions: `NaNMath.min`...
  testing forward-mode unary scalar functions: `csc`...
  testing forward-mode unary scalar functions: `tanh`...
  testing forward-mode unary scalar functions: `log2`...
  testing forward-mode unary scalar functions: `atan`...
  testing forward-mode unary scalar functions: `secd`...
  testing forward-mode unary scalar functions: `atand`...
  testing forward-mode unary scalar functions: `NaNMath.asin`...
  testing forward-mode unary scalar functions: `sec`...
  testing forward-mode unary scalar functions: `acscd`...
  testing forward-mode unary scalar functions: `tan`...
  testing forward-mode unary scalar functions: `-`...
  testing forward-mode unary scalar functions: `cot`...
  testing forward-mode binary scalar functions: `-`...
  testing forward-mode unary scalar functions: `exp2`...
  testing forward-mode unary scalar functions: `expm1`...
  testing forward-mode unary scalar functions: `acos`...
  testing forward-mode unary scalar functions: `atanh`...
  testing forward-mode binary scalar functions: `SpecialFunctions.beta`...
  testing built-in broadcast operators: `getfield(DiffTests, Symbol("##11#17"))()`...
  testing built-in broadcast operators: `getfield(DiffTests, Symbol("##12#18"))()`...
  testing built-in broadcast operators: `getfield(DiffTests, Symbol("##13#19"))()`...
  testing built-in broadcast operators: `getfield(DiffTests, Symbol("##14#20"))()`...
  testing built-in broadcast operators: `getfield(DiffTests, Symbol("##15#21"))()`...
  testing built-in broadcast operators: `getfield(DiffTests, Symbol("##16#22"))()`...
done (took 718.870022746 seconds).
running ConfigTests...
done (took 1.350950359 seconds).
running GradientTests...
  testing MATRIX_TO_NUMBER_FUNCS: `LinearAlgebra.det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_3`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_4`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.softmax`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_5`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_6`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_7`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.self_weighted_logit`...
  testing VECTOR_TO_NUMBER_FUNCS: `first`...
  testing TERNARY_MATRIX_TO_NUMBER_FUNCS: `DiffTests.neural_step`...
done (took 72.983635632 seconds).
running JacobianTests...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `identity`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.chebyquad!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.brown_almost_linear!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.trigonometric!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.mutation_test_1!`...
  testing INPLACE_ARRAY_TO_ARRAY_FUNCS: `DiffTests.mutation_test_2!`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `/`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `\`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##11#17"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##12#18"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##13#19"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##14#20"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##15#21"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##16#22"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##23#29"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##24#30"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##25#31"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##26#32"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##27#33"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##28#34"))()`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `-`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.chebyquad`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.brown_almost_linear`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.trigonometric`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.arr2arr_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_1`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `DiffTests.mutation_test_2`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `identity`...
  testing ARRAY_TO_ARRAY_FUNCS + MATRIX_TO_MATRIX_FUNCS: `inv`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `+`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `-`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `*`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `/`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `\`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##11#17"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##12#18"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##13#19"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##14#20"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##15#21"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##16#22"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##23#29"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##24#30"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##25#31"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##26#32"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##27#33"))()`...
  testing BINARY_MATRIX_TO_MATRIX_FUNCS: `getfield(DiffTests, Symbol("##28#34"))()`...
done (took 976.886390377 seconds).
running HessianTests...
  testing MATRIX_TO_NUMBER_FUNCS: `LinearAlgebra.det`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_1`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_2`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_3`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.mat2num_4`...
  testing MATRIX_TO_NUMBER_FUNCS: `DiffTests.softmax`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_5`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_6`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.vec2num_7`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_1`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_2`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_3`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.rosenbrock_4`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.ackley`...
  testing VECTOR_TO_NUMBER_FUNCS: `DiffTests.self_weighted_logit`...
  testing VECTOR_TO_NUMBER_FUNCS: `first`...
done (took 135.970030773 seconds).
   Testing ReverseDiff tests passed 
