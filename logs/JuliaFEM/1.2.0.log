 Resolving package versions...
 Installed URIParser ──────────── v0.4.0
 Installed Blosc ──────────────── v0.5.1
 Installed FEMBasis ───────────── v0.2.0
 Installed CommonSubexpressions ─ v0.2.0
 Installed MortarContact2DAD ──── v0.2.0
 Installed HDF5 ───────────────── v0.12.5
 Installed BinaryProvider ─────── v0.5.8
 Installed Reexport ───────────── v0.2.0
 Installed FEMQuad ────────────── v0.3.2
 Installed TimerOutputs ───────── v0.5.3
 Installed Calculus ───────────── v0.5.1
 Installed OrderedCollections ─── v1.1.0
 Installed Compat ─────────────── v2.2.0
 Installed DiffRules ──────────── v0.1.0
 Installed FEMBeam ────────────── v0.3.1
 Installed HeatTransfer ───────── v0.3.1
 Installed NaNMath ────────────── v0.3.3
 Installed AsterReader ────────── v0.2.3
 Installed StaticArrays ───────── v0.12.1
 Installed DiffResults ────────── v0.0.4
 Installed Parameters ─────────── v0.12.0
 Installed LightXML ───────────── v0.8.1
 Installed CMake ──────────────── v1.1.2
 Installed AbaqusReader ───────── v0.2.2
 Installed MortarContact2D ────── v0.3.1
 Installed CMakeWrapper ───────── v0.2.3
 Installed FEMBase ────────────── v0.2.2
 Installed SpecialFunctions ───── v0.8.0
 Installed BinDeps ────────────── v0.8.10
 Installed Nullables ──────────── v0.0.8
 Installed Arpack ─────────────── v0.3.1
 Installed ForwardDiff ────────── v0.10.6
 Installed JuliaFEM ───────────── v0.5.1
  Updating `~/.julia/environments/v1.2/Project.toml`
  [f80590ac] + JuliaFEM v0.5.1
  Updating `~/.julia/environments/v1.2/Manifest.toml`
  [bc6b9049] + AbaqusReader v0.2.2
  [7d9fca2a] + Arpack v0.3.1
  [cb1a753d] + AsterReader v0.2.3
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [a74b3585] + Blosc v0.5.1
  [631607c0] + CMake v1.1.2
  [d5fb7624] + CMakeWrapper v0.2.3
  [49dc2e85] + Calculus v0.5.1
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [fbcbbc08] + FEMBase v0.2.2
  [353fb843] + FEMBasis v0.2.0
  [962f5c4a] + FEMBeam v0.3.1
  [be8e8821] + FEMQuad v0.3.2
  [f6369f11] + ForwardDiff v0.10.6
  [f67ccb44] + HDF5 v0.12.5
  [4030f512] + HeatTransfer v0.3.1
  [f80590ac] + JuliaFEM v0.5.1
  [9c8b4983] + LightXML v0.8.1
  [048d6160] + MortarContact2D v0.3.1
  [c1673bdb] + MortarContact2DAD v0.2.0
  [77ba4419] + NaNMath v0.3.3
  [4d1e1d77] + Nullables v0.0.8
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [189a3867] + Reexport v0.2.0
  [276daf66] + SpecialFunctions v0.8.0
  [90137ffa] + StaticArrays v0.12.1
  [a759f4b9] + TimerOutputs v0.5.3
  [30578b45] + URIParser v0.4.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building CMake ───────────→ `~/.julia/packages/CMake/nSK2r/deps/build.log`
  Building Blosc ───────────→ `~/.julia/packages/Blosc/lzFr0/deps/build.log`
  Building HDF5 ────────────→ `~/.julia/packages/HDF5/Zh9on/deps/build.log`
  Building LightXML ────────→ `~/.julia/packages/LightXML/W8FVT/deps/build.log`
  Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
  Building Arpack ──────────→ `~/.julia/packages/Arpack/cu5By/deps/build.log`
   Testing JuliaFEM
 Resolving package versions...
    Status `/tmp/jl_9KVWhO/Manifest.toml`
  [bc6b9049] AbaqusReader v0.2.2
  [7d9fca2a] Arpack v0.3.1
  [cb1a753d] AsterReader v0.2.3
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [a74b3585] Blosc v0.5.1
  [631607c0] CMake v1.1.2
  [d5fb7624] CMakeWrapper v0.2.3
  [49dc2e85] Calculus v0.5.1
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [fbcbbc08] FEMBase v0.2.2
  [353fb843] FEMBasis v0.2.0
  [962f5c4a] FEMBeam v0.3.1
  [be8e8821] FEMQuad v0.3.2
  [f6369f11] ForwardDiff v0.10.6
  [f67ccb44] HDF5 v0.12.5
  [4030f512] HeatTransfer v0.3.1
  [f80590ac] JuliaFEM v0.5.1
  [9c8b4983] LightXML v0.8.1
  [048d6160] MortarContact2D v0.3.1
  [c1673bdb] MortarContact2DAD v0.2.0
  [77ba4419] NaNMath v0.3.3
  [4d1e1d77] Nullables v0.0.8
  [bac558e1] OrderedCollections v1.1.0
  [d96e819e] Parameters v0.12.0
  [189a3867] Reexport v0.2.0
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.12.1
  [a759f4b9] TimerOutputs v0.5.3
  [30578b45] URIParser v0.4.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.0625)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.333333, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.333333, 0.333333)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.333333, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.333333, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.333333, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.0123457)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0.5, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.125, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.125)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.125, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.25, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.25)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.25, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -1, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, -1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0, 0, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :^, 0, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, -0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, -0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 0.5, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 4, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 3, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 3)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 3, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 2, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 2, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 4)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 0)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :*, 1, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 8)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :-, 0, 1)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :/, 1, 2)
  ** incremental compilation may be fatally broken for this module **

WARNING: eval into closed module Calculus:
Expr(:call, :+, 0.5)
  ** incremental compilation may be fatally broken for this module **

WARNING: using FEMBasis.interpolate in module FEMBase conflicts with an existing identifier.
WARNING: could not import Base.start into JuliaFEM
WARNING: could not import Base.next into JuliaFEM
WARNING: could not import Base.done into JuliaFEM
WARNING: could not import Base.endof into JuliaFEM
[ Info: Creating a new boundary problem of type Dirichlet, having name `test problem 1` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
┌ Warning: Assemble problem test problem 1: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem test problem 1 at time 0.0 automatically.
[ Info: Creating a new boundary problem of type Dirichlet, having name `test problem 2` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `quadratic 1` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
┌ Warning: Assemble problem quadratic 1: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem quadratic 1 at time 0.0 automatically.
[ Info: Creating a new boundary problem of type Dirichlet, having name `quadratic 2` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `test boundary` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
┌ Warning: Assemble problem test boundary: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem test boundary at time 0.0 automatically.
[ Info: Creating a new problem of type Elasticity, having name `block` and dimension 2 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry boundary conditions` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 2 elements.
[ Info: Adding 2 elements to problem `symmetry boundary conditions`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `block` to analysis `Linear Analysis`.
[ Info: Adding problem `symmetry boundary conditions` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 2.36 seconds using solver 1. Solution norms (||u||, ||la||): (2.98142396999972, 610.9402589451771).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Creating a new problem of type Elasticity, having name `block` and dimension 2 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `bc` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 3 elements.
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `block` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `bc` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.23 seconds using solver 1. Solution norms (||u||, ||la||): (0.7453559924999299, 144.0).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.08729713347982065, 270.66666666666663).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #3
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.010923895243150612, 270.00976359154987).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #4
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.00016678488540692948, 270.00000225354097).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #5
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (3.863455555764375e-8, 270.0000000000001).
[ Info: 
[ Info: Converged in 5 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Mesh parsed from Code Aster file test_elasticity_2d_nonlinear_with_surface_load/BLOCK_1elem.med.
[ Info: Mesh contains 4 nodes and 5 elements.
[ Info: Element set LEFT contains 1 elements (1 x Seg2).
[ Info: Element set BOTTOM contains 1 elements (1 x Seg2).
[ Info: Element set RIGHT contains 1 elements (1 x Seg2).
[ Info: Element set TOP contains 1 elements (1 x Seg2).
[ Info: Element set BLOCK contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Elasticity, having name `BLOCK` and dimension 2 dofs/node.
[ Info: Created 1 elements (1 x Quad4) from element set: BLOCK.
[ Info: Updating field `youngs modulus` => 288.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Updating field `displacement load 2` => 576.0 for 1 elements.
[ Info: Adding 1 elements to problem `BLOCK`
[ Info: Created 1 elements (1 x Seg2) from element set: TOP.
[ Info: Updating field `displacement traction force 2` => 288.0 for 1 elements.
[ Info: Adding 1 elements to problem `BLOCK`
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry bc` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Seg2) from element set: LEFT.
[ Info: Created 1 elements (1 x Seg2) from element set: BOTTOM.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `symmetry bc`
[ Info: Adding 1 elements to problem `symmetry bc`
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `BLOCK` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `symmetry bc` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (2.98142396999972, 610.9402589451771).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (1.0760887383677433, 610.9402589451765).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #3
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.49650668830160627, 610.9402589451771).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #4
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.3611487840502326, 610.940258945177).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #5
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0800470736727088, 610.940258945177).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #6
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.015364675211315206, 610.940258945177).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #7
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0005088177702173789, 610.9402589451771).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #8
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (5.514780807708934e-7, 610.9402589451771).
[ Info: 
[ Info: Converged in 8 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Creating a new problem of type Elasticity, having name `[0x1] x [0x1] block` and dimension 2 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `block` and dimension 2 dofs/node.
[ Info: Updating field `geometry` for 2 elements.
[ Info: Creating a new problem of type Elasticity, having name `solve continuum block` and dimension 3 dofs/node.
[ Info: Updating field `geometry` for 3 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry boundary conditions` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `solve continuum block` to analysis `Linear Analysis`.
[ Info: Adding problem `symmetry boundary conditions` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (4.422166387140534, 431.99999999999994).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 13 nodes and 56 elements.
[ Info: Element set FACE3 contains 4 elements (4 x Tri3).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 2 elements (2 x Tri3).
[ Info: Element set FACE4 contains 4 elements (4 x Tri3).
[ Info: Element set ROD contains 24 elements (24 x Tet4).
[ Info: Element set FACE6 contains 4 elements (4 x Tri3).
[ Info: Element set FACE1 contains 2 elements (2 x Tri3).
[ Info: Element set FACE5 contains 4 elements (4 x Tri3).
[ Info: Creating a new problem of type Elasticity, having name `rod` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `trac` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 24 elements (24 x Tet4) from element set: ROD.
[ Info: Created 2 elements (2 x Tri3) from element set: FACE2.
[ Info: Created 2 elements (2 x Tri3) from element set: FACE1.
[ Info: Created 4 elements (4 x Tri3) from element set: FACE3.
[ Info: Created 4 elements (4 x Tri3) from element set: FACE5.
[ Info: Updating field `youngs modulus` => 96.0 for 24 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 24 elements.
[ Info: Updating field `displacement traction force 1` => 96.0 for 2 elements.
[ Info: Updating field `displacement 1` => 0.0 for 2 elements.
[ Info: Updating field `displacement 2` => 0.0 for 4 elements.
[ Info: Updating field `displacement 3` => 0.0 for 4 elements.
[ Info: Adding 24 elements to problem `rod`
[ Info: Adding 2 elements to problem `trac`
[ Info: Adding 2 elements to problem `fixed`
[ Info: Adding 4 elements to problem `fixed`
[ Info: Adding 4 elements to problem `fixed`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `trac` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.44951725249185215, 0.005059644256269488).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 51 nodes and 53 elements.
[ Info: Element set FACE3 contains 6 elements (6 x Tri6).
[ Info: Element set OTHER contains 16 elements (16 x Seg3).
[ Info: Element set FACE2 contains 2 elements (2 x Tri6).
[ Info: Element set FACE4 contains 4 elements (4 x Tri6).
[ Info: Element set ROD contains 15 elements (15 x Tet10).
[ Info: Element set FACE6 contains 4 elements (4 x Tri6).
[ Info: Element set FACE1 contains 2 elements (2 x Tri6).
[ Info: Element set FACE5 contains 4 elements (4 x Tri6).
[ Info: Creating a new problem of type Elasticity, having name `rod` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `trac` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 15 elements (15 x Tet10) from element set: ROD.
[ Info: Created 2 elements (2 x Tri6) from element set: FACE2.
[ Info: Created 2 elements (2 x Tri6) from element set: FACE1.
[ Info: Created 6 elements (6 x Tri6) from element set: FACE3.
[ Info: Created 4 elements (4 x Tri6) from element set: FACE5.
[ Info: Updating field `youngs modulus` => 96.0 for 15 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 15 elements.
[ Info: Updating field `displacement traction force 1` => 96.0 for 2 elements.
[ Info: Updating field `displacement 1` => 0.0 for 2 elements.
[ Info: Updating field `displacement 2` => 0.0 for 6 elements.
[ Info: Updating field `displacement 3` => 0.0 for 4 elements.
[ Info: Adding 15 elements to problem `rod`
[ Info: Adding 2 elements to problem `trac`
[ Info: Adding 2 elements to problem `fixed`
[ Info: Adding 6 elements to problem `fixed`
[ Info: Adding 4 elements to problem `fixed`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `trac` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.8350577990642004, 0.004525483399593661).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 8 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad4).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 1 elements (1 x Quad4).
[ Info: Element set FACE4 contains 1 elements (1 x Quad4).
[ Info: Element set ROD contains 1 elements (1 x Hex8).
[ Info: Element set FACE6 contains 1 elements (1 x Quad4).
[ Info: Element set FACE1 contains 1 elements (1 x Quad4).
[ Info: Element set FACE5 contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Elasticity, having name `rod` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `trac` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Hex8) from element set: ROD.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE1.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE5.
[ Info: Updating field `youngs modulus` => 96.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Updating field `displacement traction force 1` => 96.0 for 1 elements.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Updating field `displacement 3` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `trac`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `trac` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.4001110956832897, 0.0047999999999998955).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 20 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad8).
[ Info: Element set OTHER contains 12 elements (12 x Seg3).
[ Info: Element set FACE2 contains 1 elements (1 x Quad8).
[ Info: Element set FACE4 contains 1 elements (1 x Quad8).
[ Info: Element set ROD contains 1 elements (1 x Hex20).
[ Info: Element set FACE6 contains 1 elements (1 x Quad8).
[ Info: Element set FACE1 contains 1 elements (1 x Quad8).
[ Info: Element set FACE5 contains 1 elements (1 x Quad8).
[ Info: Creating a new problem of type Elasticity, having name `rod` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `trac` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Hex20) from element set: ROD.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE1.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE5.
[ Info: Updating field `youngs modulus` => 96.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Updating field `displacement traction force 1` => 96.0 for 1 elements.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Updating field `displacement 3` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `trac`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `trac` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.6001666435249465, 0.0065969690009882375).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 27 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad9).
[ Info: Element set OTHER contains 12 elements (12 x Seg3).
[ Info: Element set FACE2 contains 1 elements (1 x Quad9).
[ Info: Element set FACE4 contains 1 elements (1 x Quad9).
[ Info: Element set ROD contains 1 elements (1 x Hex27).
[ Info: Element set FACE6 contains 1 elements (1 x Quad9).
[ Info: Element set FACE1 contains 1 elements (1 x Quad9).
[ Info: Element set FACE5 contains 1 elements (1 x Quad9).
[ Info: Creating a new problem of type Elasticity, having name `rod` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `trac` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Hex27) from element set: ROD.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE1.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE5.
[ Info: Updating field `youngs modulus` => 96.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Updating field `displacement traction force 1` => 96.0 for 1 elements.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Updating field `displacement 3` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `trac`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Adding 1 elements to problem `fixed`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `trac` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.02 seconds using solver 1. Solution norms (||u||, ||la||): (0.6710067063748737, 0.004800000000000471).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Updating field `geometry` for 2 elements.
[ Info: Creating a new problem of type Elasticity, having name `solve continuum block` and dimension 3 dofs/node.
[ Info: Updating field `geometry` for 3 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry boundary conditions` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `solve continuum block` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `symmetry boundary conditions` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.23570226039551592, 50.00000000000001).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.04593107342977972, 50.0).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #3
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.008404937879933117, 50.0).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #4
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0014761401626468777, 50.0).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #5
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0002571038574920501, 49.99999999999999).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #6
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (4.4708441174340156e-5, 50.0).
[ Info: 
[ Info: Converged in 6 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/3d_block.med.
[ Info: Mesh contains 8 nodes and 19 elements.
[ Info: Element set LOAD contains 1 elements (1 x Quad4).
[ Info: Element set OTHER contains 14 elements (12 x Seg2, 2 x Quad4).
[ Info: Element set SYMXY contains 1 elements (1 x Quad4).
[ Info: Element set BLOCK contains 1 elements (1 x Hex8).
[ Info: Element set SYMXZ contains 1 elements (1 x Quad4).
[ Info: Element set SYMYZ contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Elasticity, having name `BLOCK` and dimension 3 dofs/node.
[ Info: Created 1 elements (1 x Hex8) from element set: BLOCK.
[ Info: Updating field `youngs modulus` => 288.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Updating field `displacement load 3` => 576.0 for 1 elements.
[ Info: Adding 1 elements to problem `BLOCK`
[ Info: Created 1 elements (1 x Quad4) from element set: LOAD.
[ Info: Updating field `displacement traction force 3` => 288.0 for 1 elements.
[ Info: Adding 1 elements to problem `BLOCK`
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry boundary condition` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Quad4) from element set: SYMYZ.
[ Info: Created 1 elements (1 x Quad4) from element set: SYMXZ.
[ Info: Created 1 elements (1 x Quad4) from element set: SYMXY.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Updating field `displacement 3` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `symmetry boundary condition`
[ Info: Adding 1 elements to problem `symmetry boundary condition`
[ Info: Adding 1 elements to problem `symmetry boundary condition`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `BLOCK` to analysis `Linear Analysis`.
[ Info: Adding problem `symmetry boundary condition` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (4.422166387140533, 431.99999999999994).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/3d_block.med.
[ Info: Mesh contains 8 nodes and 29 elements.
[ Info: Element set LOAD contains 2 elements (2 x Tri3).
[ Info: Element set OTHER contains 16 elements (12 x Seg2, 4 x Tri3).
[ Info: Element set SYMXY contains 2 elements (2 x Tri3).
[ Info: Element set BLOCK contains 5 elements (5 x Tet4).
[ Info: Element set SYMXZ contains 2 elements (2 x Tri3).
[ Info: Element set SYMYZ contains 2 elements (2 x Tri3).
[ Info: Creating a new problem of type Elasticity, having name `BLOCK` and dimension 3 dofs/node.
[ Info: Created 5 elements (5 x Tet4) from element set: BLOCK.
[ Info: Updating field `youngs modulus` => 288.0 for 5 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 5 elements.
[ Info: Adding 5 elements to problem `BLOCK`
[ Info: Created 2 elements (2 x Tri3) from element set: LOAD.
[ Info: Updating field `displacement traction force 3` => 288.0 for 2 elements.
[ Info: Adding 2 elements to problem `BLOCK`
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry boundary condition` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 2 elements (2 x Tri3) from element set: SYMYZ.
[ Info: Created 2 elements (2 x Tri3) from element set: SYMXZ.
[ Info: Created 2 elements (2 x Tri3) from element set: SYMXY.
[ Info: Updating field `displacement 1` => 0.0 for 2 elements.
[ Info: Updating field `displacement 2` => 0.0 for 2 elements.
[ Info: Updating field `displacement 3` => 0.0 for 2 elements.
[ Info: Adding 2 elements to problem `symmetry boundary condition`
[ Info: Adding 2 elements to problem `symmetry boundary condition`
[ Info: Adding 2 elements to problem `symmetry boundary condition`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `BLOCK` to analysis `Linear Analysis`.
[ Info: Adding problem `symmetry boundary condition` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (2.211083193570267, 151.78932768808227).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/3d_block.med.
[ Info: Mesh contains 26 nodes and 29 elements.
[ Info: Element set LOAD contains 2 elements (2 x Tri6).
[ Info: Element set OTHER contains 16 elements (4 x Tri6, 12 x Seg3).
[ Info: Element set SYMXY contains 2 elements (2 x Tri6).
[ Info: Element set BLOCK contains 5 elements (5 x Tet10).
[ Info: Element set SYMXZ contains 2 elements (2 x Tri6).
[ Info: Element set SYMYZ contains 2 elements (2 x Tri6).
[ Info: Creating a new problem of type Elasticity, having name `BLOCK` and dimension 3 dofs/node.
[ Info: Created 5 elements (5 x Tet10) from element set: BLOCK.
[ Info: Updating field `youngs modulus` => 288.0 for 5 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 5 elements.
[ Info: Adding 5 elements to problem `BLOCK`
[ Info: Created 2 elements (2 x Tri6) from element set: LOAD.
[ Info: Updating field `displacement traction force 3` => 288.0 for 2 elements.
[ Info: Adding 2 elements to problem `BLOCK`
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry boundary condition` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 2 elements (2 x Tri6) from element set: SYMYZ.
[ Info: Created 2 elements (2 x Tri6) from element set: SYMXZ.
[ Info: Created 2 elements (2 x Tri6) from element set: SYMXY.
[ Info: Updating field `displacement 1` => 0.0 for 2 elements.
[ Info: Updating field `displacement 2` => 0.0 for 2 elements.
[ Info: Updating field `displacement 3` => 0.0 for 2 elements.
[ Info: Adding 2 elements to problem `symmetry boundary condition`
[ Info: Adding 2 elements to problem `symmetry boundary condition`
[ Info: Adding 2 elements to problem `symmetry boundary condition`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `BLOCK` to analysis `Linear Analysis`.
[ Info: Adding problem `symmetry boundary condition` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (3.6666666666666674, 135.76450198781714).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 50 nodes and 147 elements.
[ Info: Element set FACE3 contains 5 elements (5 x Quad4).
[ Info: Element set OTHER contains 33 elements (33 x Seg2).
[ Info: Element set INNER contains 33 elements (33 x Tri3).
[ Info: Element set FACE2 contains 5 elements (5 x Quad4).
[ Info: Element set OUTER contains 33 elements (33 x Tri3).
[ Info: Element set HOLLOWSPHERE8 contains 33 elements (33 x Wedge6).
[ Info: Element set FACE1 contains 5 elements (5 x Quad4).
[ Info: Creating a new problem of type Elasticity, having name `hollow sphere 1/8 model` and dimension 3 dofs/node.
[ Info: Created 33 elements (33 x Wedge6) from element set: HOLLOWSPHERE8.
[ Info: Updating field `youngs modulus` => 24580.0 for 33 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 33 elements.
[ Info: Adding 33 elements to problem `hollow sphere 1/8 model`
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry bc` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 5 elements (5 x Quad4) from element set: FACE1.
[ Info: Updating field `displacement 3` => 0.0 for 5 elements.
[ Info: Created 5 elements (5 x Quad4) from element set: FACE2.
[ Info: Updating field `displacement 2` => 0.0 for 5 elements.
[ Info: Created 5 elements (5 x Quad4) from element set: FACE3.
[ Info: Updating field `displacement 1` => 0.0 for 5 elements.
[ Info: Adding 5 elements to problem `symmetry bc`
[ Info: Adding 5 elements to problem `symmetry bc`
[ Info: Adding 5 elements to problem `symmetry bc`
[ Info: Creating a new problem of type Elasticity, having name `pressure load` and dimension 3 dofs/node.
[ Info: Created 33 elements (33 x Tri3) from element set: OUTER.
[ Info: Updating field `surface pressure` => 7317.0 for 33 elements.
[ Info: Adding 33 elements to problem `pressure load`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `hollow sphere 1/8 model` to analysis `Linear Analysis`.
[ Info: Adding problem `pressure load` to analysis `Linear Analysis`.
[ Info: Adding problem `symmetry bc` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 3 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (6.599672759064247, 2954.8487203443724).
[ Info: 
[ Info: Postprocessing 3 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mass matrix for least-squares fit is assembled. Total volume to fit: 0.1356515537988115
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/geometry/3d_pyr/Pyr5.med.
[ Info: Mesh contains 5 nodes and 6 elements.
[ Info: Element set OTHER contains 4 elements (4 x Tri3).
[ Info: Element set Pyr5 contains 1 elements (1 x Pyr5).
[ Info: Element set baseQuad contains 1 elements (1 x Quad4).
[ Info: Created 1 elements (1 x Pyr5) from element set: Pyr5.
[ Info: Created 1 elements (1 x Quad4) from element set: baseQuad.
[ Info: Updating field `youngs modulus` => 288.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Creating a new problem of type Elasticity, having name `solve continuum block` and dimension 3 dofs/node.
[ Info: Adding 1 elements to problem `solve continuum block`
[ Info: Creating a new boundary problem of type Dirichlet, having name `Boundary conditions` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Adding 1 elements to problem `Boundary conditions`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `solve continuum block` to analysis `Linear Analysis`.
[ Info: Adding problem `Boundary conditions` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.1199299724942399, 9.962429422585638).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/geometry/2d_block/BLOCK_1elem.med.
[ Info: Mesh contains 4 nodes and 5 elements.
[ Info: Element set LEFT contains 1 elements (1 x Seg2).
[ Info: Element set BOTTOM contains 1 elements (1 x Seg2).
[ Info: Element set RIGHT contains 1 elements (1 x Seg2).
[ Info: Element set TOP contains 1 elements (1 x Seg2).
[ Info: Element set BLOCK contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Elasticity, having name `BLOCK` and dimension 2 dofs/node.
[ Info: Created 1 elements (1 x Quad4) from element set: BLOCK.
[ Info: Updating field `youngs modulus` => 288.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Created 1 elements (1 x Seg2) from element set: TOP.
[ Info: Updating field `displacement traction force 2` => 324.0 for 1 elements.
[ Info: Adding 1 elements to problem `BLOCK`
[ Info: Adding 1 elements to problem `BLOCK`
[ Info: Creating a new boundary problem of type Dirichlet, having name `symmetry bc 23` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Seg2) from element set: LEFT.
[ Info: Created 1 elements (1 x Seg2) from element set: BOTTOM.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `symmetry bc 23`
[ Info: Adding 1 elements to problem `symmetry bc 23`
[ Info: Creating a new analysis of type Linear with name `LinearSolver`.
[ Info: Running linear quasistatic analysis `LinearSolver` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (1.5811388300841893, 229.1025971044414).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Updating field `geometry` for 3 elements.
[ Info: Creating a new problem of type Elasticity, having name `solve continuum block` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `Boundary conditions` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `solve continuum block` to analysis `Linear Analysis`.
[ Info: Adding problem `Boundary conditions` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.1199299724942399, 9.962429422585638).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Creating a new problem of type Elasticity, having name `tet4` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Heat, having name `tet10` and dimension 1 dofs/node.
[ Info: 1 of 1 was constant metric.
[ Info: Creating a new problem of type Elasticity, having name `tet10` and dimension 3 dofs/node.
[ Info: Updating field `geometry` for 2 elements.
[ Info: Creating a new problem of type Elasticity, having name `tetra` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `bc` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `tetra` to analysis `Linear Analysis`.
[ Info: Adding problem `bc` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.10890135046100853, 17.938554443911865).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (2.411395439210158, 650.3060503975599).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Creating a new problem of type PlaneHeat, having name `one element heat problem` and dimension 1 dofs/node.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 8 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad4).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 1 elements (1 x Quad4).
[ Info: Element set FACE4 contains 1 elements (1 x Quad4).
[ Info: Element set ROD contains 1 elements (1 x Hex8).
[ Info: Element set FACE6 contains 1 elements (1 x Quad4).
[ Info: Element set FACE1 contains 1 elements (1 x Quad4).
[ Info: Element set FACE5 contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Created 1 elements (1 x Hex8) from element set: ROD.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE4.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE5.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE6.
[ Info: Updating field `thermal conductivity` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 20.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 1 elements.
[ Info: Updating field `external temperature` => 30.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 40.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 40.0 for 1 elements.
[ Info: Updating field `external temperature` => 50.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 30.0 for 1 elements.
[ Info: Updating field `external temperature` => 60.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 20.0 for 1 elements.
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `rod`
[ Info: Adding 1 elements to problem `rod`
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (208.91632454604706, 3.359512518297756).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 10 nodes and 11 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Tri6).
[ Info: Element set OTHER contains 6 elements (6 x Seg3).
[ Info: Element set TET contains 1 elements (1 x Tet10).
[ Info: Element set FACE2 contains 1 elements (1 x Tri6).
[ Info: Element set FACE4 contains 1 elements (1 x Tri6).
[ Info: Element set FACE1 contains 1 elements (1 x Tri6).
[ Info: Creating a new problem of type Heat, having name `tet` and dimension 1 dofs/node.
[ Info: Created 1 elements (1 x Tet10) from element set: TET.
[ Info: Updating field `thermal conductivity` => 50.0 for 1 elements.
[ Info: Adding 1 elements to problem `tet`
[ Info: Creating a new problem of type Heat, having name `face 4` and dimension 1 dofs/node.
[ Info: Created 1 elements (1 x Tri6) from element set: FACE4.
[ Info: Updating field `external temperature` => 20.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 1 elements.
[ Info: Adding 1 elements to problem `face 4`
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed face 3` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 1 elements (1 x Tri6) from element set: FACE2.
[ Info: Updating field `temperature 1` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `fixed face 3`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `tet` to analysis `Linear Analysis`.
[ Info: Adding problem `face 4` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed face 3` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 3 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (22.861016321050318, 372.5161577431232).
[ Info: 
[ Info: Postprocessing 3 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 13 nodes and 56 elements.
[ Info: Element set FACE3 contains 4 elements (4 x Tri3).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 2 elements (2 x Tri3).
[ Info: Element set FACE4 contains 4 elements (4 x Tri3).
[ Info: Element set ROD contains 24 elements (24 x Tet4).
[ Info: Element set FACE6 contains 4 elements (4 x Tri3).
[ Info: Element set FACE1 contains 2 elements (2 x Tri3).
[ Info: Element set FACE5 contains 4 elements (4 x Tri3).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 26 elements (24 x Tet4, 2 x Tri3) from element set: ROD, FACE2.
[ Info: Created 2 elements (2 x Tri3) from element set: FACE1.
[ Info: Updating field `thermal conductivity` => 100.0 for 26 elements.
[ Info: Updating field `external temperature` => 0.0 for 26 elements.
[ Info: Updating field `heat transfer coefficient` => 1000.0 for 26 elements.
[ Info: Updating field `temperature 1` => 100.0 for 2 elements.
[ Info: Adding 26 elements to problem `rod`
[ Info: Adding 2 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (263.63368290359904, 1.7568209223156543).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 51 nodes and 53 elements.
[ Info: Element set FACE3 contains 6 elements (6 x Tri6).
[ Info: Element set OTHER contains 16 elements (16 x Seg3).
[ Info: Element set FACE2 contains 2 elements (2 x Tri6).
[ Info: Element set FACE4 contains 4 elements (4 x Tri6).
[ Info: Element set ROD contains 15 elements (15 x Tet10).
[ Info: Element set FACE6 contains 4 elements (4 x Tri6).
[ Info: Element set FACE1 contains 2 elements (2 x Tri6).
[ Info: Element set FACE5 contains 4 elements (4 x Tri6).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 17 elements (15 x Tet10, 2 x Tri6) from element set: ROD, FACE2.
[ Info: Created 2 elements (2 x Tri6) from element set: FACE1.
[ Info: Updating field `thermal conductivity` => 100.0 for 17 elements.
[ Info: Updating field `external temperature` => 0.0 for 17 elements.
[ Info: Updating field `heat transfer coefficient` => 1000.0 for 17 elements.
[ Info: Updating field `temperature 1` => 100.0 for 2 elements.
[ Info: Adding 17 elements to problem `rod`
[ Info: Adding 2 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.02 seconds using solver 1. Solution norms (||u||, ||la||): (515.522927608828, 1.5713484026214743).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 8 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad4).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 1 elements (1 x Quad4).
[ Info: Element set FACE4 contains 1 elements (1 x Quad4).
[ Info: Element set ROD contains 1 elements (1 x Hex8).
[ Info: Element set FACE6 contains 1 elements (1 x Quad4).
[ Info: Element set FACE1 contains 1 elements (1 x Quad4).
[ Info: Element set FACE5 contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 2 elements (1 x Quad4, 1 x Hex8) from element set: ROD, FACE2.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE1.
[ Info: Updating field `thermal conductivity` => 100.0 for 2 elements.
[ Info: Updating field `external temperature` => 0.0 for 2 elements.
[ Info: Updating field `heat transfer coefficient` => 1000.0 for 2 elements.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 2 elements to problem `rod`
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (210.81851067789256, 1.6666666666665648).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 20 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad8).
[ Info: Element set OTHER contains 12 elements (12 x Seg3).
[ Info: Element set FACE2 contains 1 elements (1 x Quad8).
[ Info: Element set FACE4 contains 1 elements (1 x Quad8).
[ Info: Element set ROD contains 1 elements (1 x Hex20).
[ Info: Element set FACE6 contains 1 elements (1 x Quad8).
[ Info: Element set FACE1 contains 1 elements (1 x Quad8).
[ Info: Element set FACE5 contains 1 elements (1 x Quad8).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 2 elements (1 x Hex20, 1 x Quad8) from element set: ROD, FACE2.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE1.
[ Info: Updating field `thermal conductivity` => 100.0 for 2 elements.
[ Info: Updating field `external temperature` => 0.0 for 2 elements.
[ Info: Updating field `heat transfer coefficient` => 1000.0 for 2 elements.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 2 elements to problem `rod`
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (326.59863237109295, 2.290614236454295).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 27 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad9).
[ Info: Element set OTHER contains 12 elements (12 x Seg3).
[ Info: Element set FACE2 contains 1 elements (1 x Quad9).
[ Info: Element set FACE4 contains 1 elements (1 x Quad9).
[ Info: Element set ROD contains 1 elements (1 x Hex27).
[ Info: Element set FACE6 contains 1 elements (1 x Quad9).
[ Info: Element set FACE1 contains 1 elements (1 x Quad9).
[ Info: Element set FACE5 contains 1 elements (1 x Quad9).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 2 elements (1 x Quad9, 1 x Hex27) from element set: ROD, FACE2.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE1.
[ Info: Updating field `thermal conductivity` => 100.0 for 2 elements.
[ Info: Updating field `external temperature` => 0.0 for 2 elements.
[ Info: Updating field `heat transfer coefficient` => 1000.0 for 2 elements.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 2 elements to problem `rod`
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (374.1657386774065, 1.666666666667157).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 13 nodes and 56 elements.
[ Info: Element set FACE3 contains 4 elements (4 x Tri3).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 2 elements (2 x Tri3).
[ Info: Element set FACE4 contains 4 elements (4 x Tri3).
[ Info: Element set ROD contains 24 elements (24 x Tet4).
[ Info: Element set FACE6 contains 4 elements (4 x Tri3).
[ Info: Element set FACE1 contains 2 elements (2 x Tri3).
[ Info: Element set FACE5 contains 4 elements (4 x Tri3).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Created 24 elements (24 x Tet4) from element set: ROD.
[ Info: Created 2 elements (2 x Tri3) from element set: FACE2.
[ Info: Created 4 elements (4 x Tri3) from element set: FACE3.
[ Info: Created 4 elements (4 x Tri3) from element set: FACE4.
[ Info: Created 4 elements (4 x Tri3) from element set: FACE5.
[ Info: Created 4 elements (4 x Tri3) from element set: FACE6.
[ Info: Updating field `thermal conductivity` => 50.0 for 24 elements.
[ Info: Updating field `external temperature` => 20.0 for 2 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 2 elements.
[ Info: Updating field `external temperature` => 30.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 50.0 for 4 elements.
[ Info: Updating field `external temperature` => 40.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 40.0 for 4 elements.
[ Info: Updating field `external temperature` => 50.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 30.0 for 4 elements.
[ Info: Updating field `external temperature` => 60.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 20.0 for 4 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 2 elements (2 x Tri3) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 2 elements.
[ Info: Adding 2 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (260.1813301408718, 3.367135048398736).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 8 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad4).
[ Info: Element set OTHER contains 12 elements (12 x Seg2).
[ Info: Element set FACE2 contains 1 elements (1 x Quad4).
[ Info: Element set FACE4 contains 1 elements (1 x Quad4).
[ Info: Element set ROD contains 1 elements (1 x Hex8).
[ Info: Element set FACE6 contains 1 elements (1 x Quad4).
[ Info: Element set FACE1 contains 1 elements (1 x Quad4).
[ Info: Element set FACE5 contains 1 elements (1 x Quad4).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Created 1 elements (1 x Hex8) from element set: ROD.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE4.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE5.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE6.
[ Info: Updating field `thermal conductivity` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 20.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 1 elements.
[ Info: Updating field `external temperature` => 30.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 40.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 40.0 for 1 elements.
[ Info: Updating field `external temperature` => 50.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 30.0 for 1 elements.
[ Info: Updating field `external temperature` => 60.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 20.0 for 1 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 1 elements (1 x Quad4) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (208.91632454604706, 3.359512518297756).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 20 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad8).
[ Info: Element set OTHER contains 12 elements (12 x Seg3).
[ Info: Element set FACE2 contains 1 elements (1 x Quad8).
[ Info: Element set FACE4 contains 1 elements (1 x Quad8).
[ Info: Element set ROD contains 1 elements (1 x Hex20).
[ Info: Element set FACE6 contains 1 elements (1 x Quad8).
[ Info: Element set FACE1 contains 1 elements (1 x Quad8).
[ Info: Element set FACE5 contains 1 elements (1 x Quad8).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Created 1 elements (1 x Hex20) from element set: ROD.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE4.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE5.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE6.
[ Info: Updating field `thermal conductivity` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 20.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 1 elements.
[ Info: Updating field `external temperature` => 30.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 40.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 40.0 for 1 elements.
[ Info: Updating field `external temperature` => 50.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 30.0 for 1 elements.
[ Info: Updating field `external temperature` => 60.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 20.0 for 1 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 1 elements (1 x Quad8) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (328.0709083604969, 2.41342772891574).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 27 nodes and 19 elements.
[ Info: Element set FACE3 contains 1 elements (1 x Quad9).
[ Info: Element set OTHER contains 12 elements (12 x Seg3).
[ Info: Element set FACE2 contains 1 elements (1 x Quad9).
[ Info: Element set FACE4 contains 1 elements (1 x Quad9).
[ Info: Element set ROD contains 1 elements (1 x Hex27).
[ Info: Element set FACE6 contains 1 elements (1 x Quad9).
[ Info: Element set FACE1 contains 1 elements (1 x Quad9).
[ Info: Element set FACE5 contains 1 elements (1 x Quad9).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Created 1 elements (1 x Hex27) from element set: ROD.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE2.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE3.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE4.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE5.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE6.
[ Info: Updating field `thermal conductivity` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 20.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 1 elements.
[ Info: Updating field `external temperature` => 30.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 50.0 for 1 elements.
[ Info: Updating field `external temperature` => 40.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 40.0 for 1 elements.
[ Info: Updating field `external temperature` => 50.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 30.0 for 1 elements.
[ Info: Updating field `external temperature` => 60.0 for 1 elements.
[ Info: Updating field `heat transfer coefficient` => 20.0 for 1 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 1 elements (1 x Quad9) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 1 elements.
[ Info: Adding 1 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (365.1380851858272, 2.0502807287148603).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/rod_short.med.
[ Info: Mesh contains 51 nodes and 53 elements.
[ Info: Element set FACE3 contains 6 elements (6 x Tri6).
[ Info: Element set OTHER contains 16 elements (16 x Seg3).
[ Info: Element set FACE2 contains 2 elements (2 x Tri6).
[ Info: Element set FACE4 contains 4 elements (4 x Tri6).
[ Info: Element set ROD contains 15 elements (15 x Tet10).
[ Info: Element set FACE6 contains 4 elements (4 x Tri6).
[ Info: Element set FACE1 contains 2 elements (2 x Tri6).
[ Info: Element set FACE5 contains 4 elements (4 x Tri6).
[ Info: Creating a new problem of type Heat, having name `rod` and dimension 1 dofs/node.
[ Info: Created 15 elements (15 x Tet10) from element set: ROD.
[ Info: Created 2 elements (2 x Tri6) from element set: FACE2.
[ Info: Created 6 elements (6 x Tri6) from element set: FACE3.
[ Info: Created 4 elements (4 x Tri6) from element set: FACE4.
[ Info: Created 4 elements (4 x Tri6) from element set: FACE5.
[ Info: Created 4 elements (4 x Tri6) from element set: FACE6.
[ Info: Updating field `thermal conductivity` => 50.0 for 15 elements.
[ Info: Updating field `external temperature` => 20.0 for 2 elements.
[ Info: Updating field `heat transfer coefficient` => 60.0 for 2 elements.
[ Info: Updating field `external temperature` => 30.0 for 6 elements.
[ Info: Updating field `heat transfer coefficient` => 50.0 for 6 elements.
[ Info: Updating field `external temperature` => 40.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 40.0 for 4 elements.
[ Info: Updating field `external temperature` => 50.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 30.0 for 4 elements.
[ Info: Updating field `external temperature` => 60.0 for 4 elements.
[ Info: Updating field `heat transfer coefficient` => 20.0 for 4 elements.
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support T=100` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 2 elements (2 x Tri6) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 2 elements.
[ Info: Adding 2 elements to problem `left support T=100`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod` to analysis `Linear Analysis`.
[ Info: Adding problem `left support T=100` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (469.1657841275927, 1.974890418009482).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 250 nodes and 1463 elements.
[ Info: Element set FACE3 contains 428 elements (428 x Tri3).
[ Info: Element set OTHER contains 348 elements (132 x Seg2, 216 x Tri3).
[ Info: Element set FACE2 contains 8 elements (8 x Tri3).
[ Info: Element set CYLINDER contains 644 elements (644 x Tet4).
[ Info: Element set INNER_LINE contains 27 elements (27 x Seg2).
[ Info: Element set FACE1 contains 8 elements (8 x Tri3).
[ Info: Created 644 elements (644 x Tet4) from element set: CYLINDER.
[ Info: Updating field `thermal conductivity` => 200.0 for 644 elements.
[ Info: Created 436 elements (436 x Tri3) from element set: FACE2, FACE3.
[ Info: Updating field `external temperature` => 20.0 for 436 elements.
[ Info: Updating field `heat transfer coefficient` => 1.0 for 436 elements.
[ Info: Created 8 elements (8 x Tri3) from element set: FACE1.
[ Info: Updating field `temperature 1` => 100.0 for 8 elements.
[ Info: Creating a new problem of type Heat, having name `rod of length 20` and dimension 1 dofs/node.
[ Info: Adding 644 elements to problem `rod of length 20`
[ Info: Creating a new problem of type Heat, having name `outer surface` and dimension 1 dofs/node.
[ Info: Adding 436 elements to problem `outer surface`
[ Info: Creating a new boundary problem of type Dirichlet, having name `homogeneous dirichlet boundary` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Adding 8 elements to problem `homogeneous dirichlet boundary`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `rod of length 20` to analysis `Linear Analysis`.
[ Info: Adding problem `outer surface` to analysis `Linear Analysis`.
[ Info: Adding problem `homogeneous dirichlet boundary` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 3 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (946.4392860377948, 1808.326118150902).
[ Info: 
[ Info: Postprocessing 3 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 35 nodes and 68 elements.
[ Info: Element set FACE3 contains 6 elements (6 x Seg2).
[ Info: Element set FACE2 contains 4 elements (4 x Seg2).
[ Info: Element set FACE4 contains 6 elements (6 x Seg2).
[ Info: Element set UNITSQUARE contains 48 elements (48 x Tri3).
[ Info: Element set FACE1 contains 4 elements (4 x Seg2).
[ Info: Creating a new problem of type PlaneHeat, having name `unit square, 6x4 triangular mesh` and dimension 1 dofs/node.
[ Info: Created 48 elements (48 x Tri3) from element set: UNITSQUARE.
[ Info: Updating field `thermal conductivity` => 1.0 for 48 elements.
[ Info: Updating field `heat source` => -6.0 for 48 elements.
[ Info: Adding 48 elements to problem `unit square, 6x4 triangular mesh`
[ Info: Creating a new boundary problem of type Dirichlet, having name `u₀(x,y) = 1 + x² + 2y²` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 20 elements (20 x Seg2) from element set: FACE1, FACE2, FACE3, FACE4.
[ Info: Updating field `temperature 1` for 20 elements.
[ Info: Adding 20 elements to problem `u₀(x,y) = 1 + x² + 2y²`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `unit square, 6x4 triangular mesh` to analysis `Linear Analysis`.
[ Info: Adding problem `u₀(x,y) = 1 + x² + 2y²` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (13.387750643179407, 1.8675779025845798).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 117 nodes and 678 elements.
[ Info: Element set OTHER contains 308 elements (140 x Seg2, 168 x Tri3).
[ Info: Element set RING2 contains 150 elements (150 x Tet4).
[ Info: Element set RING1_OUTER contains 40 elements (40 x Tri3).
[ Info: Element set RING1 contains 108 elements (108 x Tet4).
[ Info: Element set RING2_OUTER contains 40 elements (40 x Tri3).
[ Info: Element set RING1_INNER contains 32 elements (32 x Tri3).
[ Info: Element set RING2_INNER contains 40 elements (40 x Tri3).
[ Info: Creating a new problem of type Heat, having name `RINGS` and dimension 1 dofs/node.
[ Info: Created 108 elements (108 x Tet4) from element set: RING1.
[ Info: Created 150 elements (150 x Tet4) from element set: RING2.
[ Info: Updating field `thermal conductivity` => 1.0 for 108 elements.
[ Info: Updating field `thermal conductivity` => 1.0 for 150 elements.
[ Info: Adding 108 elements to problem `RINGS`
[ Info: Adding 150 elements to problem `RINGS`
[ Info: Creating a new boundary problem of type Dirichlet, having name `INNER SURFACE` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 32 elements (32 x Tri3) from element set: RING1_INNER.
[ Info: Updating field `temperature 1` => 1.0 for 32 elements.
[ Info: Adding 32 elements to problem `INNER SURFACE`
[ Info: Creating a new boundary problem of type Dirichlet, having name `OUTER SURFACE` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 40 elements (40 x Tri3) from element set: RING2_OUTER.
[ Info: Updating field `temperature 1` => 2.0 for 40 elements.
[ Info: Adding 40 elements to problem `OUTER SURFACE`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `RINGS` to analysis `Linear Analysis`.
[ Info: Adding problem `INNER SURFACE` to analysis `Linear Analysis`.
[ Info: Adding problem `OUTER SURFACE` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 3 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (17.36917362955274, 1.339288500170176).
[ Info: 
[ Info: Postprocessing 3 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: results: RESU____FLUX_NOEU, RESU____FLUX_ELGA, RESU____TEMP
[ Info: Creating a new problem of type PlaneHeat, having name `one element heat problem` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `one element heat problem` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (1.4142135623730956, 8.48528137423857).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (2.1553454989014754e-16, 8.48528137423857).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 1.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (1.4142135623730956, 16.97056274847714).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 1.0.
[ Info: Assembling 2 problems.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (4.3106909978029507e-16, 16.97056274847714).
[ Info: 
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `one element heat problem` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `fixed` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.02 seconds using solver 1. Solution norms (||u||, ||la||): (1.4142135623730956, 8.48528137423857).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (2.828427124746191, 8.48528137423857).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #3
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (3.310045537663031e-16, 8.48528137423857).
[ Info: 
[ Info: Converged in 3 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0, 8.48528137423857).
[ Info: 
[ Info: Converged in 1 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=1.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (1.4142135623730956, 16.97056274847714).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=1.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (4.3106909978029507e-16, 16.97056274847714).
[ Info: 
[ Info: Converged in 2 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=1.0
[ Info: --------------------------------------------------------------------------------
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0, 16.97056274847714).
[ Info: 
[ Info: Converged in 1 iterations.
[ Info: Postprocessing 2 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Updating field `geometry` for 2 elements.
[ Info: Updating field `displacement` for 2 elements.
[ Info: Creating a new problem of type Elasticity, having name `test problem` and dimension 3 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `boundary condition` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `test problem` to analysis `Modal Analysis`.
[ Info: Adding problem `boundary condition` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Warning: Assemble problem boundary condition: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem boundary condition at time 0.0 automatically.
[ Info: Assembly done!
[ Info: Eliminating boundary condition boundary condition from global system.
┌ Warning: Adjusting nev from 10 to 2
└ @ Arpack ~/.julia/packages/Arpack/cu5By/src/Arpack.jl:99
[ Info: Squared eigenvalues: [1.3333333333333333, 0.3333333333333333].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Info: Mass matrix for is already assembled, not assembling.
└   problem.name = "test problem"
[ Info: Assembly done!
[ Info: Eliminating boundary condition boundary condition from global system.
┌ Warning: Adjusting nev from 10 to 2
└ @ Arpack ~/.julia/packages/Arpack/cu5By/src/Arpack.jl:99
[ Info: Squared eigenvalues: [1.6666666666666665, 0.6666666666666669].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `density` => 6.0 for 2 elements.
[ Info: Updating field `thermal conductivity` => 36.0 for 2 elements.
[ Info: Updating field `temperature 1` => 0.0 for 2 elements.
[ Info: Creating a new problem of type PlaneHeat, having name `combined body` and dimension 1 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed ends` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `combined body` to analysis `Modal Analysis`.
[ Info: Adding problem `fixed ends` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Warning: Assemble problem fixed ends: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem fixed ends at time 0.0 automatically.
[ Info: Assembly done!
[ Info: Eliminating boundary condition fixed ends from global system.
┌ Warning: Adjusting nev from 10 to 1
└ @ Arpack ~/.julia/packages/Arpack/cu5By/src/Arpack.jl:99
[ Info: Squared eigenvalues: [1.0000000000000002].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 1365 nodes and 1463 elements.
[ Info: Element set FACE3 contains 428 elements (428 x Tri6).
[ Info: Element set OTHER contains 348 elements (216 x Tri6, 132 x Seg3).
[ Info: Element set FACE2 contains 8 elements (8 x Tri6).
[ Info: Element set CYLINDER contains 644 elements (644 x Tet10).
[ Info: Element set INNER_LINE contains 27 elements (27 x Seg3).
[ Info: Element set FACE1 contains 8 elements (8 x Tri6).
[ Info: Creating a new problem of type Elasticity, having name `rod` and dimension 3 dofs/node.
[ Info: Created 644 elements (644 x Tet10) from element set: CYLINDER.
[ Info: Updating field `youngs modulus` => 50475.5 for 644 elements.
[ Info: Updating field `poissons ratio` => 0.3 for 644 elements.
[ Info: Updating field `density` => 1.0 for 644 elements.
[ Info: Adding 644 elements to problem `rod`
[ Info: Creating a new boundary problem of type Dirichlet, having name `left support` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 8 elements (8 x Tri6) from element set: FACE1.
[ Info: Updating field `displacement 1` => 0.0 for 8 elements.
[ Info: Updating field `displacement 2` => 0.0 for 8 elements.
[ Info: Updating field `displacement 3` => 0.0 for 8 elements.
[ Info: Adding 8 elements to problem `left support`
[ Info: Creating a new boundary problem of type Dirichlet, having name `right support` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 8 elements (8 x Tri6) from element set: FACE2.
[ Info: Updating field `displacement 1` => 0.0 for 8 elements.
[ Info: Updating field `displacement 2` => 0.0 for 8 elements.
[ Info: Updating field `displacement 3` => 0.0 for 8 elements.
[ Info: Adding 8 elements to problem `right support`
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `rod` to analysis `Modal Analysis`.
[ Info: Adding problem `left support` to analysis `Modal Analysis`.
[ Info: Adding problem `right support` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Warning: Assemble problem left support: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem left support at time 0.0 automatically.
┌ Warning: Assemble problem right support: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem right support at time 0.0 automatically.
[ Info: 0 of 644 was constant metric.
[ Info: Assembly done!
[ Info: Eliminating boundary condition left support from global system.
[ Info: Eliminating boundary condition right support from global system.
[ Info: Squared eigenvalues: [36.831186115778515, 36.84804118306557, 250.94461858995408, 251.06578872167657, 479.58955839750735].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 18 nodes and 93 elements.
[ Info: Element set OTHER contains 37 elements (29 x Seg2, 8 x Tri3).
[ Info: Element set FACE_OUTER contains 16 elements (16 x Tri3).
[ Info: Element set CYLINDER contains 24 elements (24 x Tet4).
[ Info: Element set FACE_YZ1 contains 8 elements (8 x Tri3).
[ Info: Element set FACE_YZ2 contains 8 elements (8 x Tri3).
[ Info: Creating a new problem of type Elasticity, having name `CYLINDER` and dimension 3 dofs/node.
[ Info: Created 24 elements (24 x Tet4) from element set: CYLINDER.
[ Info: Updating field `youngs modulus` => 10000.0 for 24 elements.
[ Info: Updating field `poissons ratio` => 0.3 for 24 elements.
[ Info: Updating field `density` => 10.0 for 24 elements.
[ Info: Adding 24 elements to problem `CYLINDER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `bc` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 8 elements (8 x Tri3) from element set: FACE_YZ1.
[ Info: Updating field `displacement 1` => 0.0 for 8 elements.
[ Info: Updating field `displacement 2` => 0.0 for 8 elements.
[ Info: Updating field `displacement 3` => 0.0 for 8 elements.
[ Info: Adding 8 elements to problem `bc`
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `CYLINDER` to analysis `Modal Analysis`.
[ Info: Adding problem `bc` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Warning: Assemble problem bc: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem bc at time 0.0 automatically.
[ Info: Assembly done!
[ Info: Eliminating boundary condition bc from global system.
[ Info: Squared eigenvalues: [926.8407003917413, 950.5803207221803, 2744.7122177672195].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 250 nodes and 1463 elements.
[ Info: Element set FACE3 contains 428 elements (428 x Tri3).
[ Info: Element set OTHER contains 348 elements (132 x Seg2, 216 x Tri3).
[ Info: Element set FACE2 contains 8 elements (8 x Tri3).
[ Info: Element set CYLINDER contains 644 elements (644 x Tet4).
[ Info: Element set INNER_LINE contains 27 elements (27 x Seg2).
[ Info: Element set FACE1 contains 8 elements (8 x Tri3).
[ Info: Creating a new problem of type Elasticity, having name `CYLINDER` and dimension 3 dofs/node.
[ Info: Created 644 elements (644 x Tet4) from element set: CYLINDER.
[ Info: Updating field `youngs modulus` => 50475.5 for 644 elements.
[ Info: Updating field `poissons ratio` => 0.3 for 644 elements.
[ Info: Updating field `density` => 1.0 for 644 elements.
[ Info: Adding 644 elements to problem `CYLINDER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `bc` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 16 elements (16 x Tri3) from element set: FACE1, FACE2.
[ Info: Updating field `displacement 1` => 0.0 for 16 elements.
[ Info: Updating field `displacement 2` => 0.0 for 16 elements.
[ Info: Updating field `displacement 3` => 0.0 for 16 elements.
[ Info: Adding 16 elements to problem `bc`
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `CYLINDER` to analysis `Modal Analysis`.
[ Info: Adding problem `bc` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Warning: Assemble problem bc: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem bc at time 0.0 automatically.
[ Info: Assembly done!
[ Info: Eliminating boundary condition bc from global system.
[ Info: Squared eigenvalues: [56.649538895487915, 57.01876921737579, 373.0281093788823].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Creating a new problem of type Elasticity, having name `TET` and dimension 3 dofs/node.
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `TET` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
[ Info: 1 of 1 was constant metric.
[ Info: Assembly done!
┌ Warning: Adjusting nev from 30 to 29
└ @ Arpack ~/.julia/packages/Arpack/cu5By/src/Arpack.jl:99
[ Info: Squared eigenvalues: [-5.798300016058321e-16, 8.88977521562878e-16, -1.2750875283360942e-15, -3.3232156048606903e-15, 3.533731156932505e-15, -4.312598215430828e-15, 0.4014068316148568, 0.882480144000004, 1.318502329599794, 2.5583275668055574, 3.3537981336319604, 5.023710232371598, 7.719329971577823, 8.437330220455669, 11.052121027431227, 19.32624545230594, 26.094432345366457, 28.703280736367702, 51.581371998206286, 59.1421769975905, 83.35971744529046, 91.15066872524118, 121.68921060359159, 126.75274339269781, 157.9379882144072, 160.3440846391949, 205.63366324331733, 324.6080752785817, 468.3309164716062].
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 2 dofs/node.
[ Info: Created 1 elements (1 x Quad4) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 288.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Adding 1 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 2 dofs/node.
[ Info: Created 1 elements (1 x Quad4) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 1 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 1 elements.
[ Info: Adding 1 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Seg2) from element set: UPPER_TOP.
[ Info: Updating field `displacement 1` => -0.2 for 1 elements.
[ Info: Updating field `displacement 2` => -0.2 for 1 elements.
[ Info: Adding 1 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Seg2) from element set: LOWER_BOTTOM.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Updating field `displacement 2` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Contact2D, having name `LOWER_TO_UPPER` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 1 elements (1 x Seg2) from element set: LOWER_TOP.
[ Info: Created 1 elements (1 x Seg2) from element set: UPPER_BOTTOM.
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 1 elements.
[ Info: Updating field `tangent` for 1 elements.
[ Info: First contact iteration, initial contact state = AUTO
[ Info: Average weighted gap = 0.04999999999999999, std gap = 6.938893903907228e-18, automatically determined contact state = UNKNOWN
[ Info: # | A | I | St | Sl | gap | pres | comp
[ Info: 3 | 0 | 1 |  0 |  0 | 0.05 | 0.0 | -0.05
[ Info: 4 | 0 | 1 |  0 |  0 | 0.05 | 0.0 | -0.05
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.5656854249492381, 1.6758116906701664e-14).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 1 elements.
[ Info: Updating field `tangent` for 1 elements.
[ Info: # | A | I | St | Sl | gap | pres | comp
[ Info: 3 | 1 | 0 |  0 |  1 | -0.05 | 0.0 | 0.05
[ Info: 4 | 1 | 0 |  0 |  1 | -0.05 | 0.0 | 0.05
[ Info: Solving linear system.
[ Info: Solved linear system in 1.75 seconds using solver 3. Solution norms (||u||, ||la||): (0.10680004681646915, 52.822793375587395).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #3
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 1 elements.
[ Info: Updating field `tangent` for 1 elements.
[ Info: # | A | I | St | Sl | gap | pres | comp
[ Info: 3 | 1 | 0 |  0 |  1 | -0.0 | 30.375 | 30.375
[ Info: 4 | 1 | 0 |  0 |  1 | -0.0 | 30.375 | 30.375
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 3. Solution norms (||u||, ||la||): (8.454911246717735e-17, 52.822793375587445).
[ Info: 
[ Info: Converged in 3 iterations.
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Updating field `geometry` for 6 elements.
[ Info: Updating field `youngs modulus` => 96.0 for 2 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 2 elements.
[ Info: Creating a new problem of type Elasticity, having name `body1` and dimension 2 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `body2` and dimension 2 dofs/node.
[ Info: Creating a new boundary problem of type Dirichlet, having name `fixed` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Mortar2D, having name `interface` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `body1` to analysis `Linear Analysis`.
[ Info: Adding problem `body2` to analysis `Linear Analysis`.
[ Info: Adding problem `fixed` to analysis `Linear Analysis`.
[ Info: Adding problem `interface` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 4 problems.
[ Info: Updating field `normal` for 2 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 1. Solution norms (||u||, ||la||): (0.0, 0.0).
[ Info: 
[ Info: Postprocessing 4 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/block_2d.med.
[ Info: Mesh contains 24 nodes and 44 elements.
[ Info: Element set UPPER_BOTTOM contains 4 elements (4 x Seg2).
[ Info: Element set UPPER_RIGHT contains 2 elements (2 x Seg2).
[ Info: Element set UPPER_LEFT contains 2 elements (2 x Seg2).
[ Info: Element set LOWER_LEFT contains 2 elements (2 x Seg2).
[ Info: Element set UPPER_TOP contains 4 elements (4 x Seg2).
[ Info: Element set LOWER contains 8 elements (8 x Tri3).
[ Info: Element set UPPER contains 14 elements (14 x Tri3).
[ Info: Element set LOWER_RIGHT contains 2 elements (2 x Seg2).
[ Info: Element set LOWER_BOTTOM contains 3 elements (3 x Seg2).
[ Info: Element set LOWER_TOP contains 3 elements (3 x Seg2).
[ Info: Creating a new problem of type PlaneHeat, having name `upper` and dimension 1 dofs/node.
[ Info: Created 14 elements (14 x Tri3) from element set: UPPER.
[ Info: Updating field `thermal conductivity` => 1.0 for 14 elements.
[ Info: Adding 14 elements to problem `upper`
[ Info: Creating a new problem of type PlaneHeat, having name `lower` and dimension 1 dofs/node.
[ Info: Created 8 elements (8 x Tri3) from element set: LOWER.
[ Info: Updating field `thermal conductivity` => 1.0 for 8 elements.
[ Info: Adding 8 elements to problem `lower`
[ Info: Creating a new boundary problem of type Dirichlet, having name `upper boundary` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 4 elements (4 x Seg2) from element set: UPPER_TOP.
[ Info: Updating field `temperature 1` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `upper boundary`
[ Info: Creating a new boundary problem of type Dirichlet, having name `lower boundary` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 3 elements (3 x Seg2) from element set: LOWER_BOTTOM.
[ Info: Updating field `temperature 1` => 1.0 for 3 elements.
[ Info: Adding 3 elements to problem `lower boundary`
[ Info: Creating a new boundary problem of type Mortar2D, having name `interface between upper and lower block` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 3 elements (3 x Seg2) from element set: LOWER_TOP.
[ Info: Created 4 elements (4 x Seg2) from element set: UPPER_BOTTOM.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `upper` to analysis `Linear Analysis`.
[ Info: Adding problem `lower` to analysis `Linear Analysis`.
[ Info: Adding problem `upper boundary` to analysis `Linear Analysis`.
[ Info: Adding problem `lower boundary` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between upper and lower block` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Updating field `normal` for 3 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.3 seconds using solver 3. Solution norms (||u||, ||la||): (2.761340254296511, 2.1205017749999127).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/block_2d.med.
[ Info: Mesh contains 24 nodes and 44 elements.
[ Info: Element set UPPER_BOTTOM contains 4 elements (4 x Seg2).
[ Info: Element set UPPER_RIGHT contains 2 elements (2 x Seg2).
[ Info: Element set UPPER_LEFT contains 2 elements (2 x Seg2).
[ Info: Element set LOWER_LEFT contains 2 elements (2 x Seg2).
[ Info: Element set UPPER_TOP contains 4 elements (4 x Seg2).
[ Info: Element set LOWER contains 8 elements (8 x Tri3).
[ Info: Element set UPPER contains 14 elements (14 x Tri3).
[ Info: Element set LOWER_RIGHT contains 2 elements (2 x Seg2).
[ Info: Element set LOWER_BOTTOM contains 3 elements (3 x Seg2).
[ Info: Element set LOWER_TOP contains 3 elements (3 x Seg2).
[ Info: Creating a new problem of type Elasticity, having name `upper` and dimension 2 dofs/node.
[ Info: Created 14 elements (14 x Tri3) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 100.0 for 14 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 14 elements.
[ Info: Adding 14 elements to problem `upper`
[ Info: Creating a new problem of type Elasticity, having name `lower` and dimension 2 dofs/node.
[ Info: Created 8 elements (8 x Tri3) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 100.0 for 8 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 8 elements.
[ Info: Adding 8 elements to problem `lower`
[ Info: Creating a new boundary problem of type Dirichlet, having name `upper boundary` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 4 elements (4 x Seg2) from element set: UPPER_TOP.
[ Info: Updating field `displacement 2` => -0.1 for 4 elements.
[ Info: Adding 4 elements to problem `upper boundary`
[ Info: Creating a new boundary problem of type Dirichlet, having name `lower boundary` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 3 elements (3 x Seg2) from element set: LOWER_BOTTOM.
[ Info: Updating field `displacement 2` => 0.0 for 3 elements.
[ Info: Adding 3 elements to problem `lower boundary`
[ Info: Creating a new boundary problem of type Dirichlet, having name `fix model from lower left corner to prevent singularity` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 1 elements.
[ Info: Updating field `displacement 1` => 0.0 for 1 elements.
[ Info: Adding 1 elements to problem `fix model from lower left corner to prevent singularity`
[ Info: Creating a new boundary problem of type Mortar2D, having name `interface between upper and lower block` and dimension 2 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 3 elements (3 x Seg2) from element set: LOWER_TOP.
[ Info: Created 4 elements (4 x Seg2) from element set: UPPER_BOTTOM.
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `upper` to analysis `Linear Analysis`.
[ Info: Adding problem `lower` to analysis `Linear Analysis`.
[ Info: Adding problem `upper boundary` to analysis `Linear Analysis`.
[ Info: Adding problem `lower boundary` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between upper and lower block` to analysis `Linear Analysis`.
[ Info: Adding problem `fix model from lower left corner to prevent singularity` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 6 problems.
[ Info: Updating field `normal` for 3 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 3. Solution norms (||u||, ||la||): (0.3266440392800392, 21.20501774999913).
[ Info: 
[ Info: Postprocessing 6 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 563 nodes and 3302 elements.
[ Info: Element set CYLINDER_20_2 contains 1437 elements (1437 x Tet4).
[ Info: Element set OTHER contains 1493 elements (229 x Seg2, 1264 x Tri3).
[ Info: Element set CYLINDER_20_1 contains 308 elements (308 x Tet4).
[ Info: Element set CYLINDER_20_2_FACE1 contains 24 elements (24 x Tri3).
[ Info: Element set CYLINDER_20_1_FACE1 contains 8 elements (8 x Tri3).
[ Info: Element set CYLINDER_20_2_FACE2 contains 24 elements (24 x Tri3).
[ Info: Element set CYLINDER_20_1_FACE2 contains 8 elements (8 x Tri3).
[ Info: Creating a new problem of type Elasticity, having name `CYLINDER_20_1` and dimension 3 dofs/node.
[ Info: Creating a new problem of type Elasticity, having name `CYLINDER_20_2` and dimension 3 dofs/node.
[ Info: Created 308 elements (308 x Tet4) from element set: CYLINDER_20_1.
[ Info: Created 1437 elements (1437 x Tet4) from element set: CYLINDER_20_2.
[ Info: Updating field `youngs modulus` => 54475.45 for 308 elements.
[ Info: Updating field `poissons ratio` => 0.3 for 308 elements.
[ Info: Updating field `density` => 1.0 for 308 elements.
[ Info: Updating field `youngs modulus` => 54475.45 for 1437 elements.
[ Info: Updating field `poissons ratio` => 0.3 for 1437 elements.
[ Info: Updating field `density` => 1.0 for 1437 elements.
[ Info: Adding 308 elements to problem `CYLINDER_20_1`
[ Info: Adding 1437 elements to problem `CYLINDER_20_2`
[ Info: Creating a new boundary problem of type Dirichlet, having name `CYLINDER_20_1_FACE1` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Creating a new boundary problem of type Dirichlet, having name `CYLINDER_20_2_FACE2` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 8 elements (8 x Tri3) from element set: CYLINDER_20_1_FACE1.
[ Info: Created 24 elements (24 x Tri3) from element set: CYLINDER_20_2_FACE2.
[ Info: Updating field `displacement 1` => 0.0 for 8 elements.
[ Info: Updating field `displacement 2` => 0.0 for 8 elements.
[ Info: Updating field `displacement 3` => 0.0 for 8 elements.
[ Info: Updating field `displacement 1` => 0.0 for 24 elements.
[ Info: Updating field `displacement 2` => 0.0 for 24 elements.
[ Info: Updating field `displacement 3` => 0.0 for 24 elements.
[ Info: Adding 8 elements to problem `CYLINDER_20_1_FACE1`
[ Info: Adding 24 elements to problem `CYLINDER_20_2_FACE2`
[ Info: Creating a new boundary problem of type Mortar, having name `interface between bodies` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Created 8 elements (8 x Tri3) from element set: CYLINDER_20_1_FACE2.
[ Info: Created 24 elements (24 x Tri3) from element set: CYLINDER_20_2_FACE1.
[ Info: Updating field `master elements` for 8 elements.
[ Info: Creating a new analysis of type Modal with name `Modal Analysis`.
[ Info: Adding problem `CYLINDER_20_1` to analysis `Modal Analysis`.
[ Info: Adding problem `CYLINDER_20_2` to analysis `Modal Analysis`.
[ Info: Adding problem `CYLINDER_20_1_FACE1` to analysis `Modal Analysis`.
[ Info: Adding problem `CYLINDER_20_2_FACE2` to analysis `Modal Analysis`.
[ Info: Adding problem `interface between bodies` to analysis `Modal Analysis`.
[ Info: Starting natural frequency solver at time 0.0
[ Info: Assembling problems ...
┌ Warning: Assemble problem CYLINDER_20_1_FACE1: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem CYLINDER_20_1_FACE1 at time 0.0 automatically.
┌ Warning: Assemble problem CYLINDER_20_2_FACE2: seems that problem is uninitialized.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_dirichlet.jl:49
[ Info: Initializing problem CYLINDER_20_2_FACE2 at time 0.0 automatically.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 8 elements.
[ Info: Assembly done!
[ Info: Eliminating boundary condition CYLINDER_20_1_FACE1 from global system.
[ Info: Eliminating boundary condition CYLINDER_20_2_FACE2 from global system.
[ Info: Eliminating mesh tie constraint interface between bodies using static condensation
┌ Warning: Mortar matrix D is not diagonal. This might take a long time.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/solvers_modal.jl:48
[ Info: Squared eigenvalues: [55.03568405704594, 55.24016335732808, 368.2864881778468, 369.2277684140119, 870.1331985953183].
┌ Warning: Mortar matrix D is not diagonal. This might take a long time.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/solvers_modal.jl:48
┌ Warning: Mortar matrix D is not diagonal. This might take a long time.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/solvers_modal.jl:48
┌ Warning: Mortar matrix D is not diagonal. This might take a long time.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/solvers_modal.jl:48
┌ Warning: Mortar matrix D is not diagonal. This might take a long time.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/solvers_modal.jl:48
┌ Warning: Mortar matrix D is not diagonal. This might take a long time.
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/solvers_modal.jl:48
[ Info: Xdmf is not attached to solver, not writing output to a file.
[ Info: To write results to Xdmf file, attach Xdmf to Solver, i.e.
[ Info: add_results_writer!(solver, Xdmf("results"))
[ Info: Mesh parsed from Code Aster file /root/.julia/packages/JuliaFEM/DbhTT/test/testdata/primitives.med.
[ Info: Mesh contains 157 nodes and 762 elements.
[ Info: Element set OTHER contains 352 elements (184 x Seg2, 168 x Tri3).
[ Info: Element set RING2 contains 150 elements (150 x Tet4).
[ Info: Element set RING1_OUTER contains 40 elements (40 x Tri3).
[ Info: Element set RING1 contains 108 elements (108 x Tet4).
[ Info: Element set RING2_OUTER contains 40 elements (40 x Tri3).
[ Info: Element set RING1_INNER contains 32 elements (32 x Tri3).
[ Info: Element set RING2_INNER contains 40 elements (40 x Tri3).
[ Info: Creating a new problem of type Heat, having name `RING1` and dimension 1 dofs/node.
[ Info: Created 108 elements (108 x Tet4) from element set: RING1.
[ Info: Updating field `thermal conductivity` => 1.0 for 108 elements.
[ Info: Adding 108 elements to problem `RING1`
[ Info: Creating a new problem of type Heat, having name `RING2` and dimension 1 dofs/node.
[ Info: Created 150 elements (150 x Tet4) from element set: RING2.
[ Info: Updating field `thermal conductivity` => 1.0 for 150 elements.
[ Info: Adding 150 elements to problem `RING2`
[ Info: Creating a new boundary problem of type Dirichlet, having name `INNER SURFACE` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 32 elements (32 x Tri3) from element set: RING1_INNER.
[ Info: Updating field `temperature 1` => 1.0 for 32 elements.
[ Info: Adding 32 elements to problem `INNER SURFACE`
[ Info: Creating a new boundary problem of type Dirichlet, having name `OUTER SURFACE` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 40 elements (40 x Tri3) from element set: RING2_OUTER.
[ Info: Updating field `temperature 1` => 2.0 for 40 elements.
[ Info: Adding 40 elements to problem `OUTER SURFACE`
[ Info: Creating a new boundary problem of type Mortar, having name `interface between rings` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Created 40 elements (40 x Tri3) from element set: RING1_OUTER.
[ Info: Created 40 elements (40 x Tri3) from element set: RING2_INNER.
[ Info: Updating field `master elements` for 40 elements.
[ Info: Adding 40 elements to problem `interface between rings`
[ Info: Adding 40 elements to problem `interface between rings`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `RING1` to analysis `Linear Analysis`.
[ Info: Adding problem `RING2` to analysis `Linear Analysis`.
[ Info: Adding problem `INNER SURFACE` to analysis `Linear Analysis`.
[ Info: Adding problem `OUTER SURFACE` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between rings` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 40 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.0 seconds using solver 3. Solution norms (||u||, ||la||): (19.89766686495459, 31.64155668511358).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: No result writers are attached to analysis, not writing output.
[ Info: To write results to Xdmf file, attach Xdmf to analysis, i.e.
[ Info: xdmf_output = Xdmf("simulation_results")
[ Info: add_results_writer!(analysis, xdmf_output)
[ Info: Quasistatic linear analysis ready.
[ Info: results: RESU____FLUX_NOEU, RESU____FLUX_ELGA, RESU____TEMP
[ Info: Creating a new problem of type Heat, having name `foo` and dimension 1 dofs/node.
[ Info: Updating field `geometry` for 2 elements.
[ Info: Updating field `temperature` for 2 elements.
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 864.0 for 172 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => -0.4 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 2` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 1` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Contact, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: First contact iteration, initial contact state = AUTO
[ Info: Average weighted gap = 5.2963516956539435e-20, std gap = 7.046246387778365e-20, automatically determined contact state = ACTIVE
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 440 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 453 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 463 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 473 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 474 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 488 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 498 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 508 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 518 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 533 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 543 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 559 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 563 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 569 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 573 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: Solving linear system.
[ Info: Solved linear system in 0.12 seconds using solver 3. Solution norms (||u||, ||la||): (3.496118783505376, 693.9047326906295).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 440 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 453 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 463 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 473 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 474 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 488 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 498 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 508 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 518 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 533 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 543 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 559 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 563 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 569 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 573 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: Solving linear system.
[ Info: Solved linear system in 0.04 seconds using solver 3. Solution norms (||u||, ||la||): (1.0276553022259178e-14, 693.9047326906299).
[ Info: 
[ Info: Converged in 2 iterations.
[ Info: Postprocessing 7 problems.
[ Info: Updating field `contact pressure` for 50 elements.
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 864.0 for 172 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => -0.4 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 2` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 1` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Contact, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: First contact iteration, initial contact state = AUTO
[ Info: Average weighted gap = 5.2963516956539435e-20, std gap = 1.5534167923044294e-19, automatically determined contact state = ACTIVE
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 440 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 453 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 463 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 473 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 474 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 488 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 498 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 508 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 518 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 533 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 543 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 559 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 563 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 569 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 573 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: Solving linear system.
[ Info: Solved linear system in 0.05 seconds using solver 3. Solution norms (||u||, ||la||): (3.4961187835053766, 693.9047326906298).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 440 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 453 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 463 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 473 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 474 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 488 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 498 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 508 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 518 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 533 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 543 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 559 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 563 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 569 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 573 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: Solving linear system.
[ Info: Solved linear system in 0.06 seconds using solver 3. Solution norms (||u||, ||la||): (8.109230731211415e-15, 693.9047326906299).
[ Info: 
[ Info: Converged in 2 iterations.
[ Info: Postprocessing 7 problems.
[ Info: 607 nodes found
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 177 elements (177 x Tet10) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 864.0 for 177 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 177 elements.
[ Info: Adding 177 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet10) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => -0.4 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 2` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 1` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Contact, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: First contact iteration, initial contact state = AUTO
[ Info: Average weighted gap = 8.770439852951517e-20, std gap = 3.350198500381806e-19, automatically determined contact state = ACTIVE
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 440 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 442 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 453 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 454 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 463 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 464 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 473 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 474 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 476 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 488 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 489 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 498 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 499 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 508 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 509 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 518 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 519 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 528 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 533 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 534 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 543 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 544 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 553 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 558 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 559 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 560 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 561 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 562 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 563 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 564 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 565 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 566 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 567 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 568 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 569 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 570 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 571 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 572 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 573 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 574 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 575 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 576 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 577 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 578 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 579 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 580 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 581 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 582 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: Solving linear system.
[ Info: Solved linear system in 0.58 seconds using solver 3. Solution norms (||u||, ||la||): (7.932009800330599, 1210.2418858638575).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 440 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 442 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 453 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 454 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 463 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 464 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 473 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 474 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 476 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 488 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 489 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 498 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 499 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 508 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 509 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 518 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 519 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 528 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 533 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 534 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 543 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 544 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 553 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 558 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 559 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 560 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 561 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 562 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 563 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 564 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 565 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 566 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 567 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 568 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 569 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 570 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 571 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 572 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 573 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 574 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 575 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 576 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 577 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 578 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 579 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 580 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 581 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 582 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: Solving linear system.
[ Info: Solved linear system in 0.89 seconds using solver 3. Solution norms (||u||, ||la||): (1.4814864734945798e-9, 1210.2418902417867).
[ Info: 
[ Info: Converged in 2 iterations.
[ Info: Postprocessing 7 problems.
[ Info: 607 nodes found
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 177 elements (177 x Tet10) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 864.0 for 177 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 177 elements.
[ Info: Adding 177 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet10) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => -0.4 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 2` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 1` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Contact, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: First contact iteration, initial contact state = AUTO
[ Info: Average weighted gap = 2.212553888136071e-20, std gap = 8.570103521804998e-19, automatically determined contact state = ACTIVE
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 440 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 442 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 453 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 454 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 463 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 464 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 473 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 474 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 476 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 488 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 489 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 498 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 499 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 508 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 509 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 518 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 519 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 528 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 533 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 534 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 543 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 544 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 553 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 558 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 559 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 560 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 561 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 562 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 563 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 564 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 565 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 566 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 567 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 568 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 569 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 570 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 571 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 572 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 573 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 574 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 575 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 576 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 577 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 578 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 579 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 580 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 581 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 582 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: Solving linear system.
[ Info: Solved linear system in 1.11 seconds using solver 3. Solution norms (||u||, ||la||): (7.9320098003916195, 1210.2418905827974).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 440 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 442 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 453 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 454 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 463 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 464 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 473 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 474 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 476 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 488 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 489 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 498 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 499 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 508 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 509 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 518 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 519 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 528 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 533 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 534 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 543 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 544 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 553 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 558 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 559 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 560 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 561 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 562 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 563 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 564 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 565 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 566 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 567 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 568 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 569 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 570 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 571 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 572 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 573 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 574 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 575 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 576 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 577 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 578 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 579 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 580 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 581 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 582 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: Solving linear system.
[ Info: Solved linear system in 0.95 seconds using solver 3. Solution norms (||u||, ||la||): (5.863351725485487e-12, 1210.2418905819072).
[ Info: 
[ Info: Converged in 2 iterations.
[ Info: Postprocessing 7 problems.
[ Info: Creating a new problem of type Elasticity, having name `[0,1]³ elastic unit block` and dimension 3 dofs/node.
[ Info: Updating field `strain` for 1 elements.
[ Info: Updating field `stress` for 1 elements.
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Heat, having name `UPPER` and dimension 1 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `thermal conductivity` => 1.0 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: Creating a new problem of type Heat, having name `LOWER` and dimension 1 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `thermal conductivity` => 1.0 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `temperature 1` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `temperature 1` => 1.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Mortar, having name `interface between upper and lower block` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `interface between upper and lower block`
[ Info: Adding 32 elements to problem `interface between upper and lower block`
[ Info: Diagnosing Mortar interface...
[ Info: props.split_quadratic_slave_elements = true
[ Info: Number of slave elements in interface: 18
[ Info: Updating field `normal` for 18 elements.
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.05555777779999999
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [563, 573, 569]
[ Info: Auxiliary plane x0 = [0.44444333333333336, 0.44444333333333336, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 0.66667, 0.5], [0.33333, 0.33333, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.41667, 0.33333, 0.5], [0.33333, 0.33333, 0.5], [0.33333, 0.41667, 0.5]], N_P = 3, area of polygon = 0.0034727777999999975
[ Info: Centroid of polygon = [0.36111000000000004, 0.36111000000000004, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034727777998989277
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.41667, 0.5], [0.33333, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.33333, 0.5], [0.41667, 0.33333, 0.5]], N_P = 5, area of polygon = 0.024306111099999996
[ Info: Centroid of polygon = [0.4246025170254612, 0.4246025170254612, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.003802869421755166
[ Info: Cell 2 has area of 0.006283249243500326
[ Info: Cell 3 has area of 0.006283249243500326
[ Info: Cell 4 has area of 0.003802869421755166
[ Info: Cell 5 has area of 0.004133873768781625
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.33333, 0.5], [0.5, 0.5, 0.5], [0.66667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.5555566666666665, 0.38888666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.25, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.5, 0.5], [0.33333, 0.66667, 0.5], [0.33333, 0.5, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.38888666666666666, 0.5555566666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 1, shared vertex
[ Info: Area of slave element in contact: 0.05555777779838308, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.05555777779999999
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [559, 563, 569]
[ Info: Auxiliary plane x0 = [0.5555566666666667, 0.5555566666666667, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.33333, 0.66667, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.5, 0.5], [0.66667, 0.33333, 0.5], [0.66667, 0.5, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.6111133333333332, 0.44444333333333336, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.66667, 0.5], [0.5, 0.5, 0.5], [0.33333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.44444333333333336, 0.6111133333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.5, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.58333, 0.5], [0.66667, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.66667, 0.5], [0.58333, 0.66667, 0.5]], N_P = 5, area of polygon = 0.024306111099999996
[ Info: Centroid of polygon = [0.5753974829745387, 0.5753974829745389, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038028694217551668
[ Info: Cell 2 has area of 0.0062832492435003304
[ Info: Cell 3 has area of 0.006283249243500322
[ Info: Cell 4 has area of 0.0038028694217551624
[ Info: Cell 5 has area of 0.004133873768781625
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.58333, 0.66667, 0.5], [0.66667, 0.58333, 0.5]], N_P = 3, area of polygon = 0.0034727777999999975
[ Info: Centroid of polygon = [0.63889, 0.63889, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034727777998989277
[ Info: Area of slave element in contact: 0.05555777779838308, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [440, 569, 573]
[ Info: Auxiliary plane x0 = [0.5555566666666667, 0.22222, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 0.0, 0.5], [0.66667, 0.33333, 0.5], [0.33333, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.25, 0.5], [0.41666249992499926, 0.25, 0.5], [0.5, 0.166665, 0.5]], N_P = 3, area of polygon = 0.003472465284375093
[ Info: Centroid of polygon = [0.47222083330833303, 0.22222166666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003472465284274033
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.0, 0.5], [0.5, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.166665, 0.5], [0.5, 0.25, 0.5], [0.66667, 0.08333000000000002, 0.5], [0.66667, 0.0, 0.5]], N_P = 4, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.5833341666416663, 0.12499958334583346, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034723263884405735
[ Info: Cell 2 has area of 0.0034722569446906573
[ Info: Cell 3 has area of 0.0034721874967739226
[ Info: Cell 4 has area of 0.0034722569446906304
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.08333000000000002, 0.5], [0.5, 0.25, 0.5], [0.66667, 0.25, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.6111133333333332, 0.19444333333333333, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.41667, 0.33333, 0.5], [0.5, 0.25, 0.5], [0.41666249992499926, 0.25, 0.5], [0.33333, 0.33333, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.41666541667291485, 0.29166520830521026, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017361545102358904
[ Info: Cell 2 has area of 0.0017361371500796633
[ Info: Cell 3 has area of 0.0017361545102358806
[ Info: Cell 4 has area of 0.0017361718698713602
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.33333, 0.5], [0.41667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.4722233333333333, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.33333, 0.5], [0.66667, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.33333, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.5833349999999999, 0.29166499999999995, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989515
[ Info: Cell 2 has area of 0.0034721527748989445
[ Info: Cell 3 has area of 0.0034721527748989467
[ Info: Cell 4 has area of 0.003472152774898954
[ Info: length(P) == 1, shared vertex
[ Info: Area of slave element in contact: 0.05555611109838314, it's 99.99999999708969 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [439, 518, 569]
[ Info: Auxiliary plane x0 = [0.8888900000000001, 0.22222, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.0, 0.5], [1.0, 0.33333, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.33333, 0.5], [0.75, 0.25, 0.5], [0.66667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.7222233333333333, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [1.0, 0.25, 0.5], [1.0, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.0, 0.5], [0.75, 0.25, 0.5], [1.0, 0.25, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.9166666666666666, 0.16666666666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.25, 0.5], [1.0, 0.33333, 0.5], [0.91667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.9722233333333332, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [0.75, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.33333, 0.5], [0.91667, 0.33333, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.8555562666698666, 0.28888746666026677, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.004860933332391877
[ Info: Cell 2 has area of 0.004398001850671997
[ Info: Cell 3 has area of 0.0037036185157588828
[ Info: Cell 4 has area of 0.004398001850671997
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [533, 543, 573]
[ Info: Auxiliary plane x0 = [0.11111, 0.44444333333333336, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.0, 0.66667, 0.5], [0.0, 0.33333, 0.5], [0.33333, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.41666249992499926, 0.5], [0.33333, 0.33333, 0.5], [0.25, 0.33333, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.27777666666666667, 0.36110749997499975, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.33333, 0.5], [0.16666999999999998, 0.33333, 0.5], [0.0, 0.5, 0.5], [0.166665, 0.5, 0.5], [0.25, 0.41666249992499926, 0.5]], N_P = 5, area of polygon = 0.024305590265624906
[ Info: Centroid of polygon = [0.1507936734518947, 0.4246018537497331, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038028417863719536
[ Info: Cell 2 has area of 0.006283086259164792
[ Info: Cell 3 has area of 0.006283116022217508
[ Info: Cell 4 has area of 0.003802990597468861
[ Info: Cell 5 has area of 0.004133555599694417
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.33333, 0.5], [0.16666999999999998, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.05555666666666666, 0.38888666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.166665, 0.5, 0.5], [0.0, 0.5, 0.5], [0.0, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.05555500000000001, 0.5555566666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595783
[ Info: Area of slave element in contact: 0.05555611109838313, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [518, 559, 569]
[ Info: Auxiliary plane x0 = [0.77778, 0.44444333333333336, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.33333, 0.5], [0.66667, 0.66667, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.33333, 0.5], [0.66667, 0.33333, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.7083349999999998, 0.41666499999999995, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989515
[ Info: Cell 2 has area of 0.0034721527748989623
[ Info: Cell 3 has area of 0.0034721527748989467
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.5, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.5, 0.5], [0.66667, 0.58333, 0.5], [0.66667, 0.5, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.5277766666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.75, 0.5833375000750007, 0.5], [0.75, 0.5, 0.5], [0.66667, 0.58333, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.7083347916947896, 0.5833345833270849, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.001736154510235897
[ Info: Cell 2 has area of 0.0017361371500796675
[ Info: Cell 3 has area of 0.0017361545102358741
[ Info: Cell 4 has area of 0.0017361718698713558
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.33333, 0.5], [0.91667, 0.33333, 0.5], [0.75, 0.5, 0.5], [0.8333349999999999, 0.5, 0.5]], N_P = 4, area of polygon = 0.013889027774999996
[ Info: Centroid of polygon = [0.8750004166541664, 0.4166658333583335, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003472187496773913
[ Info: Cell 2 has area of 0.003472256944690625
[ Info: Cell 3 has area of 0.0034723263884405796
[ Info: Cell 4 has area of 0.0034722569446906594
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [0.75, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.33333, 0.5], [0.91667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.8055566666666665, 0.38888666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.8333349999999999, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.5833375000750007, 0.5]], N_P = 3, area of polygon = 0.0034724652843750904
[ Info: Centroid of polygon = [0.7777783333333331, 0.5277791666916669, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034724652842740298
[ Info: Area of slave element in contact: 0.05555611109838312, it's 99.99999999708965 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [488, 498, 563]
[ Info: Auxiliary plane x0 = [0.22222000000000003, 0.8888900000000001, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 1.0, 0.5], [0.0, 1.0, 0.5], [0.33333, 0.66667, 0.5]]
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.75, 0.5], [0.33333, 0.66667, 0.5], [0.33333, 0.75, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.7222233333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.25, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.91667, 0.5], [0.33333, 0.75, 0.5], [0.25, 0.75, 0.5], [0.25, 1.0, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.28888746666026677, 0.8555562666698666, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588828
[ Info: Cell 2 has area of 0.004398001850671997
[ Info: Cell 3 has area of 0.004860933332391877
[ Info: Cell 4 has area of 0.004398001850671997
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 1.0, 0.5], [0.25, 1.0, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.75, 0.5], [0.0, 1.0, 0.5], [0.25, 1.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.16666666666666666, 0.9166666666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 1.0, 0.5], [0.5, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.91667, 0.5], [0.25, 1.0, 0.5], [0.33333, 1.0, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.9722233333333332, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [473, 488, 559]
[ Info: Auxiliary plane x0 = [0.5555566666666667, 0.8888900000000001, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 1.0, 0.5], [0.33333, 1.0, 0.5], [0.66667, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.75, 0.5], [0.66667, 0.66667, 0.5], [0.5833375000750007, 0.75, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.6388925000250001, 0.7222233333333331, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5833375000750007, 0.75, 0.5], [0.5, 0.8333349999999999, 0.5], [0.5, 1.0, 0.5], [0.66667, 0.83333, 0.5], [0.66667, 0.75, 0.5]], N_P = 5, area of polygon = 0.02430559026562491
[ Info: Centroid of polygon = [0.5753981462502669, 0.8492063265481052, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038029905974688557
[ Info: Cell 2 has area of 0.006283116022217506
[ Info: Cell 3 has area of 0.0062830862591648
[ Info: Cell 4 has area of 0.0038028417863719558
[ Info: Cell 5 has area of 0.004133555599694415
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 1.0, 0.5], [0.75, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.83333, 0.5], [0.5, 1.0, 0.5], [0.66667, 1.0, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.6111133333333332, 0.9444433333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 1.0, 0.5], [0.5, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 1.0, 0.5], [0.33333, 1.0, 0.5], [0.5, 0.8333349999999999, 0.5]], N_P = 3, area of polygon = 0.013889027775000003
[ Info: Centroid of polygon = [0.44444333333333336, 0.944445, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595785
[ Info: Area of slave element in contact: 0.05555611109838314, it's 99.99999999708969 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [498, 533, 563]
[ Info: Auxiliary plane x0 = [0.11111, 0.77778, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.0, 1.0, 0.5], [0.0, 0.66667, 0.5], [0.33333, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.25, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.66667, 0.5], [0.25, 0.75, 0.5], [0.33333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.27777666666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.66667, 0.5], [0.08333000000000002, 0.66667, 0.5], [0.0, 0.75, 0.5], [0.25, 0.75, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.14444373333013336, 0.7111125333397332, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588815
[ Info: Cell 2 has area of 0.004398001850671996
[ Info: Cell 3 has area of 0.004860933332391877
[ Info: Cell 4 has area of 0.004398001850671998
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.75, 0.5], [0.0, 0.66667, 0.5], [0.08333000000000002, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.02777666666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.75, 0.5], [0.0, 1.0, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.75, 0.5], [0.0, 0.75, 0.5], [0.0, 1.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.08333333333333333, 0.8333333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: length(P) == 2, shared edge
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [453, 543, 463]
[ Info: Auxiliary plane x0 = [0.11111000000000004, 0.11111, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 0.0, 0.5], [0.0, 0.33333, 0.5], [0.0, 0.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.25, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.0, 0.5], [0.33333, 0.0, 0.5], [0.25, 0.08333000000000002, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.27777666666666667, 0.02777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.0, 0.25, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.08333000000000002, 0.25, 0.5], [0.25, 0.08333000000000002, 0.5], [0.25, 0.0, 0.5], [0.0, 0.25, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.14444373333013333, 0.14444373333013336, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588893
[ Info: Cell 2 has area of 0.0043980018506719985
[ Info: Cell 3 has area of 0.004860933332391865
[ Info: Cell 4 has area of 0.004398001850671998
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.0, 0.5], [0.0, 0.25, 0.5], [0.25, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.0, 0.5], [0.0, 0.0, 0.5], [0.0, 0.25, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.08333333333333333, 0.08333333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.08333000000000002, 0.25, 0.5], [0.0, 0.25, 0.5], [0.0, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.02777666666666667, 0.27777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [453, 573, 543]
[ Info: Auxiliary plane x0 = [0.22222000000000003, 0.22222, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 0.0, 0.5], [0.33333, 0.33333, 0.5], [0.0, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.25, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.0, 0.5], [0.25, 0.08333000000000002, 0.5], [0.25, 0.25, 0.5], [0.33333, 0.16666999999999998, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.29166499999999995, 0.12499999999999997, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989454
[ Info: Cell 2 has area of 0.0034721527748989445
[ Info: Cell 3 has area of 0.0034721527748989523
[ Info: Cell 4 has area of 0.003472152774898954
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.16666999999999998, 0.5], [0.25, 0.25, 0.5], [0.33333, 0.25, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.22222333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.33333, 0.5], [0.33333, 0.25, 0.5], [0.25, 0.25, 0.5], [0.25, 0.33333, 0.5]], N_P = 4, area of polygon = 0.006943888900000002
[ Info: Centroid of polygon = [0.291665, 0.291665, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.001735972224949478
[ Info: Cell 2 has area of 0.001735972224949478
[ Info: Cell 3 has area of 0.001735972224949478
[ Info: Cell 4 has area of 0.001735972224949478
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.0, 0.25, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.25, 0.5], [0.08333000000000002, 0.25, 0.5], [0.25, 0.08333000000000002, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.19444333333333333, 0.19444333333333333, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.33333, 0.5], [0.25, 0.25, 0.5], [0.16666999999999998, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.22222333333333333, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.33333, 0.5], [0.16666999999999998, 0.33333, 0.5], [0.25, 0.25, 0.5], [0.08333000000000002, 0.25, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.12499999999999997, 0.29166499999999995, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003472152774898954
[ Info: Cell 2 has area of 0.0034721527748989523
[ Info: Cell 3 has area of 0.0034721527748989445
[ Info: Cell 4 has area of 0.0034721527748989454
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [440, 573, 453]
[ Info: Auxiliary plane x0 = [0.44444333333333336, 0.11111, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 0.0, 0.5], [0.33333, 0.33333, 0.5], [0.33333, 0.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.25, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.16666999999999998, 0.5], [0.5, 0.0, 0.5], [0.33333, 0.0, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.38888666666666666, 0.05555666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.41666249992499926, 0.25, 0.5], [0.5, 0.166665, 0.5], [0.5, 0.0, 0.5], [0.33333, 0.16666999999999998, 0.5], [0.33333, 0.25, 0.5]], N_P = 5, area of polygon = 0.024305590265624906
[ Info: Centroid of polygon = [0.4246018537497331, 0.15079367345189468, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038029905974688613
[ Info: Cell 2 has area of 0.006283116022217508
[ Info: Cell 3 has area of 0.006283086259164789
[ Info: Cell 4 has area of 0.0038028417863719536
[ Info: Cell 5 has area of 0.004133555599694419
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.0, 0.5], [0.5, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.0, 0.5], [0.66667, 0.0, 0.5], [0.5, 0.166665, 0.5]], N_P = 3, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.5555566666666666, 0.05555500000000001, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595783
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.25, 0.5], [0.33333, 0.33333, 0.5], [0.41666249992499926, 0.25, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.36110749997499975, 0.27777666666666667, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Area of slave element in contact: 0.055556111098383126, it's 99.99999999708966 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [439, 569, 440]
[ Info: Auxiliary plane x0 = [0.77778, 0.11111, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.0, 0.5], [0.66667, 0.33333, 0.5], [0.66667, 0.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.0, 0.5], [0.5, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.08333000000000002, 0.5], [0.75, 0.0, 0.5], [0.66667, 0.0, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.02777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.08333000000000002, 0.5], [0.66667, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.0, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.7111125333397332, 0.14444373333013336, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588815
[ Info: Cell 2 has area of 0.004398001850671998
[ Info: Cell 3 has area of 0.004860933332391877
[ Info: Cell 4 has area of 0.004398001850671996
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [1.0, 0.0, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.0, 0.5], [0.75, 0.25, 0.5], [1.0, 0.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.8333333333333333, 0.08333333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.25, 0.5], [0.66667, 0.33333, 0.5], [0.66667, 0.25, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.27777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 1, shared vertex
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [533, 573, 563]
[ Info: Auxiliary plane x0 = [0.22222, 0.5555566666666667, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.0, 0.66667, 0.5], [0.33333, 0.33333, 0.5], [0.33333, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.33333, 0.5], [0.25, 0.41666249992499926, 0.5], [0.25, 0.5, 0.5], [0.33333, 0.41667, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.29166520830521026, 0.4166654166729149, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017361545102358828
[ Info: Cell 2 has area of 0.0017361371500796631
[ Info: Cell 3 has area of 0.0017361545102358876
[ Info: Cell 4 has area of 0.00173617186987136
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.41667, 0.5], [0.25, 0.5, 0.5], [0.33333, 0.5, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.4722233333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.25, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.5, 0.5], [0.25, 0.5, 0.5], [0.25, 0.66667, 0.5], [0.33333, 0.66667, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.29166499999999995, 0.5833349999999998, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003472152774898942
[ Info: Cell 2 has area of 0.0034721527748989445
[ Info: Cell 3 has area of 0.003472152774898956
[ Info: Cell 4 has area of 0.003472152774898953
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.66667, 0.5], [0.25, 0.5, 0.5], [0.08333000000000002, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.19444333333333333, 0.6111133333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.5, 0.5], [0.166665, 0.5, 0.5], [0.25, 0.41666249992499926, 0.5]], N_P = 3, area of polygon = 0.003472465284375093
[ Info: Centroid of polygon = [0.22222166666666665, 0.47222083330833303, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003472465284274033
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.66667, 0.5], [0.08333000000000002, 0.66667, 0.5], [0.25, 0.5, 0.5], [0.166665, 0.5, 0.5]], N_P = 4, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.12499958334583346, 0.5833341666416664, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721874967739183
[ Info: Cell 2 has area of 0.003472256944690648
[ Info: Cell 3 has area of 0.003472326388440578
[ Info: Cell 4 has area of 0.0034722569446906403
[ Info: Area of slave element in contact: 0.05555611109838313, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [508, 559, 518]
[ Info: Auxiliary plane x0 = [0.88889, 0.5555566666666667, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.66667, 0.5], [0.66667, 0.66667, 0.5], [1.0, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.5833375000750007, 0.5], [0.66667, 0.66667, 0.5], [0.75, 0.66667, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.7222233333333331, 0.638892500025, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.8333349999999999, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889027775000003
[ Info: Centroid of polygon = [0.944445, 0.44444333333333336, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595785
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.5, 0.5], [1.0, 0.66667, 0.5], [0.83333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.9444433333333332, 0.6111133333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.66667, 0.5], [0.83333, 0.66667, 0.5], [1.0, 0.5, 0.5], [0.8333349999999999, 0.5, 0.5], [0.75, 0.5833375000750007, 0.5]], N_P = 5, area of polygon = 0.02430559026562491
[ Info: Centroid of polygon = [0.8492063265481051, 0.5753981462502669, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038028417863719558
[ Info: Cell 2 has area of 0.006283086259164811
[ Info: Cell 3 has area of 0.006283116022217506
[ Info: Cell 4 has area of 0.0038029905974688513
[ Info: Cell 5 has area of 0.004133555599694411
[ Info: Area of slave element in contact: 0.05555611109838314, it's 99.99999999708969 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [488, 563, 559]
[ Info: Auxiliary plane x0 = [0.44444333333333336, 0.77778, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 1.0, 0.5], [0.33333, 0.66667, 0.5], [0.66667, 0.66667, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.66667, 0.5], [0.33333, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.66667, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.41666499999999995, 0.7083349999999998, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989467
[ Info: Cell 2 has area of 0.0034721527748989623
[ Info: Cell 3 has area of 0.0034721527748989515
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.5, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 0.66667, 0.5], [0.58333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.5277766666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.58333, 0.66667, 0.5], [0.5, 0.75, 0.5], [0.5833375000750007, 0.75, 0.5], [0.66667, 0.66667, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.5833345833270849, 0.7083347916947896, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017361545102358741
[ Info: Cell 2 has area of 0.0017361371500796675
[ Info: Cell 3 has area of 0.001736154510235897
[ Info: Cell 4 has area of 0.0017361718698713558
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5833375000750007, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.8333349999999999, 0.5]], N_P = 3, area of polygon = 0.0034724652843750904
[ Info: Centroid of polygon = [0.5277791666916669, 0.7777783333333331, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034724652842740298
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.25, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.75, 0.5], [0.33333, 0.91667, 0.5], [0.33333, 0.75, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.38888666666666666, 0.8055566666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 1.0, 0.5], [0.5, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.8333349999999999, 0.5], [0.5, 0.75, 0.5], [0.33333, 0.91667, 0.5], [0.33333, 1.0, 0.5]], N_P = 4, area of polygon = 0.013889027774999993
[ Info: Centroid of polygon = [0.4166658333583336, 0.8750004166541665, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034723263884405744
[ Info: Cell 2 has area of 0.003472256944690644
[ Info: Cell 3 has area of 0.0034721874967739183
[ Info: Cell 4 has area of 0.0034722569446906408
[ Info: Area of slave element in contact: 0.055556111098383126, it's 99.99999999708966 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [473, 559, 508]
[ Info: Auxiliary plane x0 = [0.77778, 0.77778, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 1.0, 0.5], [0.66667, 0.66667, 0.5], [1.0, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.66667, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.66667, 0.5]], N_P = 4, area of polygon = 0.006943888900000002
[ Info: Centroid of polygon = [0.708335, 0.708335, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017359722249494802
[ Info: Cell 2 has area of 0.0017359722249494758
[ Info: Cell 3 has area of 0.0017359722249494758
[ Info: Cell 4 has area of 0.0017359722249494802
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.75, 0.5], [0.66667, 0.83333, 0.5], [0.66667, 0.75, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.7777766666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 1.0, 0.5], [0.75, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 1.0, 0.5], [0.75, 0.91667, 0.5], [0.75, 0.75, 0.5], [0.66667, 0.83333, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.7083349999999998, 0.8749999999999999, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.00347215277489896
[ Info: Cell 2 has area of 0.0034721527748989628
[ Info: Cell 3 has area of 0.003472152774898937
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.83333, 0.66667, 0.5], [0.75, 0.75, 0.5], [0.91667, 0.75, 0.5], [1.0, 0.66667, 0.5]], N_P = 4, area of polygon = 0.0138886111
[ Info: Centroid of polygon = [0.875, 0.7083349999999998, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989424
[ Info: Cell 2 has area of 0.0034721527748989628
[ Info: Cell 3 has area of 0.0034721527748989563
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [0.75, 1.0, 0.5], [1.0, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.91667, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.91667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.8055566666666665, 0.8055566666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.75, 0.5], [0.75, 0.66667, 0.5], [0.83333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.7777766666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [473, 508, 474]
[ Info: Auxiliary plane x0 = [0.88889, 0.88889, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 1.0, 0.5], [1.0, 0.66667, 0.5], [1.0, 1.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 1.0, 0.5], [0.75, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 1.0, 0.5], [0.66667, 1.0, 0.5], [0.75, 0.91667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.7222233333333333, 0.9722233333333332, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.91667, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.9722233333333332, 0.7222233333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [0.75, 1.0, 0.5], [1.0, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.91667, 0.75, 0.5], [0.75, 0.91667, 0.5], [0.75, 1.0, 0.5], [1.0, 0.75, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.8555562666698665, 0.8555562666698666, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003703618515758873
[ Info: Cell 2 has area of 0.0043980018506719915
[ Info: Cell 3 has area of 0.00486093333239189
[ Info: Cell 4 has area of 0.004398001850671997
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 1.0, 0.5], [1.0, 1.0, 0.5], [1.0, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.75, 0.5], [0.75, 1.0, 0.5], [1.0, 1.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.9166666666666666, 0.9166666666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: Area of interface: 0.9999999999708966
[ Info: Smallest cell area: 0.0017359722249494758
[ Info: Smallest polygon area: 0.003471944449898956
[ Info: Smallest slave element area in contact: 0.055554444448383186
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between upper and lower block` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.03 seconds using solver 3. Solution norms (||u||, ||la||): (5.904921598556582, 4.015652388255958).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: minT = 0.5000000000000001, maxT = 0.5000000000000006
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Heat, having name `UPPER` and dimension 1 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `thermal conductivity` => 1.0 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: Creating a new problem of type Heat, having name `LOWER` and dimension 1 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `thermal conductivity` => 1.0 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `temperature 1` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `temperature 1` => 1.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Mortar, having name `interface between upper and lower block` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 32 elements to problem `interface between upper and lower block`
[ Info: Adding 18 elements to problem `interface between upper and lower block`
[ Info: Diagnosing Mortar interface...
[ Info: props.split_quadratic_slave_elements = true
[ Info: Number of slave elements in interface: 18
[ Info: Updating field `normal` for 18 elements.
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.05555777779999999
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [563, 573, 569]
[ Info: Auxiliary plane x0 = [0.44444333333333336, 0.44444333333333336, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 0.66667, 0.5], [0.33333, 0.33333, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.41667, 0.33333, 0.5], [0.33333, 0.33333, 0.5], [0.33333, 0.41667, 0.5]], N_P = 3, area of polygon = 0.0034727777999999975
[ Info: Centroid of polygon = [0.36111000000000004, 0.36111000000000004, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034727777998989277
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.41667, 0.5], [0.33333, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.33333, 0.5], [0.41667, 0.33333, 0.5]], N_P = 5, area of polygon = 0.024306111099999996
[ Info: Centroid of polygon = [0.4246025170254612, 0.4246025170254612, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.003802869421755166
[ Info: Cell 2 has area of 0.006283249243500326
[ Info: Cell 3 has area of 0.006283249243500326
[ Info: Cell 4 has area of 0.003802869421755166
[ Info: Cell 5 has area of 0.004133873768781625
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.33333, 0.5], [0.5, 0.5, 0.5], [0.66667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.5555566666666665, 0.38888666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.25, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.5, 0.5], [0.33333, 0.66667, 0.5], [0.33333, 0.5, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.38888666666666666, 0.5555566666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 1, shared vertex
[ Info: Area of slave element in contact: 0.05555777779838308, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.05555777779999999
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [559, 563, 569]
[ Info: Auxiliary plane x0 = [0.5555566666666667, 0.5555566666666667, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.33333, 0.66667, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.5, 0.5], [0.66667, 0.33333, 0.5], [0.66667, 0.5, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.6111133333333332, 0.44444333333333336, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.66667, 0.5], [0.5, 0.5, 0.5], [0.33333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.44444333333333336, 0.6111133333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.5, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.58333, 0.5], [0.66667, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.66667, 0.5], [0.58333, 0.66667, 0.5]], N_P = 5, area of polygon = 0.024306111099999996
[ Info: Centroid of polygon = [0.5753974829745387, 0.5753974829745389, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038028694217551668
[ Info: Cell 2 has area of 0.0062832492435003304
[ Info: Cell 3 has area of 0.006283249243500322
[ Info: Cell 4 has area of 0.0038028694217551624
[ Info: Cell 5 has area of 0.004133873768781625
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.58333, 0.66667, 0.5], [0.66667, 0.58333, 0.5]], N_P = 3, area of polygon = 0.0034727777999999975
[ Info: Centroid of polygon = [0.63889, 0.63889, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034727777998989277
[ Info: Area of slave element in contact: 0.05555777779838308, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [440, 569, 573]
[ Info: Auxiliary plane x0 = [0.5555566666666667, 0.22222, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 0.0, 0.5], [0.66667, 0.33333, 0.5], [0.33333, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.25, 0.5], [0.41666249992499926, 0.25, 0.5], [0.5, 0.166665, 0.5]], N_P = 3, area of polygon = 0.003472465284375093
[ Info: Centroid of polygon = [0.47222083330833303, 0.22222166666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003472465284274033
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.0, 0.5], [0.5, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.166665, 0.5], [0.5, 0.25, 0.5], [0.66667, 0.08333000000000002, 0.5], [0.66667, 0.0, 0.5]], N_P = 4, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.5833341666416663, 0.12499958334583346, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034723263884405735
[ Info: Cell 2 has area of 0.0034722569446906573
[ Info: Cell 3 has area of 0.0034721874967739226
[ Info: Cell 4 has area of 0.0034722569446906304
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.08333000000000002, 0.5], [0.5, 0.25, 0.5], [0.66667, 0.25, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.6111133333333332, 0.19444333333333333, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.41667, 0.33333, 0.5], [0.5, 0.25, 0.5], [0.41666249992499926, 0.25, 0.5], [0.33333, 0.33333, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.41666541667291485, 0.29166520830521026, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017361545102358904
[ Info: Cell 2 has area of 0.0017361371500796633
[ Info: Cell 3 has area of 0.0017361545102358806
[ Info: Cell 4 has area of 0.0017361718698713602
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.33333, 0.5], [0.41667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.4722233333333333, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.33333, 0.5], [0.66667, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.33333, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.5833349999999999, 0.29166499999999995, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989515
[ Info: Cell 2 has area of 0.0034721527748989445
[ Info: Cell 3 has area of 0.0034721527748989467
[ Info: Cell 4 has area of 0.003472152774898954
[ Info: length(P) == 1, shared vertex
[ Info: Area of slave element in contact: 0.05555611109838314, it's 99.99999999708969 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [439, 518, 569]
[ Info: Auxiliary plane x0 = [0.8888900000000001, 0.22222, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.0, 0.5], [1.0, 0.33333, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.33333, 0.5], [0.75, 0.25, 0.5], [0.66667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.7222233333333333, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [1.0, 0.25, 0.5], [1.0, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.0, 0.5], [0.75, 0.25, 0.5], [1.0, 0.25, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.9166666666666666, 0.16666666666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.25, 0.5], [1.0, 0.33333, 0.5], [0.91667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.9722233333333332, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [0.75, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.33333, 0.5], [0.91667, 0.33333, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.8555562666698666, 0.28888746666026677, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.004860933332391877
[ Info: Cell 2 has area of 0.004398001850671997
[ Info: Cell 3 has area of 0.0037036185157588828
[ Info: Cell 4 has area of 0.004398001850671997
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [533, 543, 573]
[ Info: Auxiliary plane x0 = [0.11111, 0.44444333333333336, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.0, 0.66667, 0.5], [0.0, 0.33333, 0.5], [0.33333, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.41666249992499926, 0.5], [0.33333, 0.33333, 0.5], [0.25, 0.33333, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.27777666666666667, 0.36110749997499975, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.33333, 0.5], [0.16666999999999998, 0.33333, 0.5], [0.0, 0.5, 0.5], [0.166665, 0.5, 0.5], [0.25, 0.41666249992499926, 0.5]], N_P = 5, area of polygon = 0.024305590265624906
[ Info: Centroid of polygon = [0.1507936734518947, 0.4246018537497331, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038028417863719536
[ Info: Cell 2 has area of 0.006283086259164792
[ Info: Cell 3 has area of 0.006283116022217508
[ Info: Cell 4 has area of 0.003802990597468861
[ Info: Cell 5 has area of 0.004133555599694417
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.33333, 0.5], [0.16666999999999998, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.05555666666666666, 0.38888666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.166665, 0.5, 0.5], [0.0, 0.5, 0.5], [0.0, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.05555500000000001, 0.5555566666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595783
[ Info: Area of slave element in contact: 0.05555611109838313, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [518, 559, 569]
[ Info: Auxiliary plane x0 = [0.77778, 0.44444333333333336, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.33333, 0.5], [0.66667, 0.66667, 0.5], [0.66667, 0.33333, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.33333, 0.5], [0.66667, 0.33333, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.7083349999999998, 0.41666499999999995, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989515
[ Info: Cell 2 has area of 0.0034721527748989623
[ Info: Cell 3 has area of 0.0034721527748989467
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.5, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.5, 0.5], [0.66667, 0.58333, 0.5], [0.66667, 0.5, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.5277766666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.75, 0.5833375000750007, 0.5], [0.75, 0.5, 0.5], [0.66667, 0.58333, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.7083347916947896, 0.5833345833270849, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.001736154510235897
[ Info: Cell 2 has area of 0.0017361371500796675
[ Info: Cell 3 has area of 0.0017361545102358741
[ Info: Cell 4 has area of 0.0017361718698713558
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.33333, 0.5], [0.91667, 0.33333, 0.5], [0.75, 0.5, 0.5], [0.8333349999999999, 0.5, 0.5]], N_P = 4, area of polygon = 0.013889027774999996
[ Info: Centroid of polygon = [0.8750004166541664, 0.4166658333583335, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003472187496773913
[ Info: Cell 2 has area of 0.003472256944690625
[ Info: Cell 3 has area of 0.0034723263884405796
[ Info: Cell 4 has area of 0.0034722569446906594
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [0.75, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.33333, 0.5], [0.91667, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.8055566666666665, 0.38888666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.8333349999999999, 0.5, 0.5], [0.75, 0.5, 0.5], [0.75, 0.5833375000750007, 0.5]], N_P = 3, area of polygon = 0.0034724652843750904
[ Info: Centroid of polygon = [0.7777783333333331, 0.5277791666916669, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034724652842740298
[ Info: Area of slave element in contact: 0.05555611109838312, it's 99.99999999708965 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [488, 498, 563]
[ Info: Auxiliary plane x0 = [0.22222000000000003, 0.8888900000000001, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 1.0, 0.5], [0.0, 1.0, 0.5], [0.33333, 0.66667, 0.5]]
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.75, 0.5], [0.33333, 0.66667, 0.5], [0.33333, 0.75, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.7222233333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.25, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.91667, 0.5], [0.33333, 0.75, 0.5], [0.25, 0.75, 0.5], [0.25, 1.0, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.28888746666026677, 0.8555562666698666, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588828
[ Info: Cell 2 has area of 0.004398001850671997
[ Info: Cell 3 has area of 0.004860933332391877
[ Info: Cell 4 has area of 0.004398001850671997
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 1.0, 0.5], [0.25, 1.0, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.75, 0.5], [0.0, 1.0, 0.5], [0.25, 1.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.16666666666666666, 0.9166666666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 1.0, 0.5], [0.5, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.91667, 0.5], [0.25, 1.0, 0.5], [0.33333, 1.0, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.9722233333333332, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [473, 488, 559]
[ Info: Auxiliary plane x0 = [0.5555566666666667, 0.8888900000000001, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 1.0, 0.5], [0.33333, 1.0, 0.5], [0.66667, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.75, 0.5], [0.66667, 0.66667, 0.5], [0.5833375000750007, 0.75, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.6388925000250001, 0.7222233333333331, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5833375000750007, 0.75, 0.5], [0.5, 0.8333349999999999, 0.5], [0.5, 1.0, 0.5], [0.66667, 0.83333, 0.5], [0.66667, 0.75, 0.5]], N_P = 5, area of polygon = 0.02430559026562491
[ Info: Centroid of polygon = [0.5753981462502669, 0.8492063265481052, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038029905974688557
[ Info: Cell 2 has area of 0.006283116022217506
[ Info: Cell 3 has area of 0.0062830862591648
[ Info: Cell 4 has area of 0.0038028417863719558
[ Info: Cell 5 has area of 0.004133555599694415
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 1.0, 0.5], [0.75, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.83333, 0.5], [0.5, 1.0, 0.5], [0.66667, 1.0, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.6111133333333332, 0.9444433333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 1.0, 0.5], [0.5, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 1.0, 0.5], [0.33333, 1.0, 0.5], [0.5, 0.8333349999999999, 0.5]], N_P = 3, area of polygon = 0.013889027775000003
[ Info: Centroid of polygon = [0.44444333333333336, 0.944445, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595785
[ Info: Area of slave element in contact: 0.05555611109838314, it's 99.99999999708969 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [498, 533, 563]
[ Info: Auxiliary plane x0 = [0.11111, 0.77778, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.0, 1.0, 0.5], [0.0, 0.66667, 0.5], [0.33333, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.25, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.66667, 0.5], [0.25, 0.75, 0.5], [0.33333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.27777666666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: length(P) == 2, shared edge
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.66667, 0.5], [0.08333000000000002, 0.66667, 0.5], [0.0, 0.75, 0.5], [0.25, 0.75, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.14444373333013336, 0.7111125333397332, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588815
[ Info: Cell 2 has area of 0.004398001850671996
[ Info: Cell 3 has area of 0.004860933332391877
[ Info: Cell 4 has area of 0.004398001850671998
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.75, 0.5], [0.0, 0.66667, 0.5], [0.08333000000000002, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.02777666666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.75, 0.5], [0.0, 1.0, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.75, 0.5], [0.0, 0.75, 0.5], [0.0, 1.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.08333333333333333, 0.8333333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: length(P) == 2, shared edge
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [453, 543, 463]
[ Info: Auxiliary plane x0 = [0.11111000000000004, 0.11111, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 0.0, 0.5], [0.0, 0.33333, 0.5], [0.0, 0.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.25, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.0, 0.5], [0.33333, 0.0, 0.5], [0.25, 0.08333000000000002, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.27777666666666667, 0.02777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.0, 0.25, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.08333000000000002, 0.25, 0.5], [0.25, 0.08333000000000002, 0.5], [0.25, 0.0, 0.5], [0.0, 0.25, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.14444373333013333, 0.14444373333013336, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588893
[ Info: Cell 2 has area of 0.0043980018506719985
[ Info: Cell 3 has area of 0.004860933332391865
[ Info: Cell 4 has area of 0.004398001850671998
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.0, 0.5], [0.0, 0.25, 0.5], [0.25, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.0, 0.5], [0.0, 0.0, 0.5], [0.0, 0.25, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.08333333333333333, 0.08333333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.08333000000000002, 0.25, 0.5], [0.0, 0.25, 0.5], [0.0, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.02777666666666667, 0.27777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [453, 573, 543]
[ Info: Auxiliary plane x0 = [0.22222000000000003, 0.22222, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 0.0, 0.5], [0.33333, 0.33333, 0.5], [0.0, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.25, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.0, 0.5], [0.25, 0.08333000000000002, 0.5], [0.25, 0.25, 0.5], [0.33333, 0.16666999999999998, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.29166499999999995, 0.12499999999999997, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989454
[ Info: Cell 2 has area of 0.0034721527748989445
[ Info: Cell 3 has area of 0.0034721527748989523
[ Info: Cell 4 has area of 0.003472152774898954
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.16666999999999998, 0.5], [0.25, 0.25, 0.5], [0.33333, 0.25, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.22222333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.33333, 0.5], [0.33333, 0.25, 0.5], [0.25, 0.25, 0.5], [0.25, 0.33333, 0.5]], N_P = 4, area of polygon = 0.006943888900000002
[ Info: Centroid of polygon = [0.291665, 0.291665, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.001735972224949478
[ Info: Cell 2 has area of 0.001735972224949478
[ Info: Cell 3 has area of 0.001735972224949478
[ Info: Cell 4 has area of 0.001735972224949478
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.0, 0.25, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.25, 0.5], [0.08333000000000002, 0.25, 0.5], [0.25, 0.08333000000000002, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.19444333333333333, 0.19444333333333333, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.33333, 0.5], [0.25, 0.25, 0.5], [0.16666999999999998, 0.33333, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.22222333333333333, 0.30555333333333334, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.33333, 0.5], [0.16666999999999998, 0.33333, 0.5], [0.25, 0.25, 0.5], [0.08333000000000002, 0.25, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.12499999999999997, 0.29166499999999995, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003472152774898954
[ Info: Cell 2 has area of 0.0034721527748989523
[ Info: Cell 3 has area of 0.0034721527748989445
[ Info: Cell 4 has area of 0.0034721527748989454
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [440, 573, 453]
[ Info: Auxiliary plane x0 = [0.44444333333333336, 0.11111, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 0.0, 0.5], [0.33333, 0.33333, 0.5], [0.33333, 0.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.0, 0.5], [0.25, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.16666999999999998, 0.5], [0.5, 0.0, 0.5], [0.33333, 0.0, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.38888666666666666, 0.05555666666666666, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.5, 0.25, 0.5], [0.5, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.41666249992499926, 0.25, 0.5], [0.5, 0.166665, 0.5], [0.5, 0.0, 0.5], [0.33333, 0.16666999999999998, 0.5], [0.33333, 0.25, 0.5]], N_P = 5, area of polygon = 0.024305590265624906
[ Info: Centroid of polygon = [0.4246018537497331, 0.15079367345189468, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038029905974688613
[ Info: Cell 2 has area of 0.006283116022217508
[ Info: Cell 3 has area of 0.006283086259164789
[ Info: Cell 4 has area of 0.0038028417863719536
[ Info: Cell 5 has area of 0.004133555599694419
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.0, 0.5], [0.5, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.0, 0.5], [0.66667, 0.0, 0.5], [0.5, 0.166665, 0.5]], N_P = 3, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.5555566666666666, 0.05555500000000001, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595783
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.25, 0.5], [0.33333, 0.33333, 0.5], [0.41666249992499926, 0.25, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.36110749997499975, 0.27777666666666667, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Area of slave element in contact: 0.055556111098383126, it's 99.99999999708966 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [439, 569, 440]
[ Info: Auxiliary plane x0 = [0.77778, 0.11111, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.0, 0.5], [0.66667, 0.33333, 0.5], [0.66667, 0.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.0, 0.5], [0.5, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.08333000000000002, 0.5], [0.75, 0.0, 0.5], [0.66667, 0.0, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.02777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.08333000000000002, 0.5], [0.66667, 0.25, 0.5], [0.75, 0.25, 0.5], [0.75, 0.0, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.7111125333397332, 0.14444373333013336, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0037036185157588815
[ Info: Cell 2 has area of 0.004398001850671998
[ Info: Cell 3 has area of 0.004860933332391877
[ Info: Cell 4 has area of 0.004398001850671996
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.25, 0.5], [1.0, 0.0, 0.5], [0.75, 0.0, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.0, 0.5], [0.75, 0.25, 0.5], [1.0, 0.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.8333333333333333, 0.08333333333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.25, 0.5], [0.5, 0.5, 0.5], [0.75, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.25, 0.5], [0.66667, 0.33333, 0.5], [0.66667, 0.25, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.27777666666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 2, shared edge
[ Info: length(P) == 1, shared vertex
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [533, 573, 563]
[ Info: Auxiliary plane x0 = [0.22222, 0.5555566666666667, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.0, 0.66667, 0.5], [0.33333, 0.33333, 0.5], [0.33333, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.25, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.33333, 0.5], [0.25, 0.41666249992499926, 0.5], [0.25, 0.5, 0.5], [0.33333, 0.41667, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.29166520830521026, 0.4166654166729149, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017361545102358828
[ Info: Cell 2 has area of 0.0017361371500796631
[ Info: Cell 3 has area of 0.0017361545102358876
[ Info: Cell 4 has area of 0.00173617186987136
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.41667, 0.5], [0.25, 0.5, 0.5], [0.33333, 0.5, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.30555333333333334, 0.4722233333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.25, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.5, 0.5], [0.25, 0.5, 0.5], [0.25, 0.66667, 0.5], [0.33333, 0.66667, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.29166499999999995, 0.5833349999999998, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003472152774898942
[ Info: Cell 2 has area of 0.0034721527748989445
[ Info: Cell 3 has area of 0.003472152774898956
[ Info: Cell 4 has area of 0.003472152774898953
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.66667, 0.5], [0.25, 0.5, 0.5], [0.08333000000000002, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.19444333333333333, 0.6111133333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.25, 0.5], [0.0, 0.5, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.25, 0.5, 0.5], [0.166665, 0.5, 0.5], [0.25, 0.41666249992499926, 0.5]], N_P = 3, area of polygon = 0.003472465284375093
[ Info: Centroid of polygon = [0.22222166666666665, 0.47222083330833303, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003472465284274033
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.0, 0.5, 0.5], [0.0, 0.75, 0.5], [0.25, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.0, 0.66667, 0.5], [0.08333000000000002, 0.66667, 0.5], [0.25, 0.5, 0.5], [0.166665, 0.5, 0.5]], N_P = 4, area of polygon = 0.013889027775
[ Info: Centroid of polygon = [0.12499958334583346, 0.5833341666416664, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721874967739183
[ Info: Cell 2 has area of 0.003472256944690648
[ Info: Cell 3 has area of 0.003472326388440578
[ Info: Cell 4 has area of 0.0034722569446906403
[ Info: Area of slave element in contact: 0.05555611109838313, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [508, 559, 518]
[ Info: Auxiliary plane x0 = [0.88889, 0.5555566666666667, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[1.0, 0.66667, 0.5], [0.66667, 0.66667, 0.5], [1.0, 0.33333, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.5833375000750007, 0.5], [0.66667, 0.66667, 0.5], [0.75, 0.66667, 0.5]], N_P = 3, area of polygon = 0.0034720486093750944
[ Info: Centroid of polygon = [0.7222233333333331, 0.638892500025, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034720486092740463
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.25, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.8333349999999999, 0.5, 0.5], [1.0, 0.5, 0.5], [1.0, 0.33333, 0.5]], N_P = 3, area of polygon = 0.013889027775000003
[ Info: Centroid of polygon = [0.944445, 0.44444333333333336, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889027774595785
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.5, 0.5], [1.0, 0.66667, 0.5], [0.83333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.9444433333333332, 0.6111133333333332, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.66667, 0.5], [0.83333, 0.66667, 0.5], [1.0, 0.5, 0.5], [0.8333349999999999, 0.5, 0.5], [0.75, 0.5833375000750007, 0.5]], N_P = 5, area of polygon = 0.02430559026562491
[ Info: Centroid of polygon = [0.8492063265481051, 0.5753981462502669, 0.5]
[ Info: Polygon is splitted to 5 integration cells.
[ Info: Cell 1 has area of 0.0038028417863719558
[ Info: Cell 2 has area of 0.006283086259164811
[ Info: Cell 3 has area of 0.006283116022217506
[ Info: Cell 4 has area of 0.0038029905974688513
[ Info: Cell 5 has area of 0.004133555599694411
[ Info: Area of slave element in contact: 0.05555611109838314, it's 99.99999999708969 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.0555561111
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [488, 563, 559]
[ Info: Auxiliary plane x0 = [0.44444333333333336, 0.77778, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.33333, 1.0, 0.5], [0.33333, 0.66667, 0.5], [0.66667, 0.66667, 0.5]]
[ Info: length(P) == 1, shared vertex
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.33333, 0.66667, 0.5], [0.33333, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.66667, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.41666499999999995, 0.7083349999999998, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989467
[ Info: Cell 2 has area of 0.0034721527748989623
[ Info: Cell 3 has area of 0.0034721527748989515
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.5, 0.5], [0.5, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 0.66667, 0.5], [0.58333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.5277766666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.58333, 0.66667, 0.5], [0.5, 0.75, 0.5], [0.5833375000750007, 0.75, 0.5], [0.66667, 0.66667, 0.5]], N_P = 4, area of polygon = 0.006944618040624906
[ Info: Centroid of polygon = [0.5833345833270849, 0.7083347916947896, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017361545102358741
[ Info: Cell 2 has area of 0.0017361371500796675
[ Info: Cell 3 has area of 0.001736154510235897
[ Info: Cell 4 has area of 0.0017361718698713558
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5833375000750007, 0.75, 0.5], [0.5, 0.75, 0.5], [0.5, 0.8333349999999999, 0.5]], N_P = 3, area of polygon = 0.0034724652843750904
[ Info: Centroid of polygon = [0.5277791666916669, 0.7777783333333331, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.0034724652842740298
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 0.75, 0.5], [0.25, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.75, 0.5], [0.33333, 0.91667, 0.5], [0.33333, 0.75, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.38888666666666666, 0.8055566666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.25, 1.0, 0.5], [0.5, 1.0, 0.5], [0.5, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.5, 0.8333349999999999, 0.5], [0.5, 0.75, 0.5], [0.33333, 0.91667, 0.5], [0.33333, 1.0, 0.5]], N_P = 4, area of polygon = 0.013889027774999993
[ Info: Centroid of polygon = [0.4166658333583336, 0.8750004166541665, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034723263884405744
[ Info: Cell 2 has area of 0.003472256944690644
[ Info: Cell 3 has area of 0.0034721874967739183
[ Info: Cell 4 has area of 0.0034722569446906408
[ Info: Area of slave element in contact: 0.055556111098383126, it's 99.99999999708966 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [473, 559, 508]
[ Info: Auxiliary plane x0 = [0.77778, 0.77778, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 1.0, 0.5], [0.66667, 0.66667, 0.5], [1.0, 0.66667, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 0.66667, 0.5], [0.66667, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.66667, 0.5]], N_P = 4, area of polygon = 0.006943888900000002
[ Info: Centroid of polygon = [0.708335, 0.708335, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0017359722249494802
[ Info: Cell 2 has area of 0.0017359722249494758
[ Info: Cell 3 has area of 0.0017359722249494758
[ Info: Cell 4 has area of 0.0017359722249494802
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 0.75, 0.5], [0.5, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.75, 0.5], [0.66667, 0.83333, 0.5], [0.66667, 0.75, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.6944466666666665, 0.7777766666666667, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 1.0, 0.5], [0.75, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.66667, 1.0, 0.5], [0.75, 0.91667, 0.5], [0.75, 0.75, 0.5], [0.66667, 0.83333, 0.5]], N_P = 4, area of polygon = 0.013888611100000002
[ Info: Centroid of polygon = [0.7083349999999998, 0.8749999999999999, 0.49999999999999994]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.00347215277489896
[ Info: Cell 2 has area of 0.0034721527748989628
[ Info: Cell 3 has area of 0.003472152774898937
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.83333, 0.66667, 0.5], [0.75, 0.75, 0.5], [0.91667, 0.75, 0.5], [1.0, 0.66667, 0.5]], N_P = 4, area of polygon = 0.0138886111
[ Info: Centroid of polygon = [0.875, 0.7083349999999998, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.0034721527748989424
[ Info: Cell 2 has area of 0.0034721527748989628
[ Info: Cell 3 has area of 0.0034721527748989563
[ Info: Cell 4 has area of 0.003472152774898935
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [0.75, 1.0, 0.5], [1.0, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.91667, 0.75, 0.5], [0.75, 0.75, 0.5], [0.75, 0.91667, 0.5]], N_P = 3, area of polygon = 0.013889444449999998
[ Info: Centroid of polygon = [0.8055566666666665, 0.8055566666666665, 0.49999999999999994]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.013889444449595771
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.5, 0.5], [0.75, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 0.75, 0.5], [0.75, 0.66667, 0.5], [0.83333, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.7777766666666667, 0.6944466666666665, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: --------------------------------------------------------------------------------
[ Info: Processing slave element -1, type = Tri3
[ Info: --------------------------------------------------------------------------------
[ Info: Total area of slave element = 0.055554444450000004
[ Info: Converting slave element to linear surface element
[ Info: Slave element connectivity = [473, 508, 474]
[ Info: Auxiliary plane x0 = [0.88889, 0.88889, 0.5], n0 = [0.0, 0.0, 1.0]
[ Info: Slave element -1 vertices in auxiliary plane: Array{T,1} where T[[0.66667, 1.0, 0.5], [1.0, 0.66667, 0.5], [1.0, 1.0, 0.5]]
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.5, 1.0, 0.5], [0.75, 1.0, 0.5], [0.75, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.75, 1.0, 0.5], [0.66667, 1.0, 0.5], [0.75, 0.91667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.7222233333333333, 0.9722233333333332, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.5, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.91667, 0.75, 0.5], [1.0, 0.75, 0.5], [1.0, 0.66667, 0.5]], N_P = 3, area of polygon = 0.003471944450000001
[ Info: Centroid of polygon = [0.9722233333333332, 0.7222233333333333, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.003471944449898956
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 0.75, 0.5], [0.75, 1.0, 0.5], [1.0, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[0.91667, 0.75, 0.5], [0.75, 0.91667, 0.5], [0.75, 1.0, 0.5], [1.0, 0.75, 0.5]], N_P = 4, area of polygon = 0.017360555550000004
[ Info: Centroid of polygon = [0.8555562666698665, 0.8555562666698666, 0.5]
[ Info: Polygon is splitted to 4 integration cells.
[ Info: Cell 1 has area of 0.003703618515758873
[ Info: Cell 2 has area of 0.0043980018506719915
[ Info: Cell 3 has area of 0.00486093333239189
[ Info: Cell 4 has area of 0.004398001850671997
[ Info: Master element -1 vertices in auxiliary plane = Array{T,1} where T[[0.75, 1.0, 0.5], [1.0, 1.0, 0.5], [1.0, 0.75, 0.5]]
[ Info: Polygon clip found, P=Array{T,1} where T[[1.0, 0.75, 0.5], [0.75, 1.0, 0.5], [1.0, 1.0, 0.5]], N_P = 3, area of polygon = 0.03125
[ Info: Centroid of polygon = [0.9166666666666666, 0.9166666666666666, 0.5]
[ Info: Polygon is splitted to 1 integration cells.
[ Info: Cell 1 has area of 0.03124999999909052
[ Info: Area of slave element in contact: 0.055554444448383186, it's 99.99999999708967 % of total element area
[ Info: Area of interface: 0.9999999999708966
[ Info: Smallest cell area: 0.0017359722249494758
[ Info: Smallest polygon area: 0.003471944449898956
[ Info: Smallest slave element area in contact: 0.055554444448383186
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between upper and lower block` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Dual basis coefficient matrix: [3.000000000014778 -1.0000000000085847 -1.0000000000061935; -1.000000000008584 3.0000000000171685 -1.000000000008584; -1.0000000000061937 -1.000000000008584 3.0000000000147784]
[ Info: Dual basis coefficient matrix: [3.0000000000171676 -1.0000000000085845 -1.0000000000085847; -1.0000000000085834 3.000000000014777 -1.0000000000061937; -1.000000000008584 -1.0000000000061942 3.0000000000147793]
[ Info: Dual basis coefficient matrix: [3.0000000000105165 -1.0000000000044105 -1.0000000000061064; -1.0000000000044102 3.0000000000105183 -1.0000000000061076; -1.0000000000061056 -1.0000000000061071 3.000000000012212]
[ Info: Dual basis coefficient matrix: [3.000000000029012 -1.0000000000145073 -1.000000000014505; -1.000000000014507 3.000000000034172 -1.000000000019664; -1.0000000000145053 -1.0000000000196647 3.00000000003417]
[ Info: Dual basis coefficient matrix: [3.0000000000147753 -1.000000000006192 -1.0000000000085836; -1.0000000000061915 3.000000000014777 -1.0000000000085854; -1.0000000000085834 -1.0000000000085856 3.000000000017169]
[ Info: Dual basis coefficient matrix: [3.0000000000105183 -1.0000000000061078 -1.0000000000044105; -1.0000000000061076 3.0000000000122156 -1.0000000000061067; -1.0000000000044102 -1.0000000000061067 3.0000000000105156]
[ Info: Dual basis coefficient matrix: [3.000000000034171 -1.0000000000145068 -1.0000000000196632; -1.0000000000145066 3.0000000000290115 -1.000000000014505; -1.0000000000196634 -1.0000000000145055 3.0000000000341682]
[ Info: Dual basis coefficient matrix: [3.0000000000147775 -1.0000000000061924 -1.000000000008585; -1.0000000000061924 3.000000000014777 -1.0000000000085847; -1.0000000000085842 -1.0000000000085847 3.000000000017169]
[ Info: Dual basis coefficient matrix: [3.000000000029014 -1.0000000000145068 -1.0000000000145075; -1.0000000000145066 3.0000000000341704 -1.0000000000196636; -1.0000000000145077 -1.0000000000196632 3.0000000000341713]
[ Info: Dual basis coefficient matrix: [3.0000000000341687 -1.0000000000196638 -1.0000000000145053; -1.0000000000196638 3.0000000000341718 -1.0000000000145073; -1.000000000014505 -1.000000000014507 3.000000000029012]
[ Info: Dual basis coefficient matrix: [3.000000000010514 -1.0000000000061053 -1.00000000000441; -1.0000000000061053 3.0000000000122125 -1.0000000000061067; -1.0000000000044096 -1.0000000000061067 3.0000000000105165]
[ Info: Dual basis coefficient matrix: [3.000000000014776 -1.000000000008585 -1.0000000000061917; -1.0000000000085851 3.000000000017169 -1.0000000000085842; -1.0000000000061913 -1.0000000000085851 3.000000000014778]
[ Info: Dual basis coefficient matrix: [3.000000000029015 -1.0000000000145064 -1.0000000000145084; -1.0000000000145066 3.0000000000341713 -1.0000000000196645; -1.0000000000145084 -1.0000000000196643 3.0000000000341718]
[ Info: Dual basis coefficient matrix: [3.0000000000105165 -1.0000000000061067 -1.0000000000044096; -1.0000000000061076 3.000000000012215 -1.0000000000061076; -1.0000000000044096 -1.000000000006108 3.0000000000105187]
[ Info: Dual basis coefficient matrix: [3.00000000001478 -1.000000000008584 -1.0000000000061946; -1.0000000000085845 3.00000000001717 -1.0000000000085862; -1.0000000000061953 -1.0000000000085867 3.000000000014781]
[ Info: Dual basis coefficient matrix: [3.0000000000105187 -1.0000000000044131 -1.0000000000061062; -1.000000000004413 3.000000000010521 -1.000000000006107; -1.0000000000061071 -1.0000000000061071 3.0000000000122147]
[ Info: Dual basis coefficient matrix: [3.0000000000105147 -1.000000000006104 -1.0000000000044107; -1.0000000000061042 3.0000000000122107 -1.0000000000061064; -1.0000000000044116 -1.000000000006106 3.000000000010518]
[ Info: Dual basis coefficient matrix: [3.000000000034171 -1.0000000000196645 -1.0000000000145066; -1.000000000019664 3.0000000000341704 -1.0000000000145064; -1.0000000000145068 -1.000000000014506 3.0000000000290132]
[ Info: Solving linear system.
[ Info: Solved linear system in 0.06 seconds using solver 3. Solution norms (||u||, ||la||): (5.904921598556582, 4.015652388255959).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: 607 nodes found
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Heat, having name `UPPER` and dimension 1 dofs/node.
[ Info: Created 177 elements (177 x Tet10) from element set: UPPER.
[ Info: Updating field `thermal conductivity` => 1.0 for 177 elements.
[ Info: Adding 177 elements to problem `UPPER`
[ Info: Creating a new problem of type Heat, having name `LOWER` and dimension 1 dofs/node.
[ Info: Created 92 elements (92 x Tet10) from element set: LOWER.
[ Info: Updating field `thermal conductivity` => 1.0 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `temperature 1` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `temperature 1` => 1.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Mortar, having name `interface between upper and lower block` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 32 elements to problem `interface between upper and lower block`
[ Info: Adding 18 elements to problem `interface between upper and lower block`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between upper and lower block` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.1 seconds using solver 3. Solution norms (||u||, ||la||): (13.043773174206581, 7.003714675746625).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: minT = 0.4999999994128919, maxT = 0.500000000712246, stdT = 1.7125662869175686e-10
[ Info: 607 nodes found
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Heat, having name `UPPER` and dimension 1 dofs/node.
[ Info: Created 177 elements (177 x Tet10) from element set: UPPER.
[ Info: Updating field `thermal conductivity` => 1.0 for 177 elements.
[ Info: Adding 177 elements to problem `UPPER`
[ Info: Creating a new problem of type Heat, having name `LOWER` and dimension 1 dofs/node.
[ Info: Created 92 elements (92 x Tet10) from element set: LOWER.
[ Info: Updating field `thermal conductivity` => 1.0 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `temperature 1` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `temperature 1` => 1.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Mortar, having name `interface between upper and lower block` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `interface between upper and lower block`
[ Info: Adding 32 elements to problem `interface between upper and lower block`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `interface between upper and lower block` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 5 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Solving linear system.
[ Info: Solved linear system in 0.15 seconds using solver 3. Solution norms (||u||, ||la||): (13.0437731745154, 7.003714644558646).
[ Info: 
[ Info: Postprocessing 5 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: minT = 0.4999999999903482, maxT = 0.5000000000093561, stdT = 3.403416428982815e-12
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating node set UPPER from element set
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 288.0 for 172 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 2` => 0.0 for 12 elements.
[ Info: Updating field `displacement 2` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM13`
[ Info: Adding 16 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 1` => 0.0 for 12 elements.
[ Info: Updating field `displacement 1` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM23`
[ Info: Adding 16 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Mortar, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 7 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Solving linear system.
[ Info: LOWER_TO_UPPER: removing dof 1316 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1319 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1358 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1387 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1388 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1492 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1597 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1627 from assembly
[ Info: Solved linear system in 0.14 seconds using solver 3. Solution norms (||u||, ||la||): (0.9445261926544026, 231.30157756354313).
[ Info: 
[ Info: Postprocessing 7 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: tet10 block: max(abs(u3)) = 0.1000000000000001, std(abs(u3)) = 7.457293553574342e-17
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating node set UPPER from element set
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 288.0 for 172 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 2` => 0.0 for 12 elements.
[ Info: Updating field `displacement 2` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM13`
[ Info: Adding 16 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 1` => 0.0 for 12 elements.
[ Info: Updating field `displacement 1` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM23`
[ Info: Adding 16 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Mortar, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 7 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Dual basis coefficient matrix: [3.000000000014778 -1.0000000000085847 -1.0000000000061935; -1.000000000008584 3.0000000000171685 -1.000000000008584; -1.0000000000061937 -1.000000000008584 3.0000000000147784]
[ Info: Dual basis coefficient matrix: [3.0000000000171676 -1.0000000000085845 -1.0000000000085847; -1.0000000000085834 3.000000000014777 -1.0000000000061937; -1.000000000008584 -1.0000000000061942 3.0000000000147793]
[ Info: Dual basis coefficient matrix: [3.0000000000105165 -1.0000000000044105 -1.0000000000061064; -1.0000000000044102 3.0000000000105183 -1.0000000000061076; -1.0000000000061056 -1.0000000000061071 3.000000000012212]
[ Info: Dual basis coefficient matrix: [3.000000000029012 -1.0000000000145073 -1.000000000014505; -1.000000000014507 3.000000000034172 -1.000000000019664; -1.0000000000145053 -1.0000000000196647 3.00000000003417]
[ Info: Dual basis coefficient matrix: [3.0000000000147753 -1.000000000006192 -1.0000000000085836; -1.0000000000061915 3.000000000014777 -1.0000000000085854; -1.0000000000085834 -1.0000000000085856 3.000000000017169]
[ Info: Dual basis coefficient matrix: [3.0000000000105183 -1.0000000000061078 -1.0000000000044105; -1.0000000000061076 3.0000000000122156 -1.0000000000061067; -1.0000000000044102 -1.0000000000061067 3.0000000000105156]
[ Info: Dual basis coefficient matrix: [3.000000000034171 -1.0000000000145068 -1.0000000000196632; -1.0000000000145066 3.0000000000290115 -1.000000000014505; -1.0000000000196634 -1.0000000000145055 3.0000000000341682]
[ Info: Dual basis coefficient matrix: [3.0000000000147775 -1.0000000000061924 -1.000000000008585; -1.0000000000061924 3.000000000014777 -1.0000000000085847; -1.0000000000085842 -1.0000000000085847 3.000000000017169]
[ Info: Dual basis coefficient matrix: [3.000000000029014 -1.0000000000145068 -1.0000000000145075; -1.0000000000145066 3.0000000000341704 -1.0000000000196636; -1.0000000000145077 -1.0000000000196632 3.0000000000341713]
[ Info: Dual basis coefficient matrix: [3.0000000000341687 -1.0000000000196638 -1.0000000000145053; -1.0000000000196638 3.0000000000341718 -1.0000000000145073; -1.000000000014505 -1.000000000014507 3.000000000029012]
[ Info: Dual basis coefficient matrix: [3.000000000010514 -1.0000000000061053 -1.00000000000441; -1.0000000000061053 3.0000000000122125 -1.0000000000061067; -1.0000000000044096 -1.0000000000061067 3.0000000000105165]
[ Info: Dual basis coefficient matrix: [3.000000000014776 -1.000000000008585 -1.0000000000061917; -1.0000000000085851 3.000000000017169 -1.0000000000085842; -1.0000000000061913 -1.0000000000085851 3.000000000014778]
[ Info: Dual basis coefficient matrix: [3.000000000029015 -1.0000000000145064 -1.0000000000145084; -1.0000000000145066 3.0000000000341713 -1.0000000000196645; -1.0000000000145084 -1.0000000000196643 3.0000000000341718]
[ Info: Dual basis coefficient matrix: [3.0000000000105165 -1.0000000000061067 -1.0000000000044096; -1.0000000000061076 3.000000000012215 -1.0000000000061076; -1.0000000000044096 -1.000000000006108 3.0000000000105187]
[ Info: Dual basis coefficient matrix: [3.00000000001478 -1.000000000008584 -1.0000000000061946; -1.0000000000085845 3.00000000001717 -1.0000000000085862; -1.0000000000061953 -1.0000000000085867 3.000000000014781]
[ Info: Dual basis coefficient matrix: [3.0000000000105187 -1.0000000000044131 -1.0000000000061062; -1.000000000004413 3.000000000010521 -1.000000000006107; -1.0000000000061071 -1.0000000000061071 3.0000000000122147]
[ Info: Dual basis coefficient matrix: [3.0000000000105147 -1.000000000006104 -1.0000000000044107; -1.0000000000061042 3.0000000000122107 -1.0000000000061064; -1.0000000000044116 -1.000000000006106 3.000000000010518]
[ Info: Dual basis coefficient matrix: [3.000000000034171 -1.0000000000196645 -1.0000000000145066; -1.000000000019664 3.0000000000341704 -1.0000000000145064; -1.0000000000145068 -1.000000000014506 3.0000000000290132]
[ Info: Solving linear system.
[ Info: LOWER_TO_UPPER: removing dof 1316 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1319 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1358 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1387 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1388 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1492 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1597 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1627 from assembly
[ Info: Solved linear system in 0.15 seconds using solver 3. Solution norms (||u||, ||la||): (0.9445261926544027, 231.30157756354322).
[ Info: 
[ Info: Postprocessing 7 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: 607 nodes found
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating node set UPPER from element set
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 177 elements (177 x Tet10) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 288.0 for 177 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 177 elements.
[ Info: Adding 177 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet10) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 2` => 0.0 for 12 elements.
[ Info: Updating field `displacement 2` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM13`
[ Info: Adding 16 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 1` => 0.0 for 12 elements.
[ Info: Updating field `displacement 1` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM23`
[ Info: Adding 16 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Mortar, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 7 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Solving linear system.
[ Info: LOWER_TO_UPPER: removing dof 1316 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1319 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1325 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1358 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1361 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1387 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1388 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1391 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1492 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1597 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1600 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1627 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1630 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1657 from assembly
[ Info: Solved linear system in 1.8 seconds using solver 3. Solution norms (||u||, ||la||): (2.0735902796591175, 403.41396256612035).
[ Info: 
[ Info: Postprocessing 7 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: 607 nodes found
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D10. Topology: Tet10
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating node set UPPER from element set
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 177 elements (177 x Tet10) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 288.0 for 177 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 177 elements.
[ Info: Adding 177 elements to problem `UPPER`
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet10) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => 0.0 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 2` => 0.0 for 12 elements.
[ Info: Updating field `displacement 2` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM13`
[ Info: Adding 16 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 12 elements.
[ Info: Updating field `geometry` for 16 elements.
[ Info: Updating field `displacement 1` => 0.0 for 12 elements.
[ Info: Updating field `displacement 1` => 0.0 for 16 elements.
[ Info: Adding 12 elements to problem `SYM23`
[ Info: Adding 16 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Mortar, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_TO_UPPER`
[ Info: Adding 32 elements to problem `LOWER_TO_UPPER`
[ Info: Creating a new analysis of type Linear with name `Linear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Linear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Linear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Linear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Linear Analysis`.
[ Info: Running linear quasistatic analysis `Linear Analysis` at time 0.0.
[ Info: Assembling 7 problems.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 18 elements.
[ Info: Solving linear system.
[ Info: LOWER_TO_UPPER: removing dof 1316 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1319 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1325 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1358 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1361 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1387 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1388 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1391 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1492 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1597 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1600 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1627 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1630 from assembly
[ Info: LOWER_TO_UPPER: removing dof 1657 from assembly
[ Info: Solved linear system in 2.18 seconds using solver 3. Solution norms (||u||, ||la||): (2.0735894357247804, 403.4140582919071).
[ Info: 
[ Info: Postprocessing 7 problems.
[ Info: Quasistatic linear analysis ready.
[ Info: Updating field `geometry` for 2 elements.
[ Info: Creating a new boundary problem of type Mortar, having name `two elements` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
┌ Warning: No elements defined in interface two elements, this will result empty assembly!
└ @ JuliaFEM ~/.julia/packages/JuliaFEM/DbhTT/src/problems_mortar.jl:57
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 1 elements.
[ Info: Updating field `normal` for 1 elements.
[ Info: Dual basis coefficient matrix: [4.133272153658013 -1.8783093049147535 -1.8783093049147488; -1.5666360768290082 6.183413137095919 -3.305103832181166; -1.5666360768290055 -3.3051038321811657 6.183413137095915]
[ Info: Updating field `geometry` for 2 elements.
[ Info: Creating a new boundary problem of type Mortar, having name `two elements` and dimension 1 dofs/node. This boundary problems fixes field `temperature`.
[ Info: Assuming dimension of mesh tie surface is 2. If this is wrong set is manually using problem.properties.dimension
[ Info: Updating field `normal` for 1 elements.
[ Info: Updating field `normal` for 1 elements.
[ Info: 116 nodes found
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: UPPER
[ Info: Parsing elements. Type: C3D4. Topology: Tet4
[ Info: Adding elset: LOWER
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SOLID SECTION'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'MATERIAL'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'ELASTIC'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'DENSITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'SPECIFIC HEAT'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
┌ Warning: Unknown section: 'CONDUCTIVITY'
└ @ AbaqusReader ~/.julia/packages/AbaqusReader/sDEH0/src/parse_mesh.jl:264
[ Info: Creating a new problem of type Elasticity, having name `UPPER` and dimension 3 dofs/node.
[ Info: Created 172 elements (172 x Tet4) from element set: UPPER.
[ Info: Updating field `youngs modulus` => 864.0 for 172 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 172 elements.
[ Info: Adding 172 elements to problem `UPPER`
[ Info: upper postprocess: ["strain", "stress"]
[ Info: Creating a new problem of type Elasticity, having name `LOWER` and dimension 3 dofs/node.
[ Info: Created 92 elements (92 x Tet4) from element set: LOWER.
[ Info: Updating field `youngs modulus` => 288.0 for 92 elements.
[ Info: Updating field `poissons ratio` => 0.3333333333333333 for 92 elements.
[ Info: Adding 92 elements to problem `LOWER`
[ Info: lower postprocess: ["strain", "stress"]
[ Info: Creating a new boundary problem of type Dirichlet, having name `UPPER_TOP` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `displacement 3` => -0.4 for 32 elements.
[ Info: Adding 32 elements to problem `UPPER_TOP`
[ Info: Creating a new boundary problem of type Dirichlet, having name `LOWER_BOTTOM` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `displacement 3` => 0.0 for 18 elements.
[ Info: Adding 18 elements to problem `LOWER_BOTTOM`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM13` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 2` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM13`
[ Info: Creating a new boundary problem of type Dirichlet, having name `SYM23` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 4 elements.
[ Info: Updating field `displacement 1` => 0.0 for 4 elements.
[ Info: Adding 4 elements to problem `SYM23`
[ Info: Creating a new boundary problem of type Contact, having name `LOWER_TO_UPPER` and dimension 3 dofs/node. This boundary problems fixes field `displacement`.
[ Info: Updating field `geometry` for 18 elements.
[ Info: Updating field `geometry` for 32 elements.
[ Info: Updating field `master elements` for 18 elements.
[ Info: Creating a new analysis of type Nonlinear with name `Nonlinear Analysis`.
[ Info: Adding problem `UPPER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `UPPER_TOP` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_BOTTOM` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM13` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `SYM23` to analysis `Nonlinear Analysis`.
[ Info: Adding problem `LOWER_TO_UPPER` to analysis `Nonlinear Analysis`.
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #1
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: First contact iteration, initial contact state = AUTO
[ Info: Average weighted gap = 5.2963516956539435e-20, std gap = 1.5534167923044294e-19, automatically determined contact state = ACTIVE
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 440 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 453 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 463 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 473 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 474 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 488 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 498 | 1 | 0 | 1 | 0.0 | 0.0 | 0.0
[ Info: 508 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 518 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 533 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 543 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 559 | 1 | 0 | 1 | 0.0 | 0.0 | -0.0
[ Info: 563 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 569 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: 573 | 1 | 0 | 1 | -0.0 | 0.0 | 0.0
[ Info: Solving linear system.
[ Info: Solved linear system in 0.03 seconds using solver 3. Solution norms (||u||, ||la||): (3.4961187835053766, 693.9047326906298).
[ Info: 
[ Info: --------------------------------------------------------------------------------
[ Info: Starting nonlinear iteration #2
[ Info: Increment time t=0.0
[ Info: --------------------------------------------------------------------------------
[ Info: Updating field `normal` for 18 elements.
[ Info: # | active | stick | slip | gap | pres | comp
[ Info: 439 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 440 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 453 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 463 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 473 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 474 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 488 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 498 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 508 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 518 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 533 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 543 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 559 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 563 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: 569 | 1 | 0 | 1 | 0.0 | 172.8 | 172.8
[ Info: 573 | 1 | 0 | 1 | -0.0 | 172.8 | 172.8
[ Info: Solving linear system.
[ Info: Solved linear system in 0.03 seconds using solver 3. Solution norms (||u||, ||la||): (8.109230731211415e-15, 693.9047326906299).
[ Info: 
[ Info: Converged in 2 iterations.
[ Info: Postprocessing 7 problems.
[ Info: Running postprocess for problem UPPER, field strain
[ Info: Updating field `strain` for 172 elements.
[ Info: Running postprocess for problem UPPER, field stress
[ Info: Updating field `stress` for 172 elements.
[ Info: Running postprocess for problem LOWER, field strain
[ Info: Updating field `strain` for 92 elements.
[ Info: Running postprocess for problem LOWER, field stress
[ Info: Updating field `stress` for 92 elements.
[ Info: Running postprocess for problem UPPER_TOP, field reaction force
[ Info: Updating field `reaction force` for 32 elements.
[ Info: Running postprocess for problem LOWER_BOTTOM, field reaction force
[ Info: Updating field `reaction force` for 18 elements.
[ Info: Running postprocess for problem SYM13, field reaction force
[ Info: Updating field `reaction force` for 4 elements.
[ Info: Running postprocess for problem SYM23, field reaction force
[ Info: Updating field `reaction force` for 4 elements.
[ Info: Running postprocess for problem LOWER_TO_UPPER, field contact pressure
[ Info: Updating field `contact pressure` for 50 elements.
Test Summary: | Pass  Broken  Total
JuliaFEM.jl   |  149       1    150
   Testing JuliaFEM tests passed 
