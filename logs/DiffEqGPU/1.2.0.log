 Resolving package versions...
 Installed Adapt ─────────────────────── v1.0.0
 Installed DiffEqGPU ─────────────────── v0.4.0
 Installed TableTraits ───────────────── v1.0.0
 Installed AbstractFFTs ──────────────── v0.4.1
 Installed GPUifyLoops ───────────────── v0.2.9
 Installed DiffEqBase ────────────────── v6.6.0
 Installed CUDAnative ────────────────── v2.5.5
 Installed CuArrays ──────────────────── v1.4.7
 Installed Requires ──────────────────── v0.5.2
 Installed TimerOutputs ──────────────── v0.5.3
 Installed FunctionWrappers ──────────── v1.0.0
 Installed DocStringExtensions ───────── v0.8.1
 Installed OrderedCollections ────────── v1.1.0
 Installed Compat ────────────────────── v2.2.0
 Installed NNlib ─────────────────────── v0.6.0
 Installed CUDAdrv ───────────────────── v4.0.4
 Installed RecipesBase ───────────────── v0.7.0
 Installed CUDAapi ───────────────────── v2.0.0
 Installed TreeViews ─────────────────── v0.3.0
 Installed GPUArrays ─────────────────── v2.0.0
 Installed DataStructures ────────────── v0.17.6
 Installed IterativeSolvers ──────────── v0.8.1
 Installed Cassette ──────────────────── v0.2.6
 Installed Roots ─────────────────────── v0.8.3
 Installed DiffEqDiffTools ───────────── v1.4.0
 Installed RecursiveFactorization ────── v0.1.0
 Installed RecursiveArrayTools ───────── v1.0.2
 Installed MuladdMacro ───────────────── v0.2.1
 Installed ArrayInterface ────────────── v1.2.1
 Installed Parameters ────────────────── v0.12.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed StaticArrays ──────────────── v0.12.1
 Installed MacroTools ────────────────── v0.5.2
 Installed CEnum ─────────────────────── v0.2.0
 Installed LLVM ──────────────────────── v1.3.2
  Updating `~/.julia/environments/v1.2/Project.toml`
  [071ae1c0] + DiffEqGPU v0.4.0
  Updating `~/.julia/environments/v1.2/Manifest.toml`
  [621f4979] + AbstractFFTs v0.4.1
  [79e6a3ab] + Adapt v1.0.0
  [4fba245c] + ArrayInterface v1.2.1
  [fa961155] + CEnum v0.2.0
  [3895d2a7] + CUDAapi v2.0.0
  [c5f51814] + CUDAdrv v4.0.4
  [be33ccc6] + CUDAnative v2.5.5
  [7057c7e9] + Cassette v0.2.6
  [34da2185] + Compat v2.2.0
  [3a865a2d] + CuArrays v1.4.7
  [864edb3b] + DataStructures v0.17.6
  [2b5f629d] + DiffEqBase v6.6.0
  [01453d9d] + DiffEqDiffTools v1.4.0
  [071ae1c0] + DiffEqGPU v0.4.0
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.0.0
  [0c68f7d7] + GPUArrays v2.0.0
  [ba82f77b] + GPUifyLoops v0.2.9
  [42fd0dbc] + IterativeSolvers v0.8.1
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [929cbde3] + LLVM v1.3.2
  [1914dd2f] + MacroTools v0.5.2
  [46d2c3a1] + MuladdMacro v0.2.1
  [872c559c] + NNlib v0.6.0
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.0.2
  [f2c3362d] + RecursiveFactorization v0.1.0
  [ae029012] + Requires v0.5.2
  [f2b01f46] + Roots v0.8.3
  [90137ffa] + StaticArrays v0.12.1
  [3783bdb8] + TableTraits v1.0.0
  [a759f4b9] + TimerOutputs v0.5.3
  [a2a6695c] + TreeViews v0.3.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing DiffEqGPU
 Resolving package versions...
 Installed URIParser ──────────── v0.4.0
 Installed Reexport ───────────── v0.2.0
 Installed Inflate ────────────── v0.1.1
 Installed CommonSubexpressions ─ v0.2.0
 Installed BinaryProvider ─────── v0.5.8
 Installed ExponentialUtilities ─ v1.5.1
 Installed ForwardDiff ────────── v0.10.6
 Installed GenericSVD ─────────── v0.2.2
 Installed VertexSafeGraphs ───── v0.1.0
 Installed DiffRules ──────────── v0.1.0
 Installed NaNMath ────────────── v0.3.3
 Installed DiffResults ────────── v0.0.4
 Installed SparseDiffTools ────── v0.10.3
 Installed OrdinaryDiffEq ─────── v5.23.0
 Installed LightGraphs ────────── v1.3.0
 Installed SimpleTraits ───────── v0.9.1
 Installed BinDeps ────────────── v0.8.10
 Installed ArnoldiMethod ──────── v0.0.4
 Installed SpecialFunctions ───── v0.8.0
  Building SpecialFunctions → `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
    Status `/tmp/jl_9eASxX/Manifest.toml`
  [621f4979] AbstractFFTs v0.4.1
  [79e6a3ab] Adapt v1.0.0
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v1.2.1
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [fa961155] CEnum v0.2.0
  [3895d2a7] CUDAapi v2.0.0
  [c5f51814] CUDAdrv v4.0.4
  [be33ccc6] CUDAnative v2.5.5
  [7057c7e9] Cassette v0.2.6
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [3a865a2d] CuArrays v1.4.7
  [864edb3b] DataStructures v0.17.6
  [2b5f629d] DiffEqBase v6.6.0
  [01453d9d] DiffEqDiffTools v1.4.0
  [071ae1c0] DiffEqGPU v0.4.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [ffbed154] DocStringExtensions v0.8.1
  [d4d017d3] ExponentialUtilities v1.5.1
  [f6369f11] ForwardDiff v0.10.6
  [069b7b12] FunctionWrappers v1.0.0
  [0c68f7d7] GPUArrays v2.0.0
  [ba82f77b] GPUifyLoops v0.2.9
  [01680d73] GenericSVD v0.2.2
  [d25df0c9] Inflate v0.1.1
  [42fd0dbc] IterativeSolvers v0.8.1
  [82899510] IteratorInterfaceExtensions v1.0.0
  [929cbde3] LLVM v1.3.2
  [093fc24a] LightGraphs v1.3.0
  [1914dd2f] MacroTools v0.5.2
  [46d2c3a1] MuladdMacro v0.2.1
  [872c559c] NNlib v0.6.0
  [77ba4419] NaNMath v0.3.3
  [bac558e1] OrderedCollections v1.1.0
  [1dea7af3] OrdinaryDiffEq v5.23.0
  [d96e819e] Parameters v0.12.0
  [3cdcf5f2] RecipesBase v0.7.0
  [731186ca] RecursiveArrayTools v1.0.2
  [f2c3362d] RecursiveFactorization v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [f2b01f46] Roots v0.8.3
  [699a6c99] SimpleTraits v0.9.1
  [47a9eef4] SparseDiffTools v0.10.3
  [276daf66] SpecialFunctions v0.8.0
  [90137ffa] StaticArrays v0.12.1
  [3783bdb8] TableTraits v1.0.0
  [a759f4b9] TimerOutputs v0.5.3
  [a2a6695c] TreeViews v0.3.0
  [30578b45] URIParser v0.4.0
  [19fa3120] VertexSafeGraphs v0.1.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
WARNING: Method definition overdub(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:524 overwritten in module GPUifyLoops at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:524.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition recurse(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:537 overwritten in module GPUifyLoops at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:537.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition recurse(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:537 overwritten in module GPUifyLoops at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:537.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition overdub(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:524 overwritten in module GPUifyLoops at /root/.julia/packages/Cassette/YCOeN/src/overdub.jl:524.
  ** incremental compilation may be fatally broken for this module **

[ Info: CUDAdrv.jl failed to initialize, GPU functionality unavailable (set JULIA_CUDA_SILENT or JULIA_CUDA_VERBOSE to silence or expand this message)
ERROR: LoadError: could not load library "libcuda"
libcuda.so: cannot open shared object file: No such file or directory
Stacktrace:
 [1] #dlopen#3(::Bool, ::typeof(Libdl.dlopen), ::String, ::UInt32) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Libdl/src/Libdl.jl:109
 [2] dlopen at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Libdl/src/Libdl.jl:109 [inlined]
 [3] #dlopen#2 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Libdl/src/Libdl.jl:105 [inlined]
 [4] dlopen at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Libdl/src/Libdl.jl:105 [inlined] (repeats 2 times)
 [5] (::getfield(CUDAdrv, Symbol("##603#lookup_fptr#132")))() at /root/.julia/packages/CUDAapi/CCgJL/src/call.jl:29
 [6] cuMemAlloc_v2(::Base.RefValue{CUDAdrv.CuPtr{Nothing}}, ::Int64) at /root/.julia/packages/CUDAapi/CCgJL/src/call.jl:37
 [7] actual_alloc(::Int64) at /root/.julia/packages/CUDAdrv/3EzC1/src/memory.jl:64
 [8] actual_alloc at /root/.julia/packages/CuArrays/7z7MV/src/memory/binned.jl:53 [inlined]
 [9] macro expansion at /root/.julia/packages/CuArrays/7z7MV/src/memory/binned.jl:194 [inlined]
 [10] macro expansion at /root/.julia/packages/TimerOutputs/7Id5J/src/TimerOutput.jl:214 [inlined]
 [11] pool_alloc(::Int64, ::Int64) at /root/.julia/packages/CuArrays/7z7MV/src/memory/binned.jl:193
 [12] (::getfield(CuArrays.BinnedPool, Symbol("##9#10")){Int64,Int64,Set{CuArrays.BinnedPool.Block},Array{CuArrays.BinnedPool.Block,1}})() at /root/.julia/packages/CuArrays/7z7MV/src/memory/binned.jl:296
 [13] lock(::getfield(CuArrays.BinnedPool, Symbol("##9#10")){Int64,Int64,Set{CuArrays.BinnedPool.Block},Array{CuArrays.BinnedPool.Block,1}}, ::ReentrantLock) at ./lock.jl:140
 [14] alloc(::Int64) at /root/.julia/packages/CuArrays/7z7MV/src/memory/binned.jl:295
 [15] macro expansion at /root/.julia/packages/TimerOutputs/7Id5J/src/TimerOutput.jl:214 [inlined]
 [16] macro expansion at /root/.julia/packages/CuArrays/7z7MV/src/memory.jl:121 [inlined]
 [17] macro expansion at ./util.jl:213 [inlined]
 [18] alloc at /root/.julia/packages/CuArrays/7z7MV/src/memory.jl:120 [inlined]
 [19] CuArray{Float32,2,P} where P(::UndefInitializer, ::Tuple{Int64,Int64}) at /root/.julia/packages/CuArrays/7z7MV/src/array.jl:90
 [20] Type at /root/.julia/packages/CuArrays/7z7MV/src/array.jl:174 [inlined]
 [21] CuArray(::Array{Float32,2}) at /root/.julia/packages/CuArrays/7z7MV/src/array.jl:188
 [22] #batch_solve#6(::Base.Iterators.Pairs{Symbol,Float32,Tuple{Symbol},NamedTuple{(:saveat,),Tuple{Float32}}}, ::typeof(DiffEqGPU.batch_solve), ::EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}}, ::Tsit5, ::EnsembleGPUArray, ::UnitRange{Int64}) at /root/.julia/packages/DiffEqGPU/sqGNF/src/DiffEqGPU.jl:174
 [23] (::getfield(DiffEqGPU, Symbol("##4#5")){Int64,Int64,Base.Iterators.Pairs{Symbol,Float32,Tuple{Symbol},NamedTuple{(:saveat,),Tuple{Float32}}},EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}},Tsit5,EnsembleGPUArray})(::Int64) at ./none:0
 [24] iterate(::Base.Generator{UnitRange{Int64},getfield(DiffEqGPU, Symbol("##4#5")){Int64,Int64,Base.Iterators.Pairs{Symbol,Float32,Tuple{Symbol},NamedTuple{(:saveat,),Tuple{Float32}}},EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}},Tsit5,EnsembleGPUArray}}) at ./generator.jl:47
 [25] _collect(::UnitRange{Int64}, ::Base.Generator{UnitRange{Int64},getfield(DiffEqGPU, Symbol("##4#5")){Int64,Int64,Base.Iterators.Pairs{Symbol,Float32,Tuple{Symbol},NamedTuple{(:saveat,),Tuple{Float32}}},EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}},Tsit5,EnsembleGPUArray}}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:619
 [26] collect_similar(::UnitRange{Int64}, ::Base.Generator{UnitRange{Int64},getfield(DiffEqGPU, Symbol("##4#5")){Int64,Int64,Base.Iterators.Pairs{Symbol,Float32,Tuple{Symbol},NamedTuple{(:saveat,),Tuple{Float32}}},EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}},Tsit5,EnsembleGPUArray}}) at ./array.jl:548
 [27] map(::Function, ::UnitRange{Int64}) at ./abstractarray.jl:2073
 [28] #__solve#3(::Int64, ::Int64, ::Base.Iterators.Pairs{Symbol,Float32,Tuple{Symbol},NamedTuple{(:saveat,),Tuple{Float32}}}, ::typeof(DiffEqBase.__solve), ::EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}}, ::Tsit5, ::EnsembleGPUArray) at /root/.julia/packages/DiffEqGPU/sqGNF/src/DiffEqGPU.jl:153
 [29] (::getfield(DiffEqBase, Symbol("#kw##solve")))(::NamedTuple{(:trajectories, :saveat),Tuple{Int64,Float32}}, ::typeof(solve), ::EnsembleProblem{ODEProblem{Array{Float32,1},Tuple{Float32,Float32},true,Tuple{Float32,Float32,Float32},ODEFunction{true,typeof(lorenz),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},getfield(Main, Symbol("##5#6")),getfield(DiffEqBase, Symbol("##332#338")),getfield(DiffEqBase, Symbol("##334#340")),Array{Any,1}}, ::Tsit5, ::EnsembleGPUArray) at ./none:0
 [30] top-level scope at util.jl:156
 [31] include at ./boot.jl:328 [inlined]
 [32] include_relative(::Module, ::String) at ./loading.jl:1094
 [33] include(::Module, ::String) at ./Base.jl:31
 [34] include(::String) at ./client.jl:431
 [35] top-level scope at none:5
in expression starting at /root/.julia/packages/DiffEqGPU/sqGNF/test/runtests.jl:23
ERROR: Package DiffEqGPU errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/Types.jl:112
 [2] #test#119(::Bool, ::Nothing, ::typeof(Pkg.Operations.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/Operations.jl:1288
 [3] #test at ./none:0 [inlined]
 [4] #test#62(::Bool, ::Nothing, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:245
 [5] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:233 [inlined]
 [6] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:230 [inlined]
 [7] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:230 [inlined]
 [8] #test#60 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:229 [inlined]
 [9] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:229 [inlined]
 [10] #test#59(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:228
 [11] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.2/Pkg/src/API.jl:228
 [12] top-level scope at none:10
