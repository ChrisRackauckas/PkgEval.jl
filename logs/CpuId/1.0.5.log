 Resolving package versions...
 Installed CpuId â”€ v0.2.2
  Updating `~/.julia/environments/v1.0/Project.toml`
  [adafc99b] + CpuId v0.2.2
  Updating `~/.julia/environments/v1.0/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
   Testing CpuId
    Status `/tmp/tmplah5ii/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [8dfed614] Test  [`@stdlib/Test`]
| Cpu Property       | Value                                                      |
|:------------------ |:---------------------------------------------------------- |
| Brand              | AMD Ryzen Threadripper 2990WX 32-Core Processor            |
| Vendor             | :AMD                                                       |
| Architecture       | :Zen                                                       |
| Model              | Family: 0x8f, Model: 0x08, Stepping: 0x02, Type: 0x00      |
| Cores              | 64 physical cores, 64 logical cores (on executing CPU)     |
|                    | No Hyperthreading detected                                 |
| Clock Frequencies  | Not supported by CPU                                       |
| Data Cache         | Level 1:3 : (32, 512, 8192) kbytes                         |
|                    | 64 byte cache line size                                    |
| Address Size       | 48 bits virtual, 48 bits physical                          |
| SIMD               | 256 bit = 32 byte max. SIMD vector size                    |
| Time Stamp Counter | TSC is accessible via `rdtsc`                              |
|                    | TSC runs at constant rate (invariant from clock frequency) |
| Perf. Monitoring   | Performance Monitoring Counters (PMC) are not supported    |
| Hypervisor         | No                                                         |

| Cpu Feature | Description                                                  |
|:----------- |:------------------------------------------------------------ |
| ADX         | Intel ADX (Multi-Precision Add-Carry Instruction Extensions) |
| AES         | AES encryption instruction set                               |
| AHF64       | LAHF and SAHF in PM64                                        |
| APIC        | APIC on-chip (Advanced Programmable Interrupt Controller)    |
| APIC_       | APIC                                                         |
| AVX         | 256bit Advanced Vector Extensions, AVX                       |
| AVX2        | SIMD 256bit Advanced Vector Extensions 2                     |
| BMI1        | Bit Manipulation Instruction Set 1                           |
| BMI2        | Bit Manipulation Instruction Set 2                           |
| CLFLUSH     | CLFLUSHOPT Instructions                                      |
| CLFSH       | CLFLUSH instruction (SSE2)                                   |
| CMOV        | Conditional move CMOV and FCMOV instructions                 |
| CMOV_       | CMOVxx                                                       |
| CMPLEG      | HTT or CMP flag                                              |
| CPB         | Core performance boost                                       |
| CR8D        | MOV from and to CR8D                                         |
| CX16        | CMPXCHG16B instruction                                       |
| CX8         | CMPXCHG8 instruction (64bit compare and exchange)            |
| CX8_        | CMPXCHG8B                                                    |
| DBX         | Data breakpoint extensions                                   |
| DE          | Debugging extensions                                         |
| DE_         | MOV from and to DR4 and DR5                                  |
| EFRO        | Read-only MPERF/APERF                                        |
| EXTAPIC     | Extended APIC space                                          |
| F16C        | half-precision float support                                 |
| FFXSR       | FFXSR                                                        |
| FMA3        | Fused multiply-add using three operands                      |
| FP128       | 1x128 bit instead of 2x 64-bit processing                    |
| FPU         | Onboard x87 FPU                                              |
| FPU_        | FPU                                                          |
| FSGS        | Access to base of %fs and %gs                                |
| FXSR        | FXSAVE, FXRSTOR instructions                                 |
| FXSR_       | AMD and Cyrix specific                                       |
| HTT         | Max APIC IDs reserved field is valid                         |
| HWPS        | Hardware P-state support                                     |
| LM          | AMD64 long mode                                              |
| LZCNT       | LZCNT instruction                                            |
| MCA         | Machine Check Architecture (MSR)                             |
| MCA_        | MCA                                                          |
| MCE         | Machine check exception                                      |
| MCE_        | MCE (MSR)                                                    |
| MMX         | 64bit Multimedia Streaming Extensions                        |
| MMXEXT_     | MMX-SSE (AMD specific)                                       |
| MMX_        | 64bit Streaming SIMD extensions (MMX)                        |
| MON         | MONITOR and MWAIT instructions                               |
| MONX        | MONITORX/MWAITX instructions                                 |
| MOVBE       | MOVBE instruction                                            |
| MOVU        | prefer unaligned MOV over MOVL/MOVH                          |
| MSR         | Model Specific Registers, RDMSR and WRMSR instructions       |
| MSR_        | RDMSR and WDMSR                                              |
| MTRR        | Memory Type Range Registers                                  |
| MTRR_       | MTRR (MSR)                                                   |
| NX          | NXE                                                          |
| OSVW        | Operating-system-visible workaround                          |
| OSXSV       | XSAVE enabled by OS                                          |
| PAE         | Physical address extension                                   |
| PAE_        | PDPTE 64bit                                                  |
| PAT         | Page attribute table                                         |
| PAT_        | FCMOVxx                                                      |
| PCLMUL      | PCLMULQDQ support                                            |
| PCXCORE     | Core performance counter extensions                          |
| PCXL2I      | L2I performance counter extensions                           |
| PCXNB       | NB performance counter extensions                            |
| PG1G        | PG1G                                                         |
| PGE         | Page global bit                                              |
| PGE_        | PDE and PTE                                                  |
| POPCNT      | POPCNT instruction                                           |
| PREFETCHW   | PREFETCHW instruction                                        |
| PSE         | Page size extensions                                         |
| PSE36       | 36bit page size extension                                    |
| PSE36_      | 4 MB PDE bits 16..13                                         |
| PSE_        | PSE                                                          |
| RDRND       | On-chip random number generator                              |
| RDSEED      | RDSEED instruction                                           |
| RDTSCP      | RDTSCP instruction                                           |
| SEP         | SYSENTER and SYSEXIT instructions                            |
| SHA         | Intel SHA extensions                                         |
| SKINIT      | SKINIT, STGI, DEV                                            |
| SMAP        | Supervisor Mode Access Prevention                            |
| SMEP        | Supervisor-Mode Execution Prevention                         |
| SSE         | 128bit Streaming SIMD Extensions 1                           |
| SSE2        | 128bit Streaming SIMD Extensions 2                           |
| SSE3        | 128bit Streaming SIMD Extensions 3                           |
| SSE41       | 128bit Streaming SIMD Extensions 4.1                         |
| SSE42       | 128bit Streaming SIMD Extensions 4.2                         |
| SSE4A       | Streaming SIMD extensions 4A                                 |
| SSEMISALIGN | Misaligned SSE                                               |
| SSSE3       | 128bit Supplemental Streaming SIMD Extension 3               |
| SVM         | VMRUN, VMCALL, VMLOAD and VMSAVE etc.                        |
| SYSCALL     | SYSCALL and SYSRET                                           |
| TCE         | Translation cache extension                                  |
| TM_         | Thermal monitoring                                           |
| TOPX        | Topology extensions on 0x8000'001D to 0x8000'001E            |
| TS          | Temperature sensor                                           |
| TSC         | Time stamp counter                                           |
| TSCINV      | Invariant TSC                                                |
| TSC_        | RSC, RDTSC, CR4.TSC                                          |
| TTP         | Thermal trip                                                 |
| VME         | Virtual 8086 mode enhancements                               |
| VME_        | CR4                                                          |
| WDT         | Watch dog timer                                              |
| XSAVE       | XSAVE, XRESTOR, XSETBV, XGETBV                               |



processor	: 0
vendor_id	: AuthenticAMD
cpu family	: 23
model		: 8
model name	: AMD Ryzen Threadripper 2990WX 32-Core Processor
stepping	: 2
microcode	: 0x800820b
cpu MHz		: 3084.848
cache size	: 512 KB
physical id	: 0
siblings	: 64
core id		: 0
cpu cores	: 32
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid amd_dcm aperfmperf pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb hw_pstate sme ssbd sev ibpb vmmcall fsgsbase bmi1 avx2 smep bmi2 rdseed adx smap clflushopt sha_ni xsaveopt xsavec xgetbv1 xsaves clzero irperf xsaveerptr arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif overflow_recov succor smca
bugs		: sysret_ss_attrs null_seg spectre_v1 spectre_v2 spec_store_bypass
bogomips	: 5987.91
TLB size	: 2560 4K pages
clflush size	: 64
cache_alignment	: 64
address sizes	: 43 bits physical, 48 bits virtual
power management: ts ttp tm hwpstate cpb eff_freq_ro [13] [14]
Test Summary: | Pass  Total
ReturnTypes   |   49     49
Dump of all cpuid leafs, used for mocking 'cpuid'...

# AMD Ryzen Threadripper 2990WX 32-Core Processor without hypervisor
push!( _mockdb, (Dict(
    ((0x00000000, 0x00000000) => (0x0000000d, 0x68747541, 0x444d4163, 0x69746e65)),
    ((0x00000001, 0x00000000) => (0x00800f82, 0x30400800, 0x7ed8320b, 0x178bfbff)),
    ((0x00000002, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x00000003, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x00000004, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x00000005, 0x00000000) => (0x00000040, 0x00000040, 0x00000003, 0x00000011)),
    ((0x00000006, 0x00000000) => (0x00000004, 0x00000000, 0x00000001, 0x00000000)),
    ((0x00000007, 0x00000000) => (0x00000000, 0x209c01a9, 0x00000000, 0x00000000)),
    ((0x00000008, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x00000009, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x0000000a, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x0000000b, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x0000000c, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x0000000d, 0x00000000) => (0x00000007, 0x00000340, 0x00000340, 0x00000000)),
    ((0x80000000, 0x00000000) => (0x8000001f, 0x68747541, 0x444d4163, 0x69746e65)),
    ((0x80000001, 0x00000000) => (0x00800f82, 0x70000000, 0x35c233ff, 0x2fd3fbff)),
    ((0x80000002, 0x00000000) => (0x20444d41, 0x657a7952, 0x6854206e, 0x64616572)),
    ((0x80000003, 0x00000000) => (0x70706972, 0x32207265, 0x57303939, 0x32332058)),
    ((0x80000004, 0x00000000) => (0x726f432d, 0x72502065, 0x7365636f, 0x00726f73)),
    ((0x80000005, 0x00000000) => (0xff40ff40, 0xff40ff40, 0x20080140, 0x40040140)),
    ((0x80000006, 0x00000000) => (0x36006400, 0x56006400, 0x02006140, 0x0200c140)),
    ((0x80000007, 0x00000000) => (0x00000000, 0x0000001b, 0x00000000, 0x00006799)),
    ((0x80000008, 0x00000000) => (0x00003030, 0x00001007, 0x0000603f, 0x00000000)),
    ((0x80000009, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000000a, 0x00000000) => (0x00000001, 0x00008000, 0x00000000, 0x0001bcff)),
    ((0x8000000b, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000000c, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000000d, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000000e, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000000f, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000010, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000011, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000012, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000013, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000014, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000015, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000016, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000017, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000018, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x80000019, 0x00000000) => (0xf040f040, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000001a, 0x00000000) => (0x00000003, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000001b, 0x00000000) => (0x000003ff, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000001c, 0x00000000) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000001d, 0x00000000) => (0x00004121, 0x01c0003f, 0x0000003f, 0x00000000)),
    ((0x8000001e, 0x00000000) => (0x00000030, 0x00000100, 0x00000303, 0x00000000)),
    ((0x8000001f, 0x00000000) => (0x0000000f, 0x0000016f, 0x0000000f, 0x00000001)),
    ((0x00000004, 0x00000001) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x0000000b, 0x00000001) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
    ((0x8000001d, 0x00000001) => (0x00004122, 0x00c0003f, 0x000000ff, 0x00000000)),
    ((0x8000001d, 0x00000002) => (0x00004143, 0x01c0003f, 0x000003ff, 0x00000002)),
    ((0x8000001d, 0x00000003) => (0x0001c163, 0x03c0003f, 0x00001fff, 0x00000001)),
    ((0x8000001d, 0x00000004) => (0x00000000, 0x00000000, 0x00000000, 0x00000000)),
  ) => Dict{Symbol,Any}(
    :cpuvendor       => :AMD,
    :cpuarchitecture => :Zen,
    :cpucores        => 64,
    :cputhreads      => 64,
    :cachesize       => (32768, 524288, 8388608),
    :cachelinesize   => 64,
    :simdbits        => 256,
  )))

Done.



-----
Mocking CpuId
-----

Tested recorded cpuid table #1 for ''
Tested recorded cpuid table #2 for 'Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz'
Tested recorded cpuid table #3 for 'Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz'
Tested recorded cpuid table #4 for 'Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz'
Tested recorded cpuid table #5 for 'Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz'
Tested recorded cpuid table #6 for 'Intel(R) Xeon(R) CPU           X5570  @ 2.93GHz'
Tested recorded cpuid table #7 for 'Intel(R) Core(TM) i5-2520M CPU @ 2.50GHz'
Tested recorded cpuid table #8 for 'Intel(R) Core(TM) i5-2520M CPU @ 2.50GHz'
Tested recorded cpuid table #9 for 'Intel(R) Xeon Phi(TM) CPU 7250 @ 1.40GHz'
Tested recorded cpuid table #10 for 'Intel(R) Xeon(R) CPU E3-1241 v3 @ 3.50GHz'
Tested recorded cpuid table #11 for 'Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz'
Tested recorded cpuid table #12 for 'AMD A10-8700P Radeon R6, 10 Compute Cores 4C+6G'
Tested recorded cpuid table #13 for 'AMD Ryzen Threadripper 1950X 16-Core Processor'
Tested recorded cpuid table #14 for 'AMD A8-6410 APU with AMD Radeon R5 Graphics'
Tested recorded cpuid table #15 for 'AMD Athlon(tm) 5350 APU with Radeon(tm) R3'
Tested recorded cpuid table #16 for 'AMD EPYC 7401P 24-Core Processor'
Test Summary: | Pass  Broken  Total
Mocking       |  174       2    176
   Testing CpuId tests passed 
